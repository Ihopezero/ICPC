<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3-12</title>
    <url>/2020/03/13/3-12/</url>
    <content><![CDATA[<p>[蓝桥杯2017初赛]跳蚱蜢<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>如图所示： 有9只盘子，排成1个圆圈。其中8只盘子内装着8只蚱蜢，有一个是空盘。<br><img src="http://oj.ecustacm.cn/upload/image/20191117/20191117211552_97268.png" alt><br>我们把这些蚱蜢顺时针编号为 1~8。每只蚱蜢都可以跳到相邻的空盘中，也可以再用点力，越过一个相邻的蚱蜢跳到空盘中。<br>请你计算一下，如果要使得蚱蜢们的队形改为按照逆时针排列，并且保持空盘的位置不变（也就是1-8换位，2-7换位,…），至少要经过多少次跳跃？ </p>
<p>输出<br>输出一个整数表示答案</p>
</blockquote>
<p>参考：<a href="https://www.cnblogs.com/-Ackerman/p/12245137.html" target="_blank" rel="noopener">https://www.cnblogs.com/-Ackerman/p/12245137.html</a></p>
<p>思路：<br>空盘子想象为9<br>起始状态为123456789，最终状态为876543219，<br>每一步可以想象为9跟距离小于等于2的数字交换位置，<br>bfs搜索出从起始状态到最终状态所需的最少步数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*bool vis[MAX_N] ; </span></span><br><span class="line"><span class="comment">int dir[4]=&#123;-1,1,2,-2&#125;;</span></span><br><span class="line"><span class="comment">int st=123456789,ed=876543219;</span></span><br><span class="line"><span class="comment">int a[9];</span></span><br><span class="line"><span class="comment">int ans=0;</span></span><br><span class="line"><span class="comment">int sum()&#123;</span></span><br><span class="line"><span class="comment">	int res=0;</span></span><br><span class="line"><span class="comment">	for(int i=0;i&lt;9;i++)&#123;</span></span><br><span class="line"><span class="comment">		res*=10;</span></span><br><span class="line"><span class="comment">		res+=a[i];</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	return res;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*queue&lt;pair&lt;int,int&gt; &gt; que;</span></span><br><span class="line"><span class="comment">	que.push(make_pair(st,0));</span></span><br><span class="line"><span class="comment">	while(que.size())&#123;</span></span><br><span class="line"><span class="comment">		int x=que.front().first;</span></span><br><span class="line"><span class="comment">		int step=que.front().second;</span></span><br><span class="line"><span class="comment">		que.pop();</span></span><br><span class="line"><span class="comment">		if(vis[x])&#123;</span></span><br><span class="line"><span class="comment">			continue;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		vis[x]=1;</span></span><br><span class="line"><span class="comment">		if(x==ed)&#123;</span></span><br><span class="line"><span class="comment">			ans=step;</span></span><br><span class="line"><span class="comment">			break;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		int j=8,now;</span></span><br><span class="line"><span class="comment">		while(x)&#123;</span></span><br><span class="line"><span class="comment">			if(x%10==9) now=j;</span></span><br><span class="line"><span class="comment">			a[j--]=x%10;</span></span><br><span class="line"><span class="comment">			x/=10;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		for(int i=0;i&lt;4;i++)&#123;</span></span><br><span class="line"><span class="comment">			swap(a[now],a[(now+dir[i]+9)%9]);</span></span><br><span class="line"><span class="comment">			int val=sum();</span></span><br><span class="line"><span class="comment">			if(vis[val]!=1)&#123;</span></span><br><span class="line"><span class="comment">				que.push(make_pair(val,step+1));</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">			swap(a[now],a[(now+dir[i]+9)%9]);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	printf("%d\n",ans);*/</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">20</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2017初赛]方格分割</p>
<blockquote>
<p>题目描述<br>6x6的方格，沿着格子的边线剪开成两部分。要求这两部分的形状完全相同。如图就是可行的分割法。<br><img src="http://oj.ecustacm.cn/upload/image/20191117/20191117212110_14590.png" alt><br><img src="http://oj.ecustacm.cn/upload/image/20191117/20191117212144_93066.png" alt><br><img src="http://oj.ecustacm.cn/upload/image/20191117/20191117212203_30964.png" alt><br>试计算：包括这3种分法在内，一共有多少种不同的分割方法。注意：旋转对称的属于同一种分割法。 </p>
<p>输出<br>输出一个整数表示答案</p>
</blockquote>
<p>从中心对称点(4,4)开始向四周搜索，走到边界答案+1，<br>搜索的时候，vis是对称的，且答案需要去掉旋转和对称的，需要除4</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=<span class="number">1</span>||x&gt;=<span class="number">7</span>||y&lt;=<span class="number">1</span>||y&gt;=<span class="number">7</span>)&#123;</span><br><span class="line">		ans++;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> nx=x+dx[i]; <span class="keyword">int</span> x2=<span class="number">8</span>-nx;</span><br><span class="line">		<span class="keyword">int</span> ny=y+dy[i];	<span class="keyword">int</span> y2=<span class="number">8</span>-ny;</span><br><span class="line">		<span class="keyword">if</span>(nx&gt;=<span class="number">1</span>&amp;&amp;nx&lt;=<span class="number">7</span>&amp;&amp;ny&gt;=<span class="number">1</span>&amp;&amp;ny&lt;=<span class="number">7</span>&amp;&amp;!vis[nx][ny])&#123;</span><br><span class="line">			vis[nx][ny]=<span class="number">1</span>;</span><br><span class="line">			vis[x2][y2]=<span class="number">1</span>;</span><br><span class="line">			dfs(nx,ny);</span><br><span class="line">			vis[nx][ny]=<span class="number">0</span>;</span><br><span class="line">			vis[x2][y2]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vis[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">	dfs(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">	vis[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans/<span class="number">4</span>);</span><br><span class="line">	 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>3-14</title>
    <url>/2020/03/14/3-14/</url>
    <content><![CDATA[<p>[蓝桥杯2017初赛]青蛙跳杯子<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>X星球的流行宠物是青蛙，一般有两种颜色：白色和黑色。<br>X星球的居民喜欢把它们放在一排茶杯里，这样可以观察它们跳来跳去。<br>如下图，有一排杯子，左边的一个是空着的，右边的杯子，每个里边有一只青蛙。<br><em>WWWBBB<br>其中，W字母表示白色青蛙，B表示黑色青蛙，</em>表示空杯子。<br>X星的青蛙很有些癖好，它们只做3个动作之一</p>
<ol>
<li>跳到相邻的空杯子里。</li>
<li>隔着1只其它的青蛙（随便什么颜色）跳到空杯子里。</li>
<li>隔着2只其它的青蛙（随便什么颜色）跳到空杯子里。<br>对于上图的局面，只要1步，就可跳成该局面：WWW*BBB<br>本题的任务就是已知初始局面，询问至少需要几步，才能跳成另一个目标局面。</li>
</ol>
<p>输入<br>输入存在多组测试数据，对于每组测试数据：<br>输入为2行，2个串，表示初始局面和目标局面。输入的串的长度不超过15<br>输出<br>对于每组测试数据：输出要求为一个整数，表示至少需要多少步的青蛙跳。<br>样例输入<br><em>WWBB<br>WWBB</em><br>WWW<em>BBB<br>BBB</em>WWW</p>
<p>样例输出<br>2<br>10</p>
</blockquote>
<p>思路：<br>BFS，起始状态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> st,ed; </span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">3</span>,<span class="number">-3</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;st&gt;&gt;ed)&#123;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">queue</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; &gt; que;</span><br><span class="line">		que.push(make_pair(st,<span class="number">0</span>));</span><br><span class="line">		<span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">			<span class="built_in">string</span> tmp=que.front().first;</span><br><span class="line">			<span class="keyword">int</span> step=que.front().second;</span><br><span class="line">			que.pop();</span><br><span class="line">			<span class="keyword">if</span>(mp[tmp]==<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mp[tmp]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(tmp==ed)&#123;</span><br><span class="line">				ans=step;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> now;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tmp.size();i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(tmp[i]==<span class="string">'*'</span>)&#123;</span><br><span class="line">					now=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">int</span> nw=now+dx[i];</span><br><span class="line">				<span class="keyword">if</span>(nw&gt;=<span class="number">0</span>&amp;&amp;nw&lt;tmp.size())&#123;</span><br><span class="line">					swap(tmp[now],tmp[nw]);</span><br><span class="line">					<span class="keyword">if</span>(mp[tmp]==<span class="number">0</span>)&#123;</span><br><span class="line">						que.push(make_pair(tmp,step+<span class="number">1</span>));</span><br><span class="line">					&#125;</span><br><span class="line">					swap(tmp[now],tmp[nw]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">			que.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		mp.clear();</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2017初赛]9数算式</p>
<blockquote>
<p>题目描述<br>观察如下的算式：9213 x 85674 = 789314562<br>左边的乘数和被乘数正好用到了1~9的所有数字，每个1次。<br>而乘积恰好也是用到了1~9的所有数字，并且每个1次。<br>请你借助计算机的强大计算能力，找出满足如上要求的9数算式一共有多少个？<br>注意：</p>
<ol>
<li>总数目包含题目给出的那个示例。</li>
<li>乘数和被乘数交换后作为同一方案来看待。</li>
</ol>
<p>输出<br>输出一个整数表示答案</p>
</blockquote>
<p>思路：全排列<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">9</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(ll c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(c&gt;<span class="number">0</span>&amp;&amp;c&lt;<span class="number">999999999</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=c%<span class="number">10</span>;</span><br><span class="line">		c/=<span class="number">10</span>;</span><br><span class="line">		vis[tmp]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(vis[i]!=<span class="number">1</span>)&#123;</span><br><span class="line">			flag=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*ll ans=0;</span></span><br><span class="line"><span class="comment">	do&#123;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		ll aa,bb,cc;</span></span><br><span class="line"><span class="comment">		for(int i=1;i&lt;5;i++)&#123;</span></span><br><span class="line"><span class="comment">			aa=0;</span></span><br><span class="line"><span class="comment">			bb=0;</span></span><br><span class="line"><span class="comment">			for(int j=0;j&lt;i;j++)&#123;</span></span><br><span class="line"><span class="comment">				aa*=10;</span></span><br><span class="line"><span class="comment">				aa+=a[j];</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">			for(int k=i;k&lt;9;k++)&#123;</span></span><br><span class="line"><span class="comment">				bb*=10;</span></span><br><span class="line"><span class="comment">				bb+=a[k];</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		 cc=aa*bb;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">			memset(vis,0,sizeof(vis));</span></span><br><span class="line"><span class="comment">			if(fun(cc))&#123;</span></span><br><span class="line"><span class="comment">			//	cout&lt;&lt;aa&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">			//	cout&lt;&lt;bb&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">			//	cout&lt;&lt;cc&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">			//	cout&lt;&lt;"---------------------------"&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">				ans++;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	&#125;while(next_permutation(a,a+9));*/</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">1625</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>3-10</title>
    <url>/2020/03/10/3-10/</url>
    <content><![CDATA[<p>[蓝桥杯2017初赛]纸牌三角形<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>A,2,3,4,5,6,7,8,9 共9张纸牌排成一个正三角形（A按1计算）。要求每个边的和相等。<br>下图就是一种排法这样的排法可能会有很多。<br>   A<br>  9 6<br> 4   8<br>3 7 5 2<br>如果考虑旋转、镜像后相同的算同一种，一共有多少种不同的排法呢？<br>输出<br>输出一个整数表示答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">9</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> aa=a[<span class="number">0</span>]+a[<span class="number">1</span>]+a[<span class="number">3</span>]+a[<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">int</span> bb=a[<span class="number">0</span>]+a[<span class="number">2</span>]+a[<span class="number">4</span>]+a[<span class="number">8</span>];</span><br><span class="line">	<span class="keyword">int</span> cc=a[<span class="number">5</span>]+a[<span class="number">6</span>]+a[<span class="number">7</span>]+a[<span class="number">8</span>];</span><br><span class="line">	<span class="keyword">if</span>(aa==bb&amp;&amp;bb==cc) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">		x*=<span class="number">10</span>;</span><br><span class="line">		x+=a[i];</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> z=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//旋转</span></span><br><span class="line">	y=a[<span class="number">5</span>]*<span class="number">100000000</span>+a[<span class="number">6</span>]*<span class="number">10000000</span>+a[<span class="number">3</span>]*<span class="number">1000000</span>+a[<span class="number">7</span>]*<span class="number">100000</span>+a[<span class="number">1</span>]*<span class="number">10000</span>+a[<span class="number">8</span>]*<span class="number">1000</span>+a[<span class="number">4</span>]*<span class="number">100</span>+a[<span class="number">2</span>]*<span class="number">10</span>+a[<span class="number">0</span>];</span><br><span class="line">	</span><br><span class="line">	z=a[<span class="number">8</span>]*<span class="number">100000000</span>+a[<span class="number">4</span>]*<span class="number">10000000</span>+a[<span class="number">7</span>]*<span class="number">1000000</span>+a[<span class="number">2</span>]*<span class="number">100000</span>+a[<span class="number">6</span>]*<span class="number">10000</span>+a[<span class="number">0</span>]*<span class="number">1000</span>+a[<span class="number">1</span>]*<span class="number">100</span>+a[<span class="number">3</span>]*<span class="number">10</span>+a[<span class="number">5</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> xx=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> yy=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> zz=<span class="number">0</span>; </span><br><span class="line">	<span class="comment">//镜像</span></span><br><span class="line">	xx=a[<span class="number">0</span>]*<span class="number">100000000</span>+a[<span class="number">1</span>]*<span class="number">1000000</span>+a[<span class="number">2</span>]*<span class="number">10000000</span>+a[<span class="number">3</span>]*<span class="number">10000</span>+a[<span class="number">4</span>]*<span class="number">100000</span>+a[<span class="number">5</span>]+a[<span class="number">6</span>]*<span class="number">10</span>+a[<span class="number">7</span>]*<span class="number">100</span>+a[<span class="number">8</span>]*<span class="number">1000</span>;</span><br><span class="line">	yy=a[<span class="number">5</span>]*<span class="number">100000000</span>+a[<span class="number">6</span>]*<span class="number">1000000</span>+a[<span class="number">3</span>]*<span class="number">10000000</span>+a[<span class="number">7</span>]*<span class="number">10000</span>+a[<span class="number">1</span>]*<span class="number">100000</span>+a[<span class="number">8</span>]+a[<span class="number">4</span>]*<span class="number">10</span>+a[<span class="number">2</span>]*<span class="number">100</span>+a[<span class="number">0</span>]*<span class="number">1000</span>;</span><br><span class="line">	zz=a[<span class="number">8</span>]*<span class="number">100000000</span>+a[<span class="number">4</span>]*<span class="number">1000000</span>+a[<span class="number">7</span>]*<span class="number">10000000</span>+a[<span class="number">2</span>]*<span class="number">10000</span>+a[<span class="number">6</span>]*<span class="number">100000</span>+a[<span class="number">0</span>]+a[<span class="number">1</span>]*<span class="number">10</span>+a[<span class="number">3</span>]*<span class="number">100</span>+a[<span class="number">5</span>]*<span class="number">1000</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(mp[x]==<span class="number">0</span>&amp;&amp;mp[y]==<span class="number">0</span>&amp;&amp;mp[z]==<span class="number">0</span>&amp;&amp;mp[xx]==<span class="number">0</span>&amp;&amp;mp[yy]==<span class="number">0</span>&amp;&amp;mp[zz]==<span class="number">0</span>)&#123;</span><br><span class="line">		ans++;</span><br><span class="line">		mp[x]=<span class="number">1</span>;</span><br><span class="line">		mp[y]=<span class="number">1</span>;</span><br><span class="line">		mp[z]=<span class="number">1</span>;</span><br><span class="line">		mp[xx]=<span class="number">1</span>;</span><br><span class="line">		mp[yy]=<span class="number">1</span>;</span><br><span class="line">		mp[zz]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*	do&#123;</span></span><br><span class="line"><span class="comment">		if(fun())&#123;</span></span><br><span class="line"><span class="comment">			check();</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;while(next_permutation(a,a+9));</span></span><br><span class="line"><span class="comment">	printf("%d\n",ans);*/</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">144</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2017初赛]外星日历</p>
<blockquote>
<p>题目描述<br>某星系深处发现了文明遗迹。他们的计数也是用十进制。<br>他们的文明也有日历。日历只有天数，没有年、月的概念。<br>有趣的是，他们也使用了类似“星期”的概念，只不过他们的一个星期包含了9天，为了方便，这里分别记为: A,B,C….H,I<br>从一些资料上看到，<br>他们的23日是星期E<br>他们的190日是星期A<br>他们的343251日是星期I<br>令人兴奋的是，他们居然也预见了“世界末日”的那天，当然是一个很大很大的数字<br>651764141421415346185<br>请你计算一下，这遥远的一天是该文明的星期几？<br>输出<br>输出一个大写字母表示答案<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mod</span><span class="params">(<span class="built_in">string</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">		res=(res*<span class="number">10</span>+(a[i]-<span class="string">'0'</span>))%b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*string a;</span></span><br><span class="line"><span class="comment">	int b;</span></span><br><span class="line"><span class="comment">	cin&gt;&gt;a&gt;&gt;b;</span></span><br><span class="line"><span class="comment">	int day=(mod(a,b)+8)%9;</span></span><br><span class="line"><span class="comment">	char c=day+'A';</span></span><br><span class="line"><span class="comment">	printf("%c\n",c);*/</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">'G'</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>3-11</title>
    <url>/2020/03/12/3-11/</url>
    <content><![CDATA[<p>[蓝桥杯2017初赛]购物单<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>小明刚刚找到工作，老板人很好，只是老板夫人很爱购物。<br>老板忙的时候经常让小明帮忙到商场代为购物。小明很厌烦，但又不好推辞。<br>这不，XX大促销又来了！老板夫人开出了长长的购物单，都是有打折优惠的。<br>小明也有个怪癖，不到万不得已，从不刷卡，直接现金搞定。<br>现在小明很心烦，请你帮他计算一下，需要从取款机上取多少现金，才能搞定这次购物。<br>取款机只能提供100元面额的纸币。小明想尽可能少取些现金，够用就行了。<br>你的任务是计算出，小明最少需要取多少现金。</p>
<p>输入<br>本题无输入，购物单如下，物品名称被隐藏了。<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">****     <span class="number">180.90</span>       <span class="number">88</span>折</span><br><span class="line">****      <span class="number">10.25</span>       <span class="number">65</span>折</span><br><span class="line">****      <span class="number">56.14</span>        <span class="number">9</span>折</span><br><span class="line">****     <span class="number">104.65</span>        <span class="number">9</span>折</span><br><span class="line">****     <span class="number">100.30</span>       <span class="number">88</span>折</span><br><span class="line">****     <span class="number">297.15</span>        半价</span><br><span class="line">****      <span class="number">26.75</span>       <span class="number">65</span>折</span><br><span class="line">****     <span class="number">130.62</span>        半价</span><br><span class="line">****     <span class="number">240.28</span>       <span class="number">58</span>折</span><br><span class="line">****     <span class="number">270.62</span>        <span class="number">8</span>折</span><br><span class="line">****     <span class="number">115.87</span>       <span class="number">88</span>折</span><br><span class="line">****     <span class="number">247.34</span>       <span class="number">95</span>折</span><br><span class="line">****      <span class="number">73.21</span>        <span class="number">9</span>折</span><br><span class="line">****     <span class="number">101.00</span>        半价</span><br><span class="line">****      <span class="number">79.54</span>        半价</span><br><span class="line">****     <span class="number">278.44</span>        <span class="number">7</span>折</span><br><span class="line">****     <span class="number">199.26</span>        半价</span><br><span class="line">****      <span class="number">12.97</span>        <span class="number">9</span>折</span><br><span class="line">****     <span class="number">166.30</span>       <span class="number">78</span>折</span><br><span class="line">****     <span class="number">125.50</span>       <span class="number">58</span>折</span><br><span class="line">****      <span class="number">84.98</span>        <span class="number">9</span>折</span><br><span class="line">****     <span class="number">113.35</span>       <span class="number">68</span>折</span><br><span class="line">****     <span class="number">166.57</span>        半价</span><br><span class="line">****      <span class="number">42.56</span>        <span class="number">9</span>折</span><br><span class="line">****      <span class="number">81.90</span>       <span class="number">95</span>折</span><br><span class="line">****     <span class="number">131.78</span>        <span class="number">8</span>折</span><br><span class="line">****     <span class="number">255.89</span>       <span class="number">78</span>折</span><br><span class="line">****     <span class="number">109.17</span>        <span class="number">9</span>折</span><br><span class="line">****     <span class="number">146.69</span>       <span class="number">68</span>折</span><br><span class="line">****     <span class="number">139.33</span>       <span class="number">65</span>折</span><br><span class="line">****     <span class="number">141.16</span>       <span class="number">78</span>折</span><br><span class="line">****     <span class="number">154.74</span>        <span class="number">8</span>折</span><br><span class="line">****      <span class="number">59.42</span>        <span class="number">8</span>折</span><br><span class="line">****      <span class="number">85.44</span>       <span class="number">68</span>折</span><br><span class="line">****     <span class="number">293.70</span>       <span class="number">88</span>折</span><br><span class="line">****     <span class="number">261.79</span>       <span class="number">65</span>折</span><br><span class="line">****      <span class="number">11.30</span>       <span class="number">88</span>折</span><br><span class="line">****     <span class="number">268.27</span>       <span class="number">58</span>折</span><br><span class="line">****     <span class="number">128.29</span>       <span class="number">88</span>折</span><br><span class="line">****     <span class="number">251.03</span>        <span class="number">8</span>折</span><br><span class="line">****     <span class="number">208.39</span>       <span class="number">75</span>折</span><br><span class="line">****     <span class="number">128.88</span>       <span class="number">75</span>折</span><br><span class="line">****      <span class="number">62.06</span>        <span class="number">9</span>折</span><br><span class="line">****     <span class="number">225.87</span>       <span class="number">75</span>折</span><br><span class="line">****      <span class="number">12.89</span>       <span class="number">75</span>折</span><br><span class="line">****      <span class="number">34.28</span>       <span class="number">75</span>折</span><br><span class="line">****      <span class="number">62.16</span>       <span class="number">58</span>折</span><br><span class="line">****     <span class="number">129.12</span>        半价</span><br><span class="line">****     <span class="number">218.37</span>        半价</span><br><span class="line">****     <span class="number">289.69</span>        <span class="number">8</span>折</span><br></pre></td></tr></table></figure></p>
<p>输出<br>输出一个整数表示答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a,c;</span><br><span class="line"><span class="keyword">double</span> b;</span><br><span class="line"><span class="keyword">double</span> d; </span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="built_in">string</span> e)</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;e.size()<span class="number">-2</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">isdigit</span>(e[i]))&#123;</span><br><span class="line">			res*=<span class="number">10</span>;</span><br><span class="line">			res+=e[i]-<span class="string">'0'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(c.size()==<span class="number">4</span>&amp;&amp;!<span class="built_in">isdigit</span>(e[<span class="number">0</span>]))&#123;</span><br><span class="line">			res=<span class="number">50</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(res&gt;<span class="number">0</span>&amp;&amp;res&lt;<span class="number">10</span>) res/=<span class="number">10</span>;</span><br><span class="line">	<span class="keyword">else</span> res/=<span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*while(cin&gt;&gt;a)&#123;</span></span><br><span class="line"><span class="comment">		cin&gt;&gt;b&gt;&gt;c;</span></span><br><span class="line"><span class="comment">		d=fun(c);</span></span><br><span class="line"><span class="comment">		ans+=b*d;</span></span><br><span class="line"><span class="comment">		//cout&lt;&lt;c&lt;&lt;": "&lt;&lt;d&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">5200</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> [蓝桥杯2017初赛]贪吃蛇长度</p>
<blockquote>
<p>题目描述<br> 小明在爷爷的私人收藏馆里找到一台老式电脑。居然没有图形界面，只能用控制台编程。<br>经过小明的一阵摸索，神奇地设计出了控制台上的贪食蛇游戏。<br>如下图，是游戏时画面截图。<br><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">+-------------------------------------------------+</span><br><span class="line">|                                                 |</span><br><span class="line">|    H######                      ####            |</span><br><span class="line">|          #                      #  #            |</span><br><span class="line">|          #                      #  #            |</span><br><span class="line">|          #     ####             #  #            |</span><br><span class="line">|          #     #  #             #  #            |</span><br><span class="line">|          ######@###             #  #            |</span><br><span class="line">|                #       ####     #  #            |</span><br><span class="line">|                #       #  #     #  #            |</span><br><span class="line">|            ####@#######@###     #  #            |</span><br><span class="line">|            #   #       #        #  #            |</span><br><span class="line">| T          #####       #        #  #   ##       |</span><br><span class="line">| #                      #      ###  ### ##       |</span><br><span class="line">| ################       #      #      ####       |</span><br><span class="line">|                #       #      #         #       |</span><br><span class="line">|   ##############       #######@##########       |</span><br><span class="line">|   #                         ###                 |</span><br><span class="line">|   ###########################                   |</span><br><span class="line">+-------------------------------------------------+</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>其中，H表示蛇头，T表示蛇尾。#表示蛇的身体，@表示身体交叉重叠的地方。<br>你能说出现在的贪吃蛇长度是多少吗？<br>其实，只要数出#的数目算1，数出@的数目，算2，再加上头尾各算1就计算好了<br>人工数一下？太累眼睛了，聪明的你为什么不让计算机帮忙呢？<br>本题的要求就是： 请填写上图中贪食蛇的长度是多少？</p>
<blockquote>
<p>输出<br>输出一个整数表示答案<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*	while(cin&gt;&gt;a)&#123;</span></span><br><span class="line"><span class="comment">		for(int i=0;i&lt;a.size();i++)&#123;</span></span><br><span class="line"><span class="comment">			if(a[i]=='#'||a[i]=='T'||a[i]=='H')&#123;</span></span><br><span class="line"><span class="comment">				ans++;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">			if(a[i]=='@')&#123;</span></span><br><span class="line"><span class="comment">				ans+=2;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">190</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>3-17</title>
    <url>/2020/03/17/3-17/</url>
    <content><![CDATA[<p> [蓝桥杯2017初赛]日期问题<br> <a id="more"></a></p>
<blockquote>
<p>题目描述<br>小明正在整理一批历史文献。这些历史文献中出现了很多日期。<br>小明知道这些日期都在1960年1月1日至2059年12月31日。<br>令小明头疼的是，这些日期采用的格式非常不统一，有采用年/月/日的，有采用月/日/年的，还有采用日/月/年的。<br>更加麻烦的是，年份也都省略了前两位，使得文献上的一个日期，存在很多可能的日期与其对应。<br>比如02/03/04，可能是2002年03月04日、2004年02月03日或2004年03月02日。<br>给出一个文献上的日期，你能帮助小明判断有哪些可能的日期对其对应吗？</p>
<p>输入<br>一个日期，格式是”AA/BB/CC”。  (0 &lt;= A, B, C &lt;= 9)  </p>
<p>输出<br>输出若干个不相同的日期，每个日期一行，格式是”yyyy-MM-dd”。<br>多个日期按从早到晚排列。  </p>
<p>样例输入<br>02/03/04</p>
<p>样例输出<br>2002-03-04<br>2004-02-03<br>2004-03-02</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> yy,mm,dd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> day2[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> day[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">2200</span>][<span class="number">15</span>][<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>||(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>))&#123;</span><br><span class="line">		flag=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d/%d/%d"</span>,&amp;yy,&amp;mm,&amp;dd);</span><br><span class="line">		<span class="comment">//年/月/日</span></span><br><span class="line">		<span class="keyword">if</span>(yy&gt;=<span class="number">0</span>&amp;&amp;yy&lt;=<span class="number">59</span>&amp;&amp;mm&gt;=<span class="number">1</span>&amp;&amp;mm&lt;=<span class="number">12</span>&amp;&amp;dd&gt;=<span class="number">1</span>&amp;&amp;dd&lt;=<span class="number">31</span>)&#123;</span><br><span class="line">			ans[yy+<span class="number">2000</span>][mm][dd]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(fun(yy+<span class="number">2000</span>))&#123;</span><br><span class="line">				<span class="keyword">if</span>(dd&gt;day2[mm])&#123;</span><br><span class="line">					ans[yy+<span class="number">2000</span>][mm][dd]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(dd&gt;day[mm])&#123;</span><br><span class="line">					ans[yy+<span class="number">2000</span>][mm][dd]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(yy&lt;=<span class="number">99</span>&amp;&amp;yy&gt;=<span class="number">60</span>&amp;&amp;mm&gt;=<span class="number">1</span>&amp;&amp;mm&lt;=<span class="number">12</span>&amp;&amp;dd&gt;=<span class="number">1</span>&amp;&amp;dd&lt;=<span class="number">31</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			ans[yy+<span class="number">1900</span>][mm][dd]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(fun(yy+<span class="number">1900</span>))&#123;</span><br><span class="line">				<span class="keyword">if</span>(dd&gt;day2[mm])&#123;</span><br><span class="line">					ans[yy+<span class="number">1900</span>][mm][dd]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(dd&gt;day[mm])&#123;</span><br><span class="line">					ans[yy+<span class="number">1900</span>][mm][dd]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//月/日/年</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(yy&gt;=<span class="number">1</span>&amp;&amp;yy&lt;=<span class="number">12</span>&amp;&amp;mm&gt;=<span class="number">1</span>&amp;&amp;mm&lt;=<span class="number">31</span>&amp;&amp;dd&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">	</span><br><span class="line">			ans[dd+<span class="number">1900</span>][yy][mm]=<span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(fun(dd+<span class="number">1900</span>))&#123;</span><br><span class="line">				<span class="keyword">if</span>(mm&gt;day2[yy])&#123;</span><br><span class="line">					ans[dd+<span class="number">1900</span>][yy][mm]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(mm&gt;day[yy])&#123;</span><br><span class="line">					ans[dd+<span class="number">1900</span>][yy][mm]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(yy&gt;=<span class="number">1</span>&amp;&amp;mm&gt;=<span class="number">1</span>&amp;&amp;yy&lt;=<span class="number">12</span>&amp;&amp;mm&lt;=<span class="number">31</span>&amp;&amp;dd&lt;=<span class="number">59</span>)&#123;</span><br><span class="line">			ans[dd+<span class="number">2000</span>][yy][mm]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(fun(dd+<span class="number">2000</span>))&#123;</span><br><span class="line">				<span class="keyword">if</span>(mm&gt;day2[yy])&#123;</span><br><span class="line">					ans[dd+<span class="number">2000</span>][yy][mm]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(mm&gt;day[yy])&#123;</span><br><span class="line">					ans[dd+<span class="number">2000</span>][yy][mm]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//日/月/年</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(yy&gt;=<span class="number">1</span>&amp;&amp;yy&lt;=<span class="number">31</span>&amp;&amp;mm&gt;=<span class="number">1</span>&amp;&amp;mm&lt;=<span class="number">12</span>&amp;&amp;dd&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">		</span><br><span class="line">			ans[dd+<span class="number">1900</span>][mm][yy]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(fun(dd+<span class="number">1900</span>))&#123;</span><br><span class="line">				<span class="keyword">if</span>(yy&gt;day2[mm])&#123;</span><br><span class="line">				ans[dd+<span class="number">1900</span>][mm][yy]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(yy&gt;day[mm])&#123;</span><br><span class="line">				ans[dd+<span class="number">1900</span>][mm][yy]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(yy&gt;=<span class="number">1</span>&amp;&amp;yy&lt;=<span class="number">31</span>&amp;&amp;mm&gt;=<span class="number">1</span>&amp;&amp;mm&lt;=<span class="number">12</span>&amp;&amp;dd&lt;=<span class="number">59</span>)&#123;</span><br><span class="line">		</span><br><span class="line">			ans[dd+<span class="number">2000</span>][mm][yy]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(fun(dd+<span class="number">2000</span>))&#123;</span><br><span class="line">				<span class="keyword">if</span>(yy&gt;day2[mm])&#123;</span><br><span class="line">					ans[dd+<span class="number">2000</span>][mm][yy]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(yy&gt;day[mm])&#123;</span><br><span class="line">					ans[dd+<span class="number">2000</span>][mm][yy]=<span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1960</span>;i&lt;=<span class="number">2059</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">12</span>;j++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">31</span>;k++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(ans[i][j][k]==<span class="number">1</span>)&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">"%d-%02d-%02d\n"</span>,i,j,k);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2017初赛]九宫幻方</p>
<blockquote>
<p>题目描述<br>小明最近在教邻居家的小朋友小学奥数，而最近正好讲述到了三阶幻方这个部分。<br>三阶幻方指的是将1~9不重复的填入一个3*3的矩阵当中，使得每一行、每一列和每一条对角线的和都是相同的。<br>三阶幻方又被称作九宫格，在小学奥数里有一句非常有名的口诀：<br>“二四为肩，六八为足，左三右七，戴九履一，五居其中”，<br>通过这样的一句口诀就能够非常完美的构造出一个九宫格来。<br>4 9 2<br>3 5 7<br>8 1 6<br>有意思的是，所有的三阶幻方，都可以通过这样一个九宫格进行若干镜像和旋转操作之后得到。<br>现在小明准备将一个三阶幻方（不一定是上图中的那个）中的一些数抹掉，交给邻居家的小朋友来进行还原，并且希望她能够判断出究竟是不是只有一个解。<br>而你呢，也被小明交付了同样的任务，但是不同的是，你需要写一个程序~</p>
<p>输入<br>输入一个3*3的矩阵，其中为0的部分表示被小明抹去的部分。<br>对于100%的数据，满足给出的矩阵至少能还原出一组可行的三阶幻方。</p>
<p>输出<br>如果仅能还原出一组可行的三阶幻方，则将其输出，否则输出“Too Many”（不包含引号）。 </p>
<p>样例输入<br>0 7 2<br>0 5 0<br>0 3 0</p>
<p>样例输出<br>6 7 2<br>1 5 9<br>8 3 4</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> row1,row2,row3;</span><br><span class="line">		<span class="keyword">int</span> col1,col2,col3;</span><br><span class="line">		<span class="keyword">int</span> k1,k2;</span><br><span class="line">		row1=a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>];  row2=a[<span class="number">4</span>]+a[<span class="number">5</span>]+a[<span class="number">6</span>]; row3=a[<span class="number">7</span>]+a[<span class="number">8</span>]+a[<span class="number">9</span>];</span><br><span class="line">		col1=a[<span class="number">1</span>]+a[<span class="number">4</span>]+a[<span class="number">7</span>];  col2=a[<span class="number">2</span>]+a[<span class="number">5</span>]+a[<span class="number">8</span>]; col3=a[<span class="number">3</span>]+a[<span class="number">6</span>]+a[<span class="number">9</span>];</span><br><span class="line">		k1=a[<span class="number">1</span>]+a[<span class="number">5</span>]+a[<span class="number">9</span>]; k2=a[<span class="number">3</span>]+a[<span class="number">5</span>]+a[<span class="number">7</span>];</span><br><span class="line">		<span class="keyword">if</span>(row1==<span class="number">15</span>&amp;&amp;row2==<span class="number">15</span>&amp;&amp;row3==<span class="number">15</span>&amp;&amp;col1==<span class="number">15</span>&amp;&amp;col2==<span class="number">15</span>&amp;&amp;col3==<span class="number">15</span>&amp;&amp;k1==<span class="number">15</span>&amp;&amp;k2==<span class="number">15</span>)&#123;</span><br><span class="line">			<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(b[i]!=<span class="number">0</span>&amp;&amp;b[i]!=a[i])&#123;</span><br><span class="line">					flag=<span class="number">0</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">				ans++;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">					c[i]=a[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">while</span>(next_permutation(a+<span class="number">1</span>,a+<span class="number">10</span>));</span><br><span class="line">	<span class="keyword">if</span>(ans==<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,c[i]);</span><br><span class="line">			<span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Too Many\n"</span>);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> [蓝桥杯2017初赛]等差素数列</p>
<blockquote>
<p>题目描述<br>2,3,5,7,11,13,….是素数序列。<br>类似：7,37,67,97,127,157 这样全由素数组成的等差数列，叫等差素数数列。<br>上边的数列公差为30，长度为6。<br>2004年，格林与华人陶哲轩合作证明了：存在任意长度的素数等差数列。<br>这是数论领域一项惊人的成果！<br>有这一理论为基础，请你借助手中的计算机，满怀信心地搜索：<br>长度为10的等差素数列，其公差最小值是多少？</p>
<p>输出<br>输出一个整数表示答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">1000000</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[MAX_N];</span><br><span class="line"><span class="keyword">int</span> prime[MAX_N];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prime[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*prime[j]&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i*prime[j]]=i;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">210</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">/*Prime();</span></span><br><span class="line"><span class="comment">	int res=1;</span></span><br><span class="line"><span class="comment">	for(int i=0;i&lt;1000&amp;&amp;res&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">		int temp=prime[i];</span></span><br><span class="line"><span class="comment">		for(int j=1;j&lt;=1000&amp;&amp;res&lt;10;j++)&#123;</span></span><br><span class="line"><span class="comment">			 res=1;</span></span><br><span class="line"><span class="comment">			int tmp=temp+j;</span></span><br><span class="line"><span class="comment">			while(!vis[tmp])&#123;</span></span><br><span class="line"><span class="comment">				res++;</span></span><br><span class="line"><span class="comment">				tmp=tmp+j;</span></span><br><span class="line"><span class="comment">				//cout&lt;&lt;tmp&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">				if(res&gt;=10)&#123;</span></span><br><span class="line"><span class="comment">					printf("%d %d",temp,j);</span></span><br><span class="line"><span class="comment">					break;</span></span><br><span class="line"><span class="comment">				&#125;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2018初赛]乘积尾零</p>
<blockquote>
<p>题目描述<br>如下的10行数据，每行有10个整数，请你求出它们的乘积的末尾有多少个零？<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">5650</span> <span class="number">4542</span> <span class="number">3554</span> <span class="number">473</span> <span class="number">946</span> <span class="number">4114</span> <span class="number">3871</span> <span class="number">9073</span> <span class="number">90</span> <span class="number">4329</span> </span><br><span class="line"><span class="number">2758</span> <span class="number">7949</span> <span class="number">6113</span> <span class="number">5659</span> <span class="number">5245</span> <span class="number">7432</span> <span class="number">3051</span> <span class="number">4434</span> <span class="number">6704</span> <span class="number">3594</span> </span><br><span class="line"><span class="number">9937</span> <span class="number">1173</span> <span class="number">6866</span> <span class="number">3397</span> <span class="number">4759</span> <span class="number">7557</span> <span class="number">3070</span> <span class="number">2287</span> <span class="number">1453</span> <span class="number">9899</span> </span><br><span class="line"><span class="number">1486</span> <span class="number">5722</span> <span class="number">3135</span> <span class="number">1170</span> <span class="number">4014</span> <span class="number">5510</span> <span class="number">5120</span> <span class="number">729</span> <span class="number">2880</span> <span class="number">9019</span> </span><br><span class="line"><span class="number">2049</span> <span class="number">698</span> <span class="number">4582</span> <span class="number">4346</span> <span class="number">4427</span> <span class="number">646</span> <span class="number">9742</span> <span class="number">7340</span> <span class="number">1230</span> <span class="number">7683</span> </span><br><span class="line"><span class="number">5693</span> <span class="number">7015</span> <span class="number">6887</span> <span class="number">7381</span> <span class="number">4172</span> <span class="number">4341</span> <span class="number">2909</span> <span class="number">2027</span> <span class="number">7355</span> <span class="number">5649</span> </span><br><span class="line"><span class="number">6701</span> <span class="number">6645</span> <span class="number">1671</span> <span class="number">5978</span> <span class="number">2704</span> <span class="number">9926</span> <span class="number">295</span> <span class="number">3125</span> <span class="number">3878</span> <span class="number">6785</span> </span><br><span class="line"><span class="number">2066</span> <span class="number">4247</span> <span class="number">4800</span> <span class="number">1578</span> <span class="number">6652</span> <span class="number">4616</span> <span class="number">1113</span> <span class="number">6205</span> <span class="number">3264</span> <span class="number">2915</span> </span><br><span class="line"><span class="number">3966</span> <span class="number">5291</span> <span class="number">2904</span> <span class="number">1285</span> <span class="number">2193</span> <span class="number">1428</span> <span class="number">2265</span> <span class="number">8730</span> <span class="number">9436</span> <span class="number">7074</span> </span><br><span class="line"><span class="number">689</span> <span class="number">5510</span> <span class="number">8243</span> <span class="number">6114</span> <span class="number">337</span> <span class="number">4096</span> <span class="number">8199</span> <span class="number">7313</span> <span class="number">3685</span> <span class="number">211</span></span><br></pre></td></tr></table></figure></p>
<p>输出<br>输出一个整数表示答案</p>
</blockquote>
<p>思路：0会由2和5共同构成，将每个数拆分成由2 和 5 组成的数，统计2 和5 的个数，然后取2 和 5 个数的最小值即为尾零的个数，实际上5的个数会比2的个数小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*int two=0,five=0;</span></span><br><span class="line"><span class="comment">	for(int i=1;i&lt;=100;i++)&#123;</span></span><br><span class="line"><span class="comment">		scanf("%d",&amp;a);</span></span><br><span class="line"><span class="comment">		while(a%2==0||a%5==0)&#123;</span></span><br><span class="line"><span class="comment">			if(a%2==0) two++,a/=2;</span></span><br><span class="line"><span class="comment">			if(a%5==0) five++,a/=5;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	int ans=min(two,five);</span></span><br><span class="line"><span class="comment">	cout&lt;&lt;ans&lt;&lt;endl;*/</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">31</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>3-16</title>
    <url>/2020/03/17/3-16/</url>
    <content><![CDATA[<p>[蓝桥杯2017初赛]分巧克力<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>儿童节那天有K位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。<br>小明一共有N块巧克力，其中第i块是Hi x Wi的方格组成的长方形。<br>为了公平起见，小明需要从这 N 块巧克力中切出K块巧克力分给小朋友们。切出的巧克力需要满足：</p>
<ol>
<li>形状是正方形，边长是整数  </li>
<li>大小相同<br>例如一块6x5的巧克力可以切出6块2x2的巧克力或者2块3x3的巧克力。<br>当然小朋友们都希望得到的巧克力尽可能大，你能帮小Hi计算出最大的边长是多少么？</li>
</ol>
<p>输入<br>第一行包含两个整数N和K。(1 &lt;= N, K &lt;= 100000)<br>以下N行每行包含两个整数Hi和Wi。(1 &lt;= Hi, Wi &lt;= 100000)<br>输入保证每位小朋友至少能获得一块1x1的巧克力。  </p>
<p>输出<br>输出切出的正方形巧克力最大可能的边长。</p>
<p>样例输入<br>2 10<br>6 5<br>5 6</p>
<p>样例输出<br>2</p>
</blockquote>
<p>思路：通过二分枚举出最大可能的边长.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> H[MAX_N],W[MAX_N]; </span><br><span class="line"><span class="keyword">int</span> N,K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		cnt+=((H[i]/m)*(W[i]/m));</span><br><span class="line">		<span class="keyword">if</span>(cnt&gt;=K)&#123;</span><br><span class="line">			flag=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;H[i],&amp;W[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">100000</span>;</span><br><span class="line">	<span class="keyword">while</span>(r&gt;l)&#123;</span><br><span class="line">		<span class="keyword">int</span> m=l+(r-l)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(check(m)) l=m+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> r=m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> [蓝桥杯2017初赛]承压计算</p>
<blockquote>
<p>题目描述<br> X星球的高科技实验室中整齐地堆放着某批珍贵金属原料。<br>每块金属原料的外形、尺寸完全一致，但重量不同。<br>金属材料被严格地堆放成金字塔形。<br>其中的数字代表金属块的重量（计量单位较大）。（参考输入中的金字塔）<br>最下一层的X代表30台极高精度的电子秤。<br>假设每块原料的重量都十分精确地平均落在下方的两个金属块上，<br>最后，所有的金属块的重量都严格精确地平分落在最底层的电子秤上。<br>电子秤的计量单位很小，所以显示的数字很大。<br>工作人员发现，其中读数最小的电子秤的示数为：2086458231<br>请你推算出：读数最大的电子秤的示数为多少？</p>
<p>输入<br>本题无输入<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">                             <span class="number">7</span> </span><br><span class="line">                            <span class="number">5</span> <span class="number">8</span> </span><br><span class="line">                           <span class="number">7</span> <span class="number">8</span> <span class="number">8</span> </span><br><span class="line">                          <span class="number">9</span> <span class="number">2</span> <span class="number">7</span> <span class="number">2</span> </span><br><span class="line">                         <span class="number">8</span> <span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">1</span> </span><br><span class="line">                        <span class="number">8</span> <span class="number">1</span> <span class="number">8</span> <span class="number">8</span> <span class="number">4</span> <span class="number">1</span> </span><br><span class="line">                       <span class="number">7</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> </span><br><span class="line">                      <span class="number">5</span> <span class="number">6</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">9</span> <span class="number">5</span> <span class="number">6</span> </span><br><span class="line">                     <span class="number">5</span> <span class="number">5</span> <span class="number">4</span> <span class="number">7</span> <span class="number">9</span> <span class="number">3</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line">                    <span class="number">7</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">7</span> <span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> </span><br><span class="line">                   <span class="number">4</span> <span class="number">6</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">8</span> <span class="number">8</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> </span><br><span class="line">                  <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">6</span> <span class="number">5</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line">                 <span class="number">9</span> <span class="number">9</span> <span class="number">9</span> <span class="number">2</span> <span class="number">1</span> <span class="number">9</span> <span class="number">1</span> <span class="number">9</span> <span class="number">2</span> <span class="number">9</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> </span><br><span class="line">                <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">7</span> <span class="number">7</span> <span class="number">9</span> <span class="number">3</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">8</span> <span class="number">8</span> <span class="number">3</span> <span class="number">7</span> </span><br><span class="line">               <span class="number">3</span> <span class="number">6</span> <span class="number">8</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">9</span> <span class="number">5</span> <span class="number">8</span> <span class="number">3</span> <span class="number">8</span> <span class="number">1</span> <span class="number">8</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line">              <span class="number">8</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">5</span> <span class="number">5</span> <span class="number">8</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">6</span> <span class="number">7</span> <span class="number">6</span> <span class="number">9</span> </span><br><span class="line">             <span class="number">8</span> <span class="number">1</span> <span class="number">8</span> <span class="number">1</span> <span class="number">8</span> <span class="number">4</span> <span class="number">6</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">7</span> <span class="number">9</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line">            <span class="number">2</span> <span class="number">8</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">9</span> <span class="number">9</span> <span class="number">2</span> <span class="number">8</span> <span class="number">3</span> <span class="number">4</span> <span class="number">9</span> <span class="number">6</span> <span class="number">3</span> <span class="number">9</span> <span class="number">4</span> <span class="number">6</span> <span class="number">9</span> </span><br><span class="line">           <span class="number">7</span> <span class="number">9</span> <span class="number">7</span> <span class="number">4</span> <span class="number">9</span> <span class="number">7</span> <span class="number">6</span> <span class="number">6</span> <span class="number">2</span> <span class="number">8</span> <span class="number">9</span> <span class="number">4</span> <span class="number">1</span> <span class="number">8</span> <span class="number">1</span> <span class="number">7</span> <span class="number">2</span> <span class="number">1</span> <span class="number">6</span> </span><br><span class="line">          <span class="number">9</span> <span class="number">2</span> <span class="number">8</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">7</span> <span class="number">9</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">7</span> <span class="number">3</span> <span class="number">9</span> <span class="number">8</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line">         <span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">3</span> <span class="number">2</span> <span class="number">8</span> <span class="number">9</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span> <span class="number">2</span> <span class="number">1</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span> </span><br><span class="line">        <span class="number">6</span> <span class="number">7</span> <span class="number">1</span> <span class="number">8</span> <span class="number">8</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> </span><br><span class="line">       <span class="number">2</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">9</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">6</span> <span class="number">6</span> <span class="number">3</span> <span class="number">2</span> <span class="number">7</span> <span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">5</span> <span class="number">5</span> <span class="number">4</span> </span><br><span class="line">      <span class="number">7</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">8</span> <span class="number">3</span> <span class="number">3</span> <span class="number">8</span> <span class="number">1</span> <span class="number">8</span> <span class="number">6</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">6</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span> <span class="number">6</span> </span><br><span class="line">     <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">9</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span> <span class="number">6</span> <span class="number">5</span> <span class="number">9</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">6</span> <span class="number">8</span> <span class="number">8</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line">    <span class="number">2</span> <span class="number">2</span> <span class="number">7</span> <span class="number">9</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">8</span> <span class="number">6</span> <span class="number">9</span> <span class="number">8</span> <span class="number">4</span> <span class="number">4</span> <span class="number">9</span> <span class="number">5</span> <span class="number">8</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">4</span> <span class="number">8</span> <span class="number">4</span> <span class="number">9</span> <span class="number">3</span> <span class="number">8</span> <span class="number">8</span> </span><br><span class="line">   <span class="number">7</span> <span class="number">7</span> <span class="number">7</span> <span class="number">9</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">7</span> <span class="number">9</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">9</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">9</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">9</span> </span><br><span class="line">  <span class="number">7</span> <span class="number">7</span> <span class="number">6</span> <span class="number">6</span> <span class="number">8</span> <span class="number">7</span> <span class="number">5</span> <span class="number">5</span> <span class="number">8</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">7</span> <span class="number">4</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">9</span> <span class="number">2</span> <span class="number">1</span> <span class="number">8</span> <span class="number">2</span> <span class="number">9</span> <span class="number">8</span> <span class="number">5</span> <span class="number">7</span> <span class="number">3</span> <span class="number">6</span> </span><br><span class="line"> <span class="number">5</span> <span class="number">9</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">7</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">9</span> <span class="number">5</span> <span class="number">8</span> <span class="number">9</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> </span><br><span class="line">X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X</span><br><span class="line"></span><br><span class="line">```              </span><br><span class="line"></span><br><span class="line">&gt;输出</span><br><span class="line">输出一个整数表示答案</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">double a[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line">    <span class="comment">/*for(int i=1;i&lt;=29;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=i;j++)&#123;</span></span><br><span class="line"><span class="comment">            scanf("%lf",&amp;a[i][j]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=29;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=i;j++)&#123;</span></span><br><span class="line"><span class="comment">            double half=a[i][j]/2.0;</span></span><br><span class="line"><span class="comment">            a[i+1][j]+=half;</span></span><br><span class="line"><span class="comment">            a[i+1][j+1]+=half;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    double ma=0;</span></span><br><span class="line"><span class="comment">    double mi=0x3f3f3f3f;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=30;i++)&#123;</span></span><br><span class="line"><span class="comment">    	ma=max(ma,a[30][i]);</span></span><br><span class="line"><span class="comment">    	mi=min(mi,a[30][i]);</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	ll ans=(2086458231/mi)*ma;</span></span><br><span class="line"><span class="comment">    printf("%lld",ans);*/</span></span><br><span class="line">    cout&lt;&lt;<span class="number">72665192664</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>3-13</title>
    <url>/2020/03/13/3-13/</url>
    <content><![CDATA[<p> [蓝桥杯2017初赛]正则问题<br> <a id="more"></a></p>
<blockquote>
<p>题目描述<br> 考虑一种简单的正则表达式：只由 x ( ) | 组成的正则表达式。<br>小明想求出这个正则表达式能接受的最长字符串的长度。<br>例如 ((xx|xxx)x|(x|xx))xx 能接受的最长字符串是： xxxxxx，长度是6</p>
<p>输入<br>输入一个由x()|组成的正则表达式。输入长度不超过100，保证合法。</p>
<p>输出<br>输出这个正则表达式能接受的最长字符串的长度。  </p>
<p>样例输入<br>((xx|xxx)x|(x|xx))xx<br>样例输出<br>6</p>
</blockquote>
<p>参考:<a href="https://blog.csdn.net/qq_43328587/article/details/104427256" target="_blank" rel="noopener">https://blog.csdn.net/qq_43328587/article/details/104427256</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> low=<span class="number">0</span>,le=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;i&lt;a.size();)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">'('</span>)&#123;</span><br><span class="line">			i++;</span><br><span class="line">			low=low+dfs();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'x'</span>)&#123;</span><br><span class="line">			i++;</span><br><span class="line">			low++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'|'</span>)&#123;</span><br><span class="line">			i++;</span><br><span class="line">			le=max(le,low);</span><br><span class="line">			low=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			i++;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> max(low,le);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	 <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">	 ans=dfs();</span><br><span class="line">	 <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2017初赛]包子凑数</p>
<blockquote>
<p>题目描述<br>小明几乎每天早晨都会在一家包子铺吃早餐。这家包子铺有N种蒸笼，其中第i种蒸笼恰好能放Ai个包子<br>每种蒸笼都有非常多笼，可以认为是无限笼。<br>每当有顾客想买X个包子，卖包子的大叔就会选出若干笼包子来，使得这若干笼中恰好一共有X个包子。<br>比如一共有3种蒸笼，分别能放3、4和5个包子。当顾客想买11个包子时，大叔就会选2笼3个的再加1笼5个的（也可能选出1笼3个的再加2笼4个的）。<br>当然有时包子大叔无论如何也凑不出顾客想买的数量。<br>比如一共有3种蒸笼，分别能放4、5和6个包子。而顾客想买7个包子时，大叔就凑不出来了。<br>小明想知道一共有多少种数目是包子大叔凑不出来的。</p>
<p>输入<br>第一行包含一个整数N。(1 &lt;= N &lt;= 100)<br>以下N行每行包含一个整数Ai。(1 &lt;= Ai &lt;= 100)  </p>
<p>输出<br>输出一行包含一个整数代表答案。如果凑不出的数目有无限多个，输出INF。</p>
<p>样例输入<br>2<br>4<br>5<br>样例输出<br>6</p>
</blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_44577309/article/details/104376648" target="_blank" rel="noopener">https://blog.csdn.net/qq_44577309/article/details/104376648</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">105</span>],dp[<span class="number">10005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> gcd=a[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		gcd=__gcd(gcd,a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(gcd!=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"INF"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j+a[i]&lt;=<span class="number">10000</span>;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(dp[j])&#123;</span><br><span class="line">					dp[j+a[i]]=<span class="number">1</span>;	</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(dp[i]==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="comment">//cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">				ans++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>3-18</title>
    <url>/2020/03/18/3-18/</url>
    <content><![CDATA[<p>[蓝桥杯2018初赛]第几个幸运数<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>到x星球旅行的游客都被发给一个整数，作为游客编号。<br>x星的国王有个怪癖，他只喜欢数字3,5和7。<br>国王规定，游客的编号如果只含有因子：3,5,7,就可以获得一份奖品。<br>前10个幸运数字是：3 5 7 9 15 21 25 27 35 45，因而第11个幸运数字是：49<br>小明领到了一个幸运数字 59084709587505。<br>去领奖的时候，人家要求他准确说出这是第几个幸运数字，否则领不到奖品。<br>请你帮小明计算一下，59084709587505是第几个幸运数字。</p>
<p>输出<br>输出一个整数表示答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">priority_queue&lt;ll,<span class="built_in">vector</span>&lt;ll&gt;,greater&lt;ll&gt; &gt; pq;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	pq.push(<span class="number">1</span>);</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		ll x=pq.top();</span><br><span class="line">		pq.pop();</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">59084709587505</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">			ll temp=x*a[i];</span><br><span class="line">			<span class="keyword">if</span>(mp[temp]==<span class="number">0</span>)&#123;</span><br><span class="line">				mp[temp]=<span class="number">1</span>;</span><br><span class="line">				pq.push(temp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2018初赛]哪天返回</p>
<blockquote>
<p>题目描述<br>小明被不明势力劫持。后莫名其妙被扔到x星站再无问津。<br>小明得知每天都有飞船飞往地球，但需要108元的船票，而他却身无分文。<br>他决定在x星战打工。好心的老板答应包食宿，第1天给他1元钱。<br>并且，以后的每一天都比前一天多2元钱，直到他有足够的钱买票。<br>请计算一下，小明在第几天就能凑够108元，返回地球。</p>
<p>输出<br>输出一个整数表示答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	a=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;tot&lt;<span class="number">108</span>;i++)&#123;</span><br><span class="line">		tot+=a;</span><br><span class="line">		a+=<span class="number">2</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;i<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>3.7</title>
    <url>/2020/03/07/3-7/</url>
    <content><![CDATA[<p>[蓝桥杯2016初赛]煤球数目<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>有一堆煤球，堆成三角棱锥形。具体：<br>第一层放1个，<br>第二层3个（排列成三角形），<br>第三层6个（排列成三角形），<br>第四层10个（排列成三角形），<br>….<br>如果一共有100层，共有多少个煤球？</p>
<p>输出<br>请填表示煤球总数目的数字。</p>
<p>样例输出</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">171700</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2016初赛]冰雹数</p>
<blockquote>
<p>题目描述<br>任意给定一个正整数N，如果是偶数，执行： N / 2；如果是奇数，执行： N * 3 + 1<br>生成的新的数字再执行同样的动作，循环往复。<br>通过观察发现，这个数字会一会儿上升到很高，一会儿又降落下来。<br>就这样起起落落的，但最终必会落到“1”<br>这有点像小冰雹粒子在冰雹云中翻滚增长的样子。<br>比如N=9：9,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1<br>可以看到，N=9的时候，这个“小冰雹”最高冲到了52这个高度。<br>输入<br>输入存在多组测试数据，对于每组测试数据输入一行包含一个正整数N(N&lt;1000000)<br>输出<br>对于每组测试数据，输出一行包含一个正整数表示答案<br>(答案是指从1到N，小冰雹能冲到的最高高度)</p>
<p>样例输入<br>10<br>100</p>
<p>样例输出<br>52<br>9232</p>
</blockquote>
<p>思路:直接暴力会超时，从1到n会发现偶数会重复操作，去掉重复操作，直接算奇数的即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">		ll ans=n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">			ll j=i;</span><br><span class="line">			<span class="keyword">while</span>(j&gt;=i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(j&amp;<span class="number">1</span>==<span class="number">1</span>) j=j*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> j/=<span class="number">2</span>;</span><br><span class="line">				ans=max(ans,j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2016初赛]平方怪圈</p>
<blockquote>
<p>题目描述<br>如果把一个正整数的每一位都平方后再求和，得到一个新的正整数。对新产生的正整数再做同样的处理。<br>如此一来，你会发现，不管开始取的是什么数字，最终如果不是落入1，就是落入同一个循环圈。<br>请写出这个循环圈中最大的那个数字。<br>输出<br>输出答案即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(a)&#123;</span><br><span class="line">		<span class="keyword">int</span> temp=a%<span class="number">10</span>;</span><br><span class="line">		res+=temp*temp;</span><br><span class="line">		a/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*scanf("%d",&amp;n);</span></span><br><span class="line"><span class="comment">	int ans=0;</span></span><br><span class="line"><span class="comment">	int new_n; </span></span><br><span class="line"><span class="comment">	for(int i=1;i&lt;=100;i++)&#123;</span></span><br><span class="line"><span class="comment">		new_n=fun(n);</span></span><br><span class="line"><span class="comment">		n=new_n;</span></span><br><span class="line"><span class="comment">		ans=max(ans,n);</span></span><br><span class="line"><span class="comment">		cout&lt;&lt;n&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	printf("%d\n",ans);*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"145"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2016初赛]报纸页数</p>
<blockquote>
<p>题目描述<br>X星球日报和我们地球的城市早报是一样的，都是一些单独的纸张叠在一起而已。每张纸印有4版。<br>比如，某张报纸包含的4页是：5,6,11,12，可以确定它应该是最上边的第2张报纸。<br>我们在太空中捡到了一张X星球的报纸，4个页码分别是：1125,1126,1727,1728<br>请你计算这份报纸一共多少页（也就是最大页码,并不是用了几张纸哦）？<br>输出<br>输出答案即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">1124</span>+<span class="number">1728</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2016初赛]交换瓶子<br><!---more---></p>
<blockquote>
<p>题目描述<br>有N个瓶子，编号 1 ~ N，放在架子上。<br>比如有5个瓶子：2 1 3 5 4，要求每次拿起2个瓶子，交换它们的位置。<br>经过若干次后，使得瓶子的序号为：1 2 3 4 5<br>对于这么简单的情况，显然，至少需要交换2次就可以复位。<br>如果瓶子更多呢？你可以通过编程来解决。<br>输入<br>输入存在多组测试数据，对于每组测试数据：<br>第一行: 一个正整数N（N&lt;10000）, 表示瓶子的数目<br>第二行：N个正整数，用空格分开，表示瓶子目前的排列情况。</p>
<p>输出<br>对于每组测试数据输出一行，包含一个正整数表示答案</p>
<p>样例输入<br>5<br>3 1 2 5 4<br>5<br>5 4 3 2 1</p>
<p>样例输出<br>3<br>2</p>
</blockquote>
<p>思路：扫一遍数组，将a[i]上的值和本应该在i位置上的数对调即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> pos[MAX_N];</span><br><span class="line"><span class="keyword">int</span> a[MAX_N]; </span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N)!=EOF)&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">			pos[a[i]]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]==i) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">int</span> id1=a[i];  </span><br><span class="line">			<span class="keyword">int</span> pos1=pos[id1];	 </span><br><span class="line">			<span class="keyword">int</span> pos2=pos[i];</span><br><span class="line">			<span class="keyword">int</span> id2=a[pos2];</span><br><span class="line">			ans++;</span><br><span class="line">			swap(a[i],a[pos2]);</span><br><span class="line">			swap(pos[id1],pos[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2016初赛]凑算式</p>
<blockquote>
<p>题目描述<br>凑算式：<br>A+ B/C + DEF/GHI =10<br>这个算式中A~I代表1~9的数字，不同的字母代表不同的数字。<br>比如：<br>6+8/3+952/714 就是一种解法，5+3/1+972/486 是另一种解法。<br>这个算式一共有多少种解法？<br>输出<br>输出答案即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">          <span class="comment">//a,b,c,d,e,f,g,h,i</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">9</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*do&#123;</span></span><br><span class="line"><span class="comment">    //  A C GHI +B GHI+C DEF=10*C GHI;</span></span><br><span class="line"><span class="comment">        int A=a[0]*a[2]*(a[6]*100+a[7]*10+a[8]);</span></span><br><span class="line"><span class="comment">        int B=a[1]*(a[6]*100+a[7]*10+a[8]);</span></span><br><span class="line"><span class="comment">        int C=a[2]*(a[3]*100+a[4]*10+a[5]);</span></span><br><span class="line"><span class="comment">        int D=10*(a[6]*100+a[7]*10+a[8])*a[2];</span></span><br><span class="line"><span class="comment">        if(A+B+C==D)&#123;</span></span><br><span class="line"><span class="comment">            ans++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;while(next_permutation(a,a+9));*/</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">29</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>3.9</title>
    <url>/2020/03/09/3-9/</url>
    <content><![CDATA[<p>[蓝桥杯2017初赛]迷宫<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>X星球的一处迷宫游乐场建在某个小山坡上。它是由10x10相互连通的小房间组成的。<br>房间的地板上写着一个很大的字母。我们假设玩家是面朝上坡的方向站立，则：<br>L表示走到左边的房间，R表示走到右边的房间，U表示走到上坡方向的房间，D表示走到下坡方向的房间。<br>X星球的居民有点懒，不愿意费力思考。他们更喜欢玩运气类的游戏。这个游戏也是如此！<br>开始的时候，直升机把100名玩家放入一个个小房间内。玩家一定要按照地上的字母移动。</p>
<h2 id="迷宫地图如下："><a href="#迷宫地图如下：" class="headerlink" title="迷宫地图如下："></a>迷宫地图如下：</h2><p>UDDLUULRUL<br>UURLLLRRRU<br>RRUURLDLRD<br>RUDDDDUUUU<br>URUDLLRRUU<br>DURLRLDLRL<br>ULLURLLRDU<br>RDLULLRDDD<br>UUDDUDUDLL</p>
<h2 id="ULRDLUURRR"><a href="#ULRDLUURRR" class="headerlink" title="ULRDLUURRR"></a>ULRDLUURRR</h2><p>请你计算一下，最后，有多少玩家会走出迷宫? 而不是在里边兜圈子。<br>输出<br>输出一个整数表示答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mat[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;<span class="number">1</span>||x&gt;<span class="number">10</span>||y&lt;<span class="number">1</span>||y&gt;<span class="number">10</span>)&#123;</span><br><span class="line">		ans++;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">char</span> ch=mat[x][y];</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">'U'</span>&amp;&amp;!vis[x<span class="number">-1</span>][y])&#123;</span><br><span class="line">		vis[x<span class="number">-1</span>][y]=<span class="number">1</span>;</span><br><span class="line">		dfs(x<span class="number">-1</span>,y);</span><br><span class="line">		vis[x<span class="number">-1</span>][y]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">'D'</span>&amp;&amp;!vis[x+<span class="number">1</span>][y])&#123;</span><br><span class="line">		vis[x+<span class="number">1</span>][y]=<span class="number">1</span>;</span><br><span class="line">		dfs(x+<span class="number">1</span>,y);</span><br><span class="line">		vis[x+<span class="number">1</span>][y]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">'R'</span>&amp;&amp;!vis[x][y+<span class="number">1</span>])&#123;</span><br><span class="line">		vis[x][y+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		dfs(x,y+<span class="number">1</span>);</span><br><span class="line">		vis[x][y+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ch==<span class="string">'L'</span>&amp;&amp;!vis[x][y<span class="number">-1</span>])&#123;</span><br><span class="line">		vis[x][y<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">		dfs(x,y<span class="number">-1</span>);</span><br><span class="line">		vis[x][y<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*char s;</span></span><br><span class="line"><span class="comment">	for(int i=1;i&lt;=10;i++)&#123;</span></span><br><span class="line"><span class="comment">		for(int j=1;j&lt;=10;j++)&#123;</span></span><br><span class="line"><span class="comment">			scanf(" %c",&amp;s);</span></span><br><span class="line"><span class="comment">			mat[i][j]=s;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	for(int i=1;i&lt;=10;i++)&#123;</span></span><br><span class="line"><span class="comment">		for(int j=1;j&lt;=10;j++)&#123;</span></span><br><span class="line"><span class="comment">			vis[i][j]=1;</span></span><br><span class="line"><span class="comment">			dfs(i,j);</span></span><br><span class="line"><span class="comment">			vis[i][j]=0;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	printf("%d\n",ans);*/</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">31</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2018初赛]分数</p>
<blockquote>
<p>题目描述<br>1/1 + 1/2 + 1/4 + 1/8 + 1/16 + ….<br>每项是前一项的一半，如果一共有20项,求这个和是多少，结果用分数表示出来。<br>类似：3/2当然，这只是加了前2项而已。分子分母要求互质。</p>
<p>输出<br>按格式输出答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	ll a=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">19</span>;i++)&#123;</span><br><span class="line">		a+=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">	&#125;</span><br><span class="line">	ll b=<span class="number">1</span>&lt;&lt;<span class="number">19</span>;</span><br><span class="line">	ll c=__gcd(a,b);</span><br><span class="line">	a/=c;</span><br><span class="line">	b/=c;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">"/"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>3.6</title>
    <url>/2020/03/06/3-6/</url>
    <content><![CDATA[<p>[蓝桥杯2016初赛]密码脱落<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>X星球的考古学家发现了一批古代留下来的密码。这些密码是由A、B、C、D 四种植物的种子串成的序列。<br>仔细分析发现，这些密码串当初应该是前后对称的（也就是我们说的镜像串）。<br>由于年代久远，其中许多种子脱落了，因而可能会失去镜像的特征。<br>你的任务是：给定一个现在看到的密码串，计算一下从当初的状态，它要至少脱落多少个种子，才可能会变成现在的样子。</p>
<p>输入<br>输入存在多组测试数据，对于每组测试数据输入一行，表示现在看到的密码串（长度不大于1000）</p>
<p>输出<br>对于每组测试数据要求输出一个正整数，表示至少脱落了多少个种子。</p>
<p>样例输入<br>ABCBA<br>ABDCDCBABC</p>
<p>样例输出<br>0<br>3</p>
</blockquote>
<p>题意：<br>给一个字符串，原本是回文串，现在脱落了几个字母，问最少脱落了多少个字母，使得回文串成现在的字符串。</p>
<p>思路：<br>最大公共子序列..<br>字符串a为题目输入的字符串，字符串b为a的reverse。<br>求得a和b的最大公共子序列，然后a.size()减去最大公共子序列的长度即为答案</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">		b=a;</span><br><span class="line">		reverse(b.begin(),b.end());</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.size();j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i]==b[j])&#123;</span><br><span class="line">					dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=dp[i][j]+<span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=max(dp[i+<span class="number">1</span>][j],dp[i][j+<span class="number">1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(a.size()-dp[a.size()][b.size()])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2016初赛]四平方和</p>
<blockquote>
<p>题目描述<br>四平方和定理，又称为拉格朗日定理：每个正整数都可以表示为至多4个正整数的平方和。<br>如果把0包括进去，就正好可以表示为4个数的平方和。<br>比如：<br>5 = $0^2 + 0^2 + 1^2 + 2^2$<br>7 = $1^2 + 1^2 + 1^2 + 2^2$（^符号表示乘方的意思）<br>对于一个给定的正整数N，可能存在多种平方和的表示法。<br>要求你对4个数排序：0 &lt;= a &lt;= b &lt;= c &lt;= d<br>并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法</p>
<p>输入<br>输入存在多组测试数据，每组测试数据输入一行为一个正整数N (N&lt;5000000)</p>
<p>输出<br>对于每组测试数据，要求输出4个非负整数，按从小到大排序，中间用空格分开</p>
<p>样例输入<br>5<br>12<br>773535</p>
<p>样例输出<br>0 0 1 2<br>0 2 2 2<br>1 1 267 838</p>
</blockquote>
<p>暴力…<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> N; </span><br><span class="line"><span class="keyword">int</span> a,b,c,d;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( a=<span class="number">0</span>;a&lt;=temp;a++)&#123;</span><br><span class="line">        <span class="keyword">for</span>( b=<span class="number">0</span>;b&lt;=temp;b++)&#123;</span><br><span class="line">            <span class="keyword">for</span>( c=<span class="number">0</span>;c&lt;=temp;c++)&#123;</span><br><span class="line">                d=<span class="built_in">sqrt</span>(n-a*a-b*b-c*c);</span><br><span class="line">                <span class="keyword">if</span>(n==a*a+b*b+c*c+d*d)&#123;</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N)!=EOF)&#123;</span><br><span class="line">        temp=<span class="built_in">sqrt</span>(N);</span><br><span class="line">        solve(N);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,a,b,c,d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>3-15</title>
    <url>/2020/03/15/3-15/</url>
    <content><![CDATA[<p>[蓝桥杯2017初赛]Excel地址</p>
<blockquote>
<p>题目描述<br>Excel单元格的地址表示很有趣，它使用字母来表示列号。<br>比如，A表示第1列，B表示第2列，Z表示第26列，AA表示第27列，AB表示第28列，BA表示第53列，….<br>当然Excel的最大列号是有限度的，所以转换起来不难。<br>如果我们想把这种表示法一般化，可以把很大的数字转换为很长的字母序列呢？<br>本题目既是要求对输入的数字, 输出其对应的Excel地址表示方式。</p>
<p>输入<br>输入存在多组测试数据，对于每组测试数据输入一行包含一个整数<br>输入的整数范围[1,2147483647]</p>
<p>输出<br>对于每组测试数据：输出一行表示答案</p>
<p>样例输入<br>26<br>2054</p>
<p>样例输出<br>Z<br>BZZ</p>
</blockquote>
<p>思路：进制转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll a;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a);</span><br><span class="line">	<span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">	<span class="keyword">while</span>(a)&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=a%<span class="number">26</span>;</span><br><span class="line">		<span class="keyword">if</span>(tmp==<span class="number">0</span>)&#123;</span><br><span class="line">			tmp=<span class="number">26</span>;</span><br><span class="line">			a--;</span><br><span class="line">		&#125;</span><br><span class="line">		sta.push(tmp);</span><br><span class="line">		a/=<span class="number">26</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(sta.size())&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp=sta.top();</span><br><span class="line">		sta.pop();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'@'</span>+tmp);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2017初赛]算式900</p>
<blockquote>
<p>题目描述<br>小明的作业本上有道思考题：算式： (□□□□-□□□□)<em>□□=900<br>其中的小方块代表0~9的数字，这10个方块刚好包含了0~9中的所有数字。<br>注意：0不能作为某个数字的首位。<br>小明经过几天的努力，终于做出了答案！如下：(5012-4987)</em>36=900<br>用计算机搜索后，发现还有另外一个解，本题的任务就是：请你算出这另外的一个解。</p>
<p>输出<br>输出格式需要与示例严格一致；<br>括号及运算符号不要用中文输入法；<br>整个算式中不能包含空格。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	do&#123;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		if(a[0]==0||a[4]==0||a[8]==0)&#123;</span></span><br><span class="line"><span class="comment">			continue;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		int aa=a[0]*1000+a[1]*100+a[2]*10+a[3];</span></span><br><span class="line"><span class="comment">		int bb=a[4]*1000+a[5]*100+a[6]*10+a[7];</span></span><br><span class="line"><span class="comment">		int cc=a[8]*10+a[9];</span></span><br><span class="line"><span class="comment">		if((aa-bb)*cc==900)&#123;</span></span><br><span class="line"><span class="comment">			printf("(%d-%d)*%d\n",aa,bb,cc);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;while(next_permutation(a,a+10));*/</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt; <span class="string">"(6048-5973)*12=900"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2017初赛]k倍区间</p>
<blockquote>
<p>题目描述<br>给定一个长度为N的数列，A1, A2, … AN。<br>如果其中一段连续的子序列Ai, Ai+1, … Aj(i &lt;= j)之和是K的倍数，我们就称这个区间[i, j]是K倍区间。<br>你能求出数列中总共有多少个K倍区间吗？ </p>
<p>输入<br>第一行包含两个整数N和K。(1 &lt;= N, K &lt;= 100000)<br>以下N行每行包含一个整数Ai。(1 &lt;= Ai &lt;= 100000)  </p>
<p>输出<br>输出一个整数，代表K倍区间的数目。</p>
<p>样例输入<br>5 2<br>1<br>2<br>3<br>4<br>5</p>
<p>样例输出<br>6</p>
</blockquote>
<p>借鉴：<a href="https://blog.csdn.net/w_x_s_h_h/article/details/79375081" target="_blank" rel="noopener">https://blog.csdn.net/w_x_s_h_h/article/details/79375081</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ll a[MAX_N];</span><br><span class="line">ll ans[MAX_N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ll n,k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	a[<span class="number">1</span>]%=k;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		a[i]=(a[i]+a[i<span class="number">-1</span>])%k;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		sum+=(ans[a[i]]++);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum+ans[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Applese涂颜色</title>
    <url>/2019/04/29/Applese%E6%B6%82%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>题目链接： <a href="https://ac.nowcoder.com/acm/contest/330/E" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/330/E</a><br><a id="more"></a></p>
<blockquote>
<p>费马小定理(Fermat’s little theorem)是数论中的一个重要定理，在1636年提出。如果p是一个质数，而整数a不是p的倍数，则有$a^{p-1}≡1(mod p)$。</p>
<p>在数论中，欧拉定理,（也称费马-欧拉定理）是一个关于同余的性质。欧拉定理表明，若n,a为正整数，且n,a互质，则: $a^{φ(n)}≡1(mod n)$<br>φ(n)为欧拉函数，定义为不超过n的整数中与n互素的个数。<br>欧拉降幂公式： $a^b≡a^{bmodφ(n)+φ(n)}mod n$</p>
</blockquote>
<p>题意：求出$2^n$。<br>思路：快速幂求$2^n$，问题是n太大了。肯定用数组存，然后利用<br>费马小定理：$2^nmod m=2^{n mod (m-1）}modm$ （这个怎么推我还不知道）</p>
<p>我写的AC代码：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="comment">//快速幂</span></span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> n,m;</span><br><span class="line">    ll a;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        a=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n.size();i++)&#123;</span><br><span class="line">            a=(a*<span class="number">10</span>+n[i]-<span class="string">'0'</span>)%(mod<span class="number">-1</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mod_pow(<span class="number">2</span>,a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>数论</tag>
        <tag>费马小定理</tag>
      </tags>
  </entry>
  <entry>
    <title>Block Breaker</title>
    <url>/2019/09/29/Block-Breaker/</url>
    <content><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6699" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6699</a></p>
<p>题意：给n*m矩阵，外围包着层墙，q次操作，每次操作击落(x,y)的方块，一个方块掉落可能会影响到附近的方块掉落，如果方块的上下或者左右夹不住该方块，则该方块掉落。DFS就可以了。<br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">100003</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[x][y])temp++;</span><br><span class="line">            vis[x][y]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> nx=x+dx[i];</span><br><span class="line">                <span class="keyword">int</span> ny=y+dy[i];</span><br><span class="line">                <span class="keyword">if</span>(nx&gt;<span class="number">0</span>&amp;&amp;nx&lt;=n&amp;&amp;ny&gt;<span class="number">0</span>&amp;&amp;ny&lt;=m&amp;&amp;!vis[nx][ny])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp+=dfs(nx,ny,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>((!vis[x<span class="number">-1</span>][y]&amp;&amp;!vis[x+<span class="number">1</span>][y])||(!vis[x][y+<span class="number">1</span>]&amp;&amp;!vis[x][y<span class="number">-1</span>])&amp;&amp;z==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[x][y]) temp++;</span><br><span class="line">                vis[x][y]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> nx=x+dx[i];</span><br><span class="line">                    <span class="keyword">int</span> ny=y+dy[i];</span><br><span class="line">                    <span class="keyword">if</span>(nx&gt;<span class="number">0</span>&amp;&amp;nx&lt;=n&amp;&amp;ny&gt;<span class="number">0</span>&amp;&amp;ny&lt;=m&amp;&amp;!vis[nx][ny])</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp+=dfs(nx,ny,<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">while</span>(q--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(!vis[x][y]) &#123;vis[x][y]=<span class="number">1</span>;temp++;&#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dfs(x,y,<span class="number">0</span>)+temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Average distance</title>
    <url>/2019/04/14/Average-distance/</url>
    <content><![CDATA[<blockquote>
<h1 id="Average-distance"><a href="#Average-distance" class="headerlink" title="Average distance"></a>Average distance</h1><a id="more"></a>
<p>Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 1830    Accepted Submission(s): 659<br>Special Judge<br>Problem Description<br>Given a tree, calculate the average distance between two vertices in the tree. For example, the average distance between two vertices in the following tree is $(d_{01} + d_{02} + d_{03} + d_{04} + d_{12} +d_{13} +d_{14} +d_{23} +d_{24} +d_{34})/10 = (6+3+7+9+9+13+15+10+12+2)/10 = 8.6$.</p>
<p><div align="center">
<img src="https://img-blog.csdn.net/20180827145647814?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVzd2Fycmlvcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70">
</div><br>Input<br>On the first line an integer t (1 &lt;= t &lt;= 100): the number of test cases. Then for each test case:<br>One line with an integer n (2 &lt;= n &lt;= 10 000): the number of nodes in the tree. The nodes are numbered from 0 to n - 1.<br>n - 1 lines, each with three integers a (0 &lt;= a &lt; n), b (0 &lt;= b &lt; n) and d (1 &lt;= d &lt;= 1 000). There is an edge between the nodes with numbers a and b of length d. The resulting graph will be a tree.<br>Output<br>For each testcase:<br>One line with the average distance between two vertices. This value should have either an absolute or a relative error of at most $10^{-6}$<br>Sample Input<br>1<br>5<br>0 1 6<br>0 2 3<br>0 3 7<br>3 4 2<br>Sample Output<br>8.6</p>
</blockquote>
<h2 id="引：如果暴力枚举两点再求距离是显然会超时的。转换一下思路，我们可以对每条边，求所有可能的路径经过此边的次数：设这条边两端的点数分别为A和B，那-么这条边被经过的次数就是AB，它对总的距离和的贡献就是-AB此边长度-。我们把所有边的贡献求总和，再除以总路径数N-N-1-2，即为最-后所求。"><a href="#引：如果暴力枚举两点再求距离是显然会超时的。转换一下思路，我们可以对每条边，求所有可能的路径经过此边的次数：设这条边两端的点数分别为A和B，那-么这条边被经过的次数就是AB，它对总的距离和的贡献就是-AB此边长度-。我们把所有边的贡献求总和，再除以总路径数N-N-1-2，即为最-后所求。" class="headerlink" title="引：如果暴力枚举两点再求距离是显然会超时的。转换一下思路，我们可以对每条边，求所有可能的路径经过此边的次数：设这条边两端的点数分别为A和B，那 么这条边被经过的次数就是AB，它对总的距离和的贡献就是(AB此边长度)。我们把所有边的贡献求总和，再除以总路径数N(N-1)/2，即为最 后所求。"></a>引：如果暴力枚举两点再求距离是显然会超时的。转换一下思路，我们可以对每条边，求所有可能的路径经过此边的次数：设这条边两端的点数分别为A和B，那 么这条边被经过的次数就是A<em>B，它对总的距离和的贡献就是(A</em>B<em>此边长度)。我们把所有边的贡献求总和，再除以总路径数N</em>(N-1)/2，即为最 后所求。</h2><h3 id="下面是AC的代码"><a href="#下面是AC的代码" class="headerlink" title="下面是AC的代码"></a>下面是AC的代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int T;</span><br><span class="line">int n;</span><br><span class="line">struct Node&#123;</span><br><span class="line">    int value;</span><br><span class="line">    int point;</span><br><span class="line">&#125;;</span><br><span class="line">double ans[<span class="number">10000</span>+<span class="number">5</span>];</span><br><span class="line">double sum[<span class="number">10000</span>+<span class="number">5</span>];</span><br><span class="line">vector&lt;Node&gt; node[<span class="number">10000</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> dfs(int son,int father)&#123;</span><br><span class="line">    sum[son]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;node[son].size();i++)&#123;</span><br><span class="line">        int p=node[son][i].point;</span><br><span class="line">        int v=node[son][i].value;</span><br><span class="line">        <span class="keyword">if</span>(p==father)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        dfs(p,son);</span><br><span class="line">        sum[son]+=sum[p];</span><br><span class="line">        ans[son]+=ans[p]+sum[p]*(n-sum[p])*v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> solve()&#123;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    int a,b,d;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        node[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    memset(ans,<span class="number">0</span>,sizeof(ans));</span><br><span class="line">    memset(sum,<span class="number">0</span>,sizeof(sum));</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        scanf(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;d);</span><br><span class="line">        Node temp;</span><br><span class="line">        temp.point=b;</span><br><span class="line">        temp.value=d;</span><br><span class="line">        node[a].push_back(temp);</span><br><span class="line">        temp.point=a;</span><br><span class="line">        node[b].push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">    double number=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;ans[0]/number&lt;&lt;endl;</span></span><br><span class="line">    printf(<span class="string">"%.7f\n"</span>,ans[<span class="number">0</span>]/number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   scanf(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">   <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">     solve();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #570 (Div. 3)</title>
    <url>/2019/11/27/Codeforces-Round-570-Div-3/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1183" target="_blank" rel="noopener">Codeforces Round #570 (Div. 3)</a><br><a id="more"></a></p>
<p><a href="https://codeforces.com/contest/1183/problem/A" target="_blank" rel="noopener">A. Nearest Interesting Number</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		sum+=x%<span class="number">10</span>;</span><br><span class="line">		x/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum%<span class="number">4</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(check(i)) &#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1183/problem/B" target="_blank" rel="noopener">B. Equalize Prices</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">		<span class="keyword">int</span> max_min=a[<span class="number">1</span>]+k;</span><br><span class="line">		<span class="keyword">int</span> min_max=a[n]-k;</span><br><span class="line">		<span class="keyword">if</span>(max_min&lt;min_max)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max_min);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1183/problem/C" target="_blank" rel="noopener">C. Computer Game</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> k,n,a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;k,&amp;n,&amp;a,&amp;b);</span><br><span class="line">		<span class="keyword">int</span> max_n=k/b;</span><br><span class="line">		<span class="keyword">if</span>(max_n&lt;n)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(max_n==n&amp;&amp;b*max_n&gt;=k)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(max_n&gt;=n)&#123;</span><br><span class="line">			<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">			cnt=k<span class="number">-1</span>-b*n;</span><br><span class="line">			<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">			ans=cnt/(a-b);</span><br><span class="line">			<span class="keyword">if</span>(ans&gt;=n)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1183/problem/D" target="_blank" rel="noopener">D. Candy Box (easy version)</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> temp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">			a[temp]++;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">		<span class="keyword">int</span> cnt=a[<span class="number">1</span>];</span><br><span class="line">		ans+=cnt;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n&amp;&amp;cnt;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;=cnt)&#123;</span><br><span class="line">				cnt--;</span><br><span class="line">				ans+=cnt;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				cnt=a[i];</span><br><span class="line">				ans+=a[i];</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1183/problem/E" target="_blank" rel="noopener">E. Subsequences (easy version)</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; &gt; que;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; mp; </span><br><span class="line"><span class="keyword">int</span> n,k; </span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> dis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">		<span class="built_in">string</span> temp=que.front().first;</span><br><span class="line">		<span class="keyword">int</span> temp_ans=que.front().second;</span><br><span class="line">		que.pop();</span><br><span class="line">		<span class="keyword">if</span>(dis==k)&#123;</span><br><span class="line">			ans+=temp_ans;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;temp.size();i++)&#123;</span><br><span class="line">			<span class="built_in">string</span> temp3=temp;</span><br><span class="line">			temp3.erase(temp3.begin()+i,temp3.begin()+i+<span class="number">1</span>);</span><br><span class="line">			<span class="built_in">string</span> temp2=temp3;</span><br><span class="line">			<span class="keyword">if</span>(mp.count(temp2))&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				mp[temp2]=<span class="number">1</span>;</span><br><span class="line">				dis++;</span><br><span class="line">				ans+=n-temp2.size();</span><br><span class="line">				<span class="keyword">if</span>(dis==k)&#123;</span><br><span class="line">					<span class="keyword">return</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">				que.push(make_pair(temp2,ans));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	que.push(make_pair(s,ans));</span><br><span class="line">	dis=<span class="number">1</span>;</span><br><span class="line">	bfs();</span><br><span class="line">	<span class="keyword">if</span>(dis&lt;k)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1183/problem/F" target="_blank" rel="noopener">F. Topforces Strikes Back</a><br>参考：<a href="https://www.cnblogs.com/carcar/p/11140167.html" target="_blank" rel="noopener">blog</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[MAX_N],cnt,fa[MAX_N],ans;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; se; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> x;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">			se.insert(x);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> i:se)&#123;</span><br><span class="line">			num[++cnt]=i;				<span class="comment">//排序 从小到大 </span></span><br><span class="line">		&#125;</span><br><span class="line">		se.clear();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;i--)&#123;		</span><br><span class="line">			ans=max(ans,num[i]);			<span class="comment">//找第一个最大的 </span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=cnt;j&gt;i;j--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(num[j]%num[i]!=<span class="number">0</span>)&#123;				<span class="comment">//找第二个最大的且符合条件的 </span></span><br><span class="line">					ans=max(ans,num[i]+num[j]);</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;i;k--)&#123;</span><br><span class="line">						<span class="keyword">if</span>(num[j]%num[k]!=<span class="number">0</span>&amp;&amp;num[k]%num[i]!=<span class="number">0</span>)&#123;			<span class="comment">//找第三个最大的且符合条件的 </span></span><br><span class="line">							ans=max(ans,num[i]+num[j]+num[k]);			<span class="comment">//更新答案 </span></span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">break</span>;	</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1183/problem/G" target="_blank" rel="noopener">G. Candy Box (hard version)</a><br>参考：<a href="https://www.luogu.com.cn/blog/wucstdio/solution-cf1183g" target="_blank" rel="noopener">blog</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cnt0[MAX_N],cnt1[MAX_N],sa[MAX_N];</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> cnt0[a]+cnt1[a]&gt;cnt0[b]+cnt1[b];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> x,y;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">			<span class="keyword">if</span>(y) cnt1[x]++;			<span class="comment">//标记1 </span></span><br><span class="line">			<span class="keyword">else</span> cnt0[x]++;				<span class="comment">//标记0 </span></span><br><span class="line">			sa[i]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(que.size())que.pop();</span><br><span class="line">		sort(sa+<span class="number">1</span>,sa+n+<span class="number">1</span>,cmp);				<span class="comment">//排序 </span></span><br><span class="line">		<span class="keyword">int</span> now=<span class="number">1</span>,ans=<span class="number">0</span>,num=<span class="number">0</span>;				</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;				<span class="comment">//从大到小贪心 </span></span><br><span class="line">			<span class="keyword">while</span>(cnt0[sa[now]]+cnt1[sa[now]]&gt;=i)&#123;		 </span><br><span class="line">				que.push(cnt1[sa[now]]);				<span class="comment">//插入标记1的数量 </span></span><br><span class="line">				now++;	</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(que.empty()) <span class="keyword">continue</span>;				</span><br><span class="line">			<span class="keyword">int</span> v=que.top();			 </span><br><span class="line">			que.pop();					</span><br><span class="line">			ans+=i;						<span class="comment">//该种类的数量 </span></span><br><span class="line">			num+=min(v,i);				</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans,num);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cnt0[i]=cnt1[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1183/problem/H" target="_blank" rel="noopener">H. Subsequences (hard version)</a><br>参考：<a href="https://blog.csdn.net/mmk27_word/article/details/93999633" target="_blank" rel="noopener">blog</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">ll dp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line">ll n,k; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">			dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j];</span><br><span class="line">			<span class="keyword">if</span>(pre[s[i]-<span class="string">'a'</span>]) dp[i][j]-=dp[pre[s[i]-<span class="string">'a'</span>]<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">			dp[i][j]=min(dp[i][j],k);</span><br><span class="line">		&#125;</span><br><span class="line">		pre[s[i]-<span class="string">'a'</span>]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		ans+=min(dp[n][i],k)*(n-i);</span><br><span class="line">		k-=dp[n][i];</span><br><span class="line">		<span class="keyword">if</span>(k&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #598 (Div. 3)</title>
    <url>/2019/11/24/Codeforces-Round-598-Div-3/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1256" target="_blank" rel="noopener">Codeforces Round #598 (Div. 3)</a><br><a id="more"></a></p>
<p><a href="https://codeforces.com/contest/1256/problem/A" target="_blank" rel="noopener">A. Payment Without Change</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line">ll a,n,b,s; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;n,&amp;s);</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(a*n+b&lt;s) &#123;</span><br><span class="line">			flag=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(s%n&gt;b)&#123;</span><br><span class="line">				flag=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1256/problem/B" target="_blank" rel="noopener">B. Minimize the Permutation</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(last&lt;n)&#123;</span><br><span class="line">			<span class="keyword">int</span> min=<span class="number">1000000</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=pos+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(min&gt;a[i])&#123;</span><br><span class="line">					min=a[i];</span><br><span class="line">					pos=i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;last;i--)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i<span class="number">-1</span>]&gt;a[i])&#123;</span><br><span class="line">					swap(a[i<span class="number">-1</span>],a[i]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			last=pos;		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,a[i],i==n ? <span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1256/problem/C" target="_blank" rel="noopener">C. Platforms Jumping</a></p>
<p>参考：<a href="https://www.cnblogs.com/QingyuYYYYY/p/11802854.html" target="_blank" rel="noopener">blog</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"><span class="keyword">int</span> n,m,d;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;d);</span><br><span class="line">	<span class="keyword">int</span> max_len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line">		max_len+=c[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>((max_len+d*(m+<span class="number">1</span>)-m)&lt;n+<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">	<span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(pos+d+max_len&lt;=n) pos+=d;</span><br><span class="line">		<span class="keyword">else</span> pos=n+<span class="number">1</span>-max_len;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=pos;j&lt;=pos+c[i]<span class="number">-1</span>;j++)&#123;</span><br><span class="line">			ans[j]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		pos+=c[i]<span class="number">-1</span>;</span><br><span class="line">		max_len-=c[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i], i==n ? <span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/contest/1256/problem/D" target="_blank" rel="noopener">D. Binary String Minimizing</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">		<span class="keyword">char</span> c;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;c);</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="string">'0'</span>)&#123;</span><br><span class="line">				a[++len]=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len&amp;&amp;k;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(k&gt;=(a[i]-i))&#123;</span><br><span class="line">				k=k-(a[i]-i);</span><br><span class="line">				a[i]=i;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				a[i]=a[i]-k;</span><br><span class="line">				k=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==a[cnt]&amp;&amp;cnt&lt;=len) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">				cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1256/problem/E" target="_blank" rel="noopener">E. Yet Another Division Into Teams</a></p>
<p>参考:<a href="https://www.cnblogs.com/--Simon/p/11812866.html" target="_blank" rel="noopener">blog</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span> &gt; a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N],p[MAX_N];</span><br><span class="line"><span class="keyword">int</span> ans[MAX_N];</span><br><span class="line"><span class="keyword">int</span> root,cnt;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].first);</span><br><span class="line">		a[i].second=i;</span><br><span class="line">	&#125; </span><br><span class="line">	sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">	<span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=<span class="number">4</span>&amp;&amp;i+j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> temp=a[i+j].first-a[i].first;</span><br><span class="line">			<span class="keyword">if</span>(dp[i+j+<span class="number">1</span>]&gt;dp[i]+temp)&#123;</span><br><span class="line">				dp[i+j+<span class="number">1</span>]=dp[i]+temp;</span><br><span class="line">				p[i+j+<span class="number">1</span>]=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	root=n+<span class="number">1</span>; cnt=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(root!=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=root<span class="number">-1</span>;i&gt;=p[root];i--)&#123;</span><br><span class="line">			ans[a[i].second]=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		cnt++;</span><br><span class="line">		root=p[root];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,dp[n+<span class="number">1</span>],cnt<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==n ? <span class="string">'\n'</span> :<span class="string">' '</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1256/problem/F" target="_blank" rel="noopener">F. Equalizing Two Strings</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> s_vis[<span class="number">30</span>]; </span><br><span class="line"><span class="keyword">char</span> t[MAX_N];</span><br><span class="line"><span class="keyword">int</span> t_vis[<span class="number">30</span>]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(s_vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(s_vis));</span><br><span class="line">		<span class="built_in">memset</span>(t_vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(t_vis));</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,t);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			s_vis[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">			t_vis[t[i]-<span class="string">'a'</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> flag1=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s_vis[i]!=t_vis[i])	&#123;</span><br><span class="line">				flag1=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag1) &#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s_vis[i]&gt;=<span class="number">2</span>||t_vis[i]&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> num1=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> num2=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">					<span class="keyword">if</span>(s[i]&gt;s[j])&#123;</span><br><span class="line">						num1++;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(t[i]&gt;t[j])&#123;</span><br><span class="line">						num2++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>((num1&amp;<span class="number">1</span>)==(num2&amp;<span class="number">1</span>))<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Coloring Game</title>
    <url>/2019/04/20/Coloring-Game/</url>
    <content><![CDATA[<p><strong>一道签到题…卡在快速幂取模，最后改对了，花费时间太长了，记录一下…</strong><br><a id="more"></a></p>
<blockquote>
<p>题目链接: <a href="https://nanti.jisuanke.com/t/38227" target="_blank" rel="noopener">https://nanti.jisuanke.com/t/38227</a></p>
<p>David has a white board with 2 \times N2×N grids.He decides to paint some grids black with his brush.He always starts at the top left corner and ends at the bottom right corner, where grids should be black ultimately.<br>Each time he can move his brush up(↑), down(↓), left(←), right(→), left up(↖), left down(↙), right up(↗), right down (↘) to the next grid.<br>For a grid visited before,the color is still black. Otherwise it changes from white to black.<br>David wants you to compute the number of different color schemes for a given board. Two color schemes are considered different if and only if the color of at least one corresponding position is different.</p>
<p>Input<br>One line including an integer n <script type="math/tex">(0< n ≤ 10^9)</script> </p>
<p>Output<br>One line including an integer, which represent the answer mod 1000000007<br>样例输入1<br>2<br>样例输出1<br>4<br><img src="http://bmob-cdn-24907.b0.upaiyun.com/2019/04/20/1cd8c97540ce5e8580b96dd1a5118335.png" alt="样例输入1"><br>样例输入1<br>3<br>样例输出1<br>12<br><img src="http://bmob-cdn-24907.b0.upaiyun.com/2019/04/20/5977399040ece1db80c453ae869c44df.png" alt="样例输入2"></p>
</blockquote>
<p>题意：从左上角到后下角的路径数，没经过一个格子，黑的不变，白的变黑<br>思路: 从输入样例可以看出，对于每一列来讲除了第一列和最后一列，每一列都有三种情况，第一列和最后一列只有两种情况，所以路径数为<script type="math/tex">3^{n-2}*2*2</script></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line">ull  n;</span><br><span class="line"><span class="function">ull <span class="title">poww</span><span class="params">(ull a, ull b)</span> </span>&#123;</span><br><span class="line">    ull ans = <span class="number">1</span>, base = a;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span> != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans =ans* base%<span class="number">1000000007</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            base = base*base%<span class="number">1000000007</span>;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n)!=EOF)&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">	ull ans = poww(<span class="number">3</span>, n - <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans*<span class="number">4</span>%<span class="number">1000000007</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：快速幂且取模<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 位运算</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span></span>&#123;</span><br><span class="line">	ll res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">		x=x*x%mod;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	ll res=mod_pow(x*x%mod,n/<span class="number">2</span>,mod);</span><br><span class="line">	<span class="keyword">if</span>(n&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>AC自动机</title>
    <url>/2019/10/28/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<p>Trie+Kmp=AC自动机<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fail;</span><br><span class="line">    <span class="keyword">int</span> vis[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">&#125;tree[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="built_in">string</span> s)</span>         <span class="comment">//用所有子串建立字典树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=s.length();</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[now].vis[s[i]-<span class="string">'a'</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            tree[now].vis[s[i]-<span class="string">'a'</span>]=++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        now=tree[now].vis[s[i]-<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tree[now].tail+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_fail</span><span class="params">()</span></span>&#123;                <span class="comment">//用BFS求失配指针</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[<span class="number">0</span>].vis[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            tree[tree[<span class="number">0</span>].vis[i]].fail=<span class="number">0</span>;</span><br><span class="line">            que.push(tree[<span class="number">0</span>].vis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tree[u].vis[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                tree[tree[u].vis[i]].fail=tree[tree[u].fail].vis[i];</span><br><span class="line">                que.push(tree[u].vis[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tree[u].vis[i]=tree[tree[u].fail].vis[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;            <span class="comment">//查询</span></span><br><span class="line">    <span class="keyword">int</span> l=s.length();</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line">        now=tree[now].vis[s[i]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=now;t&amp;&amp;tree[t].tail!=<span class="number">-1</span>;t=tree[t].fail)&#123;</span><br><span class="line">            ans+=tree[t].tail;</span><br><span class="line">            tree[t].tail=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        Build(s);</span><br><span class="line">    &#125;</span><br><span class="line">    tree[<span class="number">0</span>].fail=<span class="number">0</span>;</span><br><span class="line">    Get_fail();</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;query(s)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>3.8</title>
    <url>/2020/03/08/3-8/</url>
    <content><![CDATA[<p>[蓝桥杯2016初赛]搭积木<br><a id="more"></a></p>
<blockquote>
<p>题目描述<br>小明最近喜欢搭数字积木，一共有10块积木，每个积木上有一个数字，0~9。<br>搭积木规则：每个积木放到其它两个积木的上面，并且一定比下面的两个积木数字小。<br>最后搭成4层的金字塔形，必须用完所有的积木<br>下面是两种合格的搭法：<br>   0<br>  1 2<br> 3 4 5<br>6 7 8 9</p>
</blockquote>
<p>   0<br>  3 1<br> 7 5 2<br>9 8 6 4<br>请你计算这样的搭法一共有多少种？</p>
<blockquote>
<p>输出<br>一个整数表示答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">0</span>]&gt;a[<span class="number">1</span>]||a[<span class="number">0</span>]&gt;a[<span class="number">2</span>]) flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">1</span>]&gt;a[<span class="number">3</span>]||a[<span class="number">1</span>]&gt;a[<span class="number">4</span>]) flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">2</span>]&gt;a[<span class="number">4</span>]||a[<span class="number">2</span>]&gt;a[<span class="number">5</span>]) flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">3</span>]&gt;a[<span class="number">6</span>]||a[<span class="number">3</span>]&gt;a[<span class="number">7</span>]) flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">4</span>]&gt;a[<span class="number">7</span>]||a[<span class="number">4</span>]&gt;a[<span class="number">8</span>]) flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">5</span>]&gt;a[<span class="number">8</span>]||a[<span class="number">5</span>]&gt;a[<span class="number">9</span>]) flag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/*	int ans=0;</span></span><br><span class="line"><span class="comment">	do&#123;</span></span><br><span class="line"><span class="comment">		if(fun())&#123;</span></span><br><span class="line"><span class="comment">			ans++;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;while(next_permutation(a,a+10));*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">768</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[蓝桥杯2016初赛]有奖猜谜</p>
<blockquote>
<p>题目描述<br>小明很喜欢猜谜语。最近，他被邀请参加了X星球的猜谜活动。<br>每位选手开始的时候都被发给777个电子币。<br>规则是：猜对了，手里的电子币数目翻倍，猜错了，扣除555个电子币, 扣完为止。<br>小明一共猜了15条谜语。战果为：vxvxvxvxvxvxvvx<br>其中v表示猜对了，x表示猜错了。请你计算一下，小明最后手里的电子币数目是多少。<br>输出<br>请填写表示最后电子币数目的数字。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a=<span class="string">"vxvxvxvxvxvxvvx"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">777</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size()&amp;&amp;ans;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">'v'</span>&amp;&amp;ans&gt;<span class="number">0</span>) ans*=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span> ans-=<span class="number">555</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ans&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Haybale Feast</title>
    <url>/2019/09/27/Haybale-Feast/</url>
    <content><![CDATA[<blockquote>
<p>链接：<a href="https://ac.nowcoder.com/acm/contest/625/C" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/625/C</a><br>来源：牛客网<br><a id="more"></a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll m;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ind=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//freopen("data.in","r",stdin);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;f[i],&amp;s[i]);</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    ll ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=f[i];</span><br><span class="line">        <span class="keyword">while</span>(ind&lt;=i&amp;&amp;sum-f[ind]&gt;=m)&#123;</span><br><span class="line">            sum-=f[ind]; ind++;         <span class="comment">//找到满足条件的ind位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;=tail&amp;&amp;p[head]&lt;ind) head++;          <span class="comment">//当队首的位置小于ind位置，队首出队</span></span><br><span class="line">        <span class="keyword">while</span>(head&lt;=tail&amp;&amp;s[p[tail]]&lt;=s[i]) tail--;    <span class="comment">//当 当前元素大于队尾，出队</span></span><br><span class="line">        p[++tail]=i;                                <span class="comment">//入队</span></span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=m) ans=min(ans,(ll)s[p[head]]);     <span class="comment">//当满足条件时，求最优解</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>牛客网</tag>
        <tag>单调队列</tag>
        <tag>尺取法</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round #590 (Div. 3)</title>
    <url>/2019/11/26/Codeforces-Round-590-Div-3/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1234" target="_blank" rel="noopener">Codeforces Round #590 (Div. 3)</a><br><a id="more"></a></p>
<p><a href="https://codeforces.com/contest/1234/problem/A" target="_blank" rel="noopener">A. Equalize Prices Again</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">			sum+=a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum%n==<span class="number">0</span>) ans=sum/n;</span><br><span class="line">		<span class="keyword">else</span> ans=sum/n+<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1234/problem/B1" target="_blank" rel="noopener">B1. Social Network (easy version)</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span> ,<span class="keyword">int</span> &gt; mp;</span><br><span class="line"><span class="keyword">int</span> ans[MAX_N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</span><br><span class="line">		<span class="keyword">if</span>(mp[id]==<span class="number">0</span>)&#123;</span><br><span class="line">			mp[id]=<span class="number">1</span>;</span><br><span class="line">			ans[cnt]=id;</span><br><span class="line">			<span class="keyword">if</span>(cnt&gt;=k)&#123;</span><br><span class="line">				mp[ans[cnt-k]]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(cnt&lt;=k)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==<span class="number">0</span> ? <span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=cnt-k;i--)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==cnt-k ? <span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/contest/1234/problem/B2" target="_blank" rel="noopener">B2. Social Network (hard version)</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span> ,<span class="keyword">int</span> &gt; mp;</span><br><span class="line"><span class="keyword">int</span> ans[MAX_N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</span><br><span class="line">		<span class="keyword">if</span>(mp[id]==<span class="number">0</span>)&#123;</span><br><span class="line">			mp[id]=<span class="number">1</span>;</span><br><span class="line">			ans[cnt]=id;</span><br><span class="line">			<span class="keyword">if</span>(cnt&gt;=k)&#123;</span><br><span class="line">				mp[ans[cnt-k]]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(cnt&lt;=k)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==<span class="number">0</span> ? <span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=cnt-k;i--)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==cnt-k ? <span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/contest/1234/problem/C" target="_blank" rel="noopener">C. Pipes</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">int</span> temp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;temp);</span><br><span class="line">				<span class="keyword">if</span>(temp==<span class="number">1</span>||temp==<span class="number">2</span>) a[i][j]=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> a[i][j]=<span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[pos][i]==<span class="number">1</span>)&#123;</span><br><span class="line">				cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[pos][i]==<span class="number">3</span>&amp;&amp;a[pos^<span class="number">1</span>][i]==<span class="number">3</span>)&#123;</span><br><span class="line">				cnt++;</span><br><span class="line">				pos=pos^<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt==n&amp;&amp;pos==<span class="number">1</span>) flag=<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/contest/1234/problem/D" target="_blank" rel="noopener">D. Distinct Characters Queries</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> N = <span class="number">200000</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> tree[MAX_N][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">		tree[x][cnt]+=k;</span><br><span class="line">		x+=lowbit(x);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		res+=tree[x][cnt];</span><br><span class="line">		x-=lowbit(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">	n=s.size();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		add(i+<span class="number">1</span>,<span class="number">1</span>,s[i]-<span class="string">'a'</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> q; </span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> op;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> pos;</span><br><span class="line">			<span class="keyword">char</span> c;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pos);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;c);</span><br><span class="line">			add(pos,<span class="number">-1</span>,s[pos<span class="number">-1</span>]-<span class="string">'a'</span>);</span><br><span class="line">			s[pos<span class="number">-1</span>]=c;</span><br><span class="line">			add(pos,<span class="number">1</span>,c-<span class="string">'a'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> l,r;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">			<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>((sum(r,i)-sum(l<span class="number">-1</span>,i))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">					ans++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://codeforces.com/contest/1234/problem/E" target="_blank" rel="noopener">E. Special Permutations</a></p>
<p>参考：<a href="https://blog.csdn.net/BeNoble_/article/details/101985236" target="_blank" rel="noopener">blog</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//差分数组</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">ll a[MAX_N];</span><br><span class="line">ll ans[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(ll l,ll r,ll v)</span></span>&#123;</span><br><span class="line">	ans[l]+=v;</span><br><span class="line">	ans[r+<span class="number">1</span>]-=v;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">		ll l=a[i],r=a[i+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(l&gt;r) swap(l,r);</span><br><span class="line">		<span class="keyword">if</span>(l!=r)&#123;</span><br><span class="line">			up(<span class="number">1</span>,l<span class="number">-1</span>,r-l);</span><br><span class="line">			up(l,l,r<span class="number">-1</span>);</span><br><span class="line">			up(l+<span class="number">1</span>,r<span class="number">-1</span>,r-l<span class="number">-1</span>);</span><br><span class="line">			up(r,r,l);</span><br><span class="line">			up(r+<span class="number">1</span>,n,r-l);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i!=n)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[i]+=ans[i<span class="number">-1</span>]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]+=ans[i<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴力</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N],p[MAX_N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos[MAX_N]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i]=i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">		pos[a[i]].push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		ans+=<span class="built_in">abs</span>(a[i]-a[i+<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pos[i].size();j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> k=pos[i][j];</span><br><span class="line">			<span class="keyword">if</span>(k&gt;<span class="number">1</span>) ans-=<span class="built_in">abs</span>(i-p[a[k<span class="number">-1</span>]]);</span><br><span class="line">			<span class="keyword">if</span>(k&lt;m) ans-=<span class="built_in">abs</span>(i-p[a[k+<span class="number">1</span>]]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pos[i<span class="number">-1</span>].size();j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> k=pos[i<span class="number">-1</span>][j];</span><br><span class="line">			<span class="keyword">if</span>(k&gt;<span class="number">1</span>&amp;&amp;a[k<span class="number">-1</span>]!=i) ans-=<span class="built_in">abs</span>(<span class="number">1</span>-p[a[k<span class="number">-1</span>]]);</span><br><span class="line">			<span class="keyword">if</span>(k&lt;m&amp;&amp;a[k+<span class="number">1</span>]!=i) ans-=<span class="built_in">abs</span>(<span class="number">1</span>-p[a[k+<span class="number">1</span>]]);</span><br><span class="line">		&#125;</span><br><span class="line">		p[i]=<span class="number">1</span>; p[i<span class="number">-1</span>]=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pos[i].size();j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> k=pos[i][j];</span><br><span class="line">			<span class="keyword">if</span>(k&gt;<span class="number">1</span>) ans+=<span class="built_in">abs</span>(<span class="number">1</span>-p[a[k<span class="number">-1</span>]]);</span><br><span class="line">			<span class="keyword">if</span>(k&lt;m) ans+=<span class="built_in">abs</span>(<span class="number">1</span>-p[a[k+<span class="number">1</span>]]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pos[i<span class="number">-1</span>].size();j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> k=pos[i<span class="number">-1</span>][j];</span><br><span class="line">			<span class="keyword">if</span>(k&gt;<span class="number">1</span>&amp;&amp;a[k<span class="number">-1</span>]!=i) ans+=<span class="built_in">abs</span>(i-p[a[k<span class="number">-1</span>]]);</span><br><span class="line">			<span class="keyword">if</span>(k&lt;m&amp;&amp;a[k+<span class="number">1</span>]!=i) ans+=<span class="built_in">abs</span>(i-p[a[k+<span class="number">1</span>]]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i==n) <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforces.com/contest/1234/problem/F" target="_blank" rel="noopener">F. Yet Another Substring Reverse</a><br>参考：<a href="https://blog.csdn.net/qq_41157137/article/details/102060004" target="_blank" rel="noopener">blog</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">char</span> s[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;(<span class="number">20</span>)]; </span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">	<span class="keyword">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;				<span class="comment">//枚举该字符串的所有集合 </span></span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">int</span> mask=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> v=s[j]-<span class="string">'a'</span>;</span><br><span class="line">			<span class="keyword">if</span>(vis[v]) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">else</span> vis[v]=<span class="number">1</span>;</span><br><span class="line">			mask |=(<span class="number">1</span>&lt;&lt;v);</span><br><span class="line">			cnt++;</span><br><span class="line">			dp[mask]=cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;<span class="number">20</span>);i++)&#123;				<span class="comment">//计算一个集合所有子集的最大值 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">20</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))&#123;</span><br><span class="line">				dp[i]=max(dp[i],dp[i^(<span class="number">1</span>&lt;&lt;j)]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; (<span class="number">1</span>&lt;&lt;<span class="number">20</span>);i++)&#123;			<span class="comment">//求最优解 </span></span><br><span class="line">		ans=max(ans,dp[i]+dp[i^((<span class="number">1</span>&lt;&lt;<span class="number">20</span>)<span class="number">-1</span>)]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Neat Tree</title>
    <url>/2019/09/24/Neat%20Tree/</url>
    <content><![CDATA[<p>题目链接： <a href="https://ac.nowcoder.com/acm/problem/15815?&amp;headNav=acm" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/15815?&amp;headNav=acm</a><br><a id="more"></a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">100003</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line"><span class="keyword">int</span> l[MAX_N];</span><br><span class="line"><span class="keyword">int</span> r[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(sta.size()&amp;&amp;a[sta.top()]&gt;a[i]) sta.pop();             <span class="comment">//注意这里的"&gt;"号不是&gt;=</span></span><br><span class="line">            l[i]=sta.empty()?<span class="number">1</span>:sta.top()+<span class="number">1</span>;</span><br><span class="line">            sta.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(sta.size()) sta.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(sta.size()&amp;&amp;a[sta.top()]&gt;=a[i]) sta.pop();            <span class="comment">//这里是"&gt;="，避免前后两个区间重合。</span></span><br><span class="line">            r[i]=sta.empty()?n:sta.top()<span class="number">-1</span>;</span><br><span class="line">            sta.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(sta.size()) sta.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans-=(ll)a[i]*((ll)(r[i]-i+<span class="number">1</span>)*(ll)(i-l[i]+<span class="number">1</span>)<span class="number">-1</span>);        <span class="comment">//一个[a,b]区间里的集合为b-a+1,1是指为空的时候。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(sta.size()&amp;&amp;a[sta.top()]&lt;a[i]) sta.pop();</span><br><span class="line">            l[i]=sta.empty()?<span class="number">1</span>:sta.top()+<span class="number">1</span>;</span><br><span class="line">            sta.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(sta.size()) sta.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(sta.size()&amp;&amp;a[sta.top()]&lt;=a[i]) sta.pop();</span><br><span class="line">            r[i]=sta.empty()?n:sta.top()<span class="number">-1</span>;</span><br><span class="line">            sta.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(sta.size()) sta.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=(ll)a[i]*((ll)(r[i]-i+<span class="number">1</span>)*(ll)(i-l[i]+<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实可以两次循环就做完了，一次循环就能求出L和R。进栈的时候可以求出L[i]，出栈的时候可以求出sta.top的R;</p>
]]></content>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>Lucas定理</title>
    <url>/2019/10/24/Lucas%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>Lucas定理一句话说就是<br>Lucas(m,n,p) = C$\tbinom{m/p}{n/p}$ * Lucas(m%p,n%p,p)</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problem/P3807" target="_blank" rel="noopener">传送门</a></p>
<p>就是一道Lucas模板题</p>
<p>$C^m_n$ =${n!<em>1/m!</em>1/(n-m)!}$,而$1/m!$的逆元就是$m!$.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll p;</span><br><span class="line">ll a[<span class="number">100000</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span></span>&#123;       <span class="comment">//快速幂</span></span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,ll m)</span></span>&#123;       <span class="comment">//逆元求组合数</span></span><br><span class="line">    <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (a[n]*mod_pow(a[m],p<span class="number">-2</span>,p))%p*mod_pow(a[n-m],p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Lucas</span><span class="params">(ll n,ll m)</span>     <span class="comment">//Lucas定理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> C(n%p,m%p)*Lucas(n/p,m/p)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">        a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++) a[i]=(a[i<span class="number">-1</span>]*i)%p;    <span class="comment">//求i的阶乘.</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Lucas(n+m,m));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[SCOI2010]游戏</title>
    <url>/2019/10/05/SCOI2010-%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>题目链接：<a href="https://ac.nowcoder.com/acm/problem/20566?&amp;headNav=acm" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/20566?&amp;headNav=acm</a><br>题意：给n个装备，每个装备有两个属性，并且最多只能使用一次。求由这些点的属性能最大匹配到的值。<br><a id="more"></a><br>思路：把每个属性看成点，每个装备看成边。然后连接成k个连通块，如果该连通块为树状，则答案只能是k-1；如果连通块为环状，则答案为k。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e8</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[MAXN];      <span class="comment">//记录是否能达到</span></span><br><span class="line"><span class="keyword">int</span> fa[MAXN];       <span class="comment">//记录父节点</span></span><br><span class="line"><span class="keyword">int</span> n;              </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x]==x ? x : fa[x]=fun(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=fun(x);</span><br><span class="line">    <span class="keyword">int</span> b=fun(y);</span><br><span class="line">    <span class="keyword">if</span>(a==b) &#123;</span><br><span class="line">        vis[a]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) swap(a,b);      <span class="comment">//看见有大佬的交换写法有：x^=y^=x^=y;  将a为小，b为大</span></span><br><span class="line">    vis[a]=<span class="number">1</span>;               </span><br><span class="line">    fa[a]=b;                <span class="comment">//将小点的父节点为大点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        unite(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i==n&amp;&amp;vis[i])</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>并查集</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>[SCOI2009]生日礼物</title>
    <url>/2019/09/26/SCOI2009-%E7%94%9F%E6%97%A5%E7%A4%BC%E7%89%A9/</url>
    <content><![CDATA[<p>题目链接： <a href="https://ac.nowcoder.com/acm/problem/20565?&amp;headNav=acm" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/20565?&amp;headNav=acm</a><br><a id="more"></a></p>
<p>思路：先排序，然后该种类没入队的入队，如果全部种类没满且前面出现过这个种类，就更新该种类的坐标；如果全部种类满了就求解当前长度。</p>
<p>代码：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">light</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">light a[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> tt[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(light y,light z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y.x&lt;z.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> xx;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;xx);</span><br><span class="line">            a[++cnt].x=xx;</span><br><span class="line">            a[cnt].type=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=INF;</span><br><span class="line">    <span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tail&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[a[tail].type]==<span class="number">0</span>) sum++;</span><br><span class="line">        vis[a[tail].type]=a[tail].x;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;=tail&amp;&amp;a[head].x!=vis[a[head].type]) head++;</span><br><span class="line">        <span class="keyword">if</span>(sum==k) ans=min(ans,a[tail].x-a[head].x);</span><br><span class="line">        tail++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>NB群友</title>
    <url>/2019/04/27/NB%E7%BE%A4%E5%8F%8B/</url>
    <content><![CDATA[<p>一道出题人出的签到题，结果大部分人没签到。<br>于我而言，是看到数据量很大就慌了，觉得会超时，题面较长也没看下来。<br><a id="more"></a><br>题目链接：<a href="https://ac.nowcoder.com/acm/contest/625/A" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/625/A</a></p>
<p>题意：找出满足$L&lt;=数位积&lt;=R$的数的个数.</p>
<blockquote>
<p>思路：问题转换成求$数位积&lt;=R的个数-数位积&lt;=(L-1)的个数$，题解给的是dfs枚举2∼9每个数字出现的次数，然后再组合数统计一下答案，剪剪枝。<br>题解链接： <a href="https://fshp971.com/2019-scut-contest-easy/" target="_blank" rel="noopener">https://fshp971.com/2019-scut-contest-easy/</a><br>题解给的代码:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=a; i&lt;=b; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PER(i,a,b) for(int i=a; i&gt;=b; --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> DB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxT = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> LL MaxInt = (<span class="number">1L</span>L&lt;&lt;<span class="number">32</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">LL Fac[<span class="number">100</span>], InvFac[<span class="number">100</span>];</span><br><span class="line">LL C[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">LL lim;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(LL now, <span class="keyword">int</span> pt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pt&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        LL ret = <span class="number">1</span>;</span><br><span class="line">        REP(i,<span class="number">2</span>,<span class="number">9</span>) &#123;</span><br><span class="line">            s += cnt[i];</span><br><span class="line">            ret = ret * C[s][cnt[i]] % P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    cnt[pt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(now &lt;= lim) &#123;</span><br><span class="line">        ret = (ret + dfs(now, pt<span class="number">-1</span>)) % P;</span><br><span class="line">        now *= pt, ++cnt[pt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = C[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; i; ++k) C[i][k] = (C[i<span class="number">-1</span>][k] + C[i<span class="number">-1</span>][k<span class="number">-1</span>]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> _; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_--) &#123;</span><br><span class="line">        LL a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</span><br><span class="line">        lim = b;</span><br><span class="line">        LL sb = dfs(<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">        lim = a<span class="number">-1</span>;</span><br><span class="line">        LL sa = dfs(<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">        LL ans = (sb - sa + P) % P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>看到另一篇题解说的是搜索过程枚举每一位数，然后记录一下状态值，剪枝<br>链接： <a href="https://www.cnblogs.com/ymzjj/p/10713187.html" target="_blank" rel="noopener">https://www.cnblogs.com/ymzjj/p/10713187.html</a></p>
<p>AC的代码：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">map</span> &lt; ll, ll&gt; mp;</span><br><span class="line">ll L,R;</span><br><span class="line">ll res;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mp.count(x))&#123;</span><br><span class="line">        <span class="keyword">return</span> mp[x];</span><br><span class="line">    &#125;</span><br><span class="line">    ll temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=i)&#123;</span><br><span class="line">            temp+=dfs(x/i)+<span class="number">1</span>;       <span class="comment">//枚举每一位数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mp[x]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;L,&amp;R);</span><br><span class="line">        res=(dfs(R)-dfs(L<span class="number">-1</span>))%M;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>牛客网</tag>
      </tags>
  </entry>
  <entry>
    <title>Sudoku</title>
    <url>/2019/04/18/Sudoku/</url>
    <content><![CDATA[<p>POJ中有四道数独题，链接如下。<br>难度大致为：2676=2918&lt;3074&lt;3076</p>
<a id="more"></a>
<blockquote>
<p><a href="http://poj.org/problem?id=2676" target="_blank" rel="noopener">http://poj.org/problem?id=2676</a><br><a href="http://poj.org/problem?id=2918" target="_blank" rel="noopener">http://poj.org/problem?id=2918</a><br><a href="http://poj.org/problem?id=3074" target="_blank" rel="noopener">http://poj.org/problem?id=3074</a><br><a href="http://poj.org/problem?id=3076" target="_blank" rel="noopener">http://poj.org/problem?id=3076</a></p>
</blockquote>
<h2 id="首先我们先来讲讲2676和2918这两道最简单的吧。"><a href="#首先我们先来讲讲2676和2918这两道最简单的吧。" class="headerlink" title="首先我们先来讲讲2676和2918这两道最简单的吧。"></a>首先我们先来讲讲2676和2918这两道最简单的吧。</h2><p>想法1：因为是数独题，所以每行每列以及每个小方块的数字是不能重复的。因此我们可以用DFS尝试填数字上去。<br>然后再加一些适当的剪枝就能AC 2676和2918题了。</p>
<p>以下给出2918的AC代码。    <em>  2918和2676只是输出格式不一样。改一下就能AC了。</em><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> tri[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">bool</span> row[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">bool</span> col[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">bool</span> little_tri[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">No</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;		<span class="comment">//判断当前格子是属于哪个小方格的</span></span><br><span class="line">    <span class="keyword">return</span> (i/<span class="number">3</span>)*<span class="number">3</span>+j/<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">9</span>)&#123;				<span class="comment">//出口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> no=No(i,j);</span><br><span class="line">    <span class="keyword">int</span> temp=tri[i][j];</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">if</span>(temp)&#123;				<span class="comment">//如果该格子有数字就直接dfs下一个格子</span></span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">8</span>)&#123;</span><br><span class="line">           flag= dfs(i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">           flag= dfs(i,j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">9</span>;k++)&#123;						<span class="comment">//尝试1~9的数字</span></span><br><span class="line">            <span class="keyword">if</span>(!row[i][k<span class="number">-1</span>]&amp;&amp;!col[j][k<span class="number">-1</span>]&amp;&amp;!little_tri[no][k<span class="number">-1</span>])&#123;       <span class="comment">//前提是该格子允许填入k这个数字</span></span><br><span class="line">            tri[i][j]=k;</span><br><span class="line">            row[i][k<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">            col[j][k<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">            little_tri[no][k<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">8</span>)&#123;</span><br><span class="line">               flag= dfs(i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               flag= dfs(i,j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;								<span class="comment">//如果失败了，则回溯！</span></span><br><span class="line">            tri[i][j]=<span class="number">0</span>;</span><br><span class="line">            row[i][k<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">            col[j][k<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">            little_tri[no][k<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="built_in">memset</span>(tri,<span class="number">0</span>,<span class="keyword">sizeof</span>(tri));</span><br><span class="line">    <span class="built_in">memset</span>(row,<span class="number">0</span>,<span class="keyword">sizeof</span>(row));</span><br><span class="line">    <span class="built_in">memset</span>(col,<span class="number">0</span>,<span class="keyword">sizeof</span>(col));</span><br><span class="line">    <span class="built_in">memset</span>(little_tri,<span class="number">0</span>,<span class="keyword">sizeof</span>(little_tri));</span><br><span class="line">    <span class="keyword">int</span> tep;</span><br><span class="line">    <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">             tri[i][j]=a[j]-<span class="string">'0'</span>;</span><br><span class="line">             tep=tri[i][j];</span><br><span class="line">             no=No(i,j);</span><br><span class="line">            <span class="keyword">if</span>(tep)&#123;</span><br><span class="line">                row[i][tep<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">                col[j][tep<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">                little_tri[no][tep<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Scenario #%d:\n"</span>,cnt++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;tri[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("data.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("data.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="keyword">if</span>(T!=<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>但这个算法是无法通过POJ3074的，因为3074题的空白格子比较多，该方法行不通，需要进一步优化。</strong></p>
<h2 id="现在讲一下POJ3074的思路"><a href="#现在讲一下POJ3074的思路" class="headerlink" title="现在讲一下POJ3074的思路"></a>现在讲一下POJ3074的思路</h2><p>想法2：考虑处理某一行时，对于某个还没有用过的数字，如果该行只有一个可行的空白格子，则将该数字填入该格子。<br>对于列和方块也一样。<br>反之，如果某个格子可填的数字只有一个，也只能将该数字填入该格子。</p>
<h2 id="POJ3076的思路"><a href="#POJ3076的思路" class="headerlink" title="POJ3076的思路"></a>POJ3076的思路</h2><p>想法3：<br>假设有一个只有两个候选数字的格子，如果选择其中一个产生了矛盾，那么就可以确定选择另一个。而对于有五个候选数字的格子，即使其中一个出现了矛盾，依然还有四个候选数字需要尝试。换句话说，选数字少的格子填数字比从左上角开始DFS更加高效.。</p>
<p>由于今晚比较晚了，下次有空补上 3074 和3076的代码。</p>
]]></content>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>JLOI2011不等式组</title>
    <url>/2019/10/15/JLOI2011-%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%BB%84/</url>
    <content><![CDATA[<p>题意：<br>1操作插入不等式，2操作删除第i条不等式，3操作查询当x=k时，求满足条件的不等式数量.<br><a id="more"></a><br><a href="https://ac.nowcoder.com/acm/problem/20127?&amp;headNav=acm" target="_blank" rel="noopener">传送门</a></p>
<p>题解：<br>按a的正负划分情况。<br>1.a&gt;0, x&gt;向上取整的(c-b)/a,并且x满足${[-10^6 , 10^6]}$<br>2.a=0,若b&gt;c则恒成立<br>3.a<0, x<向下取整的的(c-b) a,并且x满足${[-10^6 , 10^6]}$ 然后树状数组维护答案答案即可 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2e8</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> F=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[M];</span><br><span class="line"><span class="keyword">int</span> line[MAXN],li,t[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> a,b,c,n;</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=M) tree[x]+=y,x+=x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) res+=tree[x],x-=x&amp;(-x);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        <span class="keyword">if</span>(temp[<span class="number">0</span>]==<span class="string">'A'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[++li]=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            <span class="keyword">if</span>(a==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(b&gt;c) add(<span class="number">1</span>,<span class="number">1</span>),line[li]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> line[li]=<span class="number">2</span>;</span><br><span class="line">                t[li]=<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                line[li]=min((<span class="keyword">int</span>)max(<span class="built_in">floor</span>((<span class="keyword">double</span>)(c-b)/a+<span class="number">1</span>),-F+<span class="number">1.0</span>),F)+F;</span><br><span class="line">                add(line[li],<span class="number">1</span>);</span><br><span class="line">                t[li]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                line[li]=min((<span class="keyword">int</span>)max(<span class="built_in">ceil</span>((<span class="keyword">double</span>)(c-b)/a<span class="number">-1</span>),-F+<span class="number">1.0</span>),F)+F;</span><br><span class="line">                add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                add(line[li]+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                t[li]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp[<span class="number">0</span>]==<span class="string">'D'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">            <span class="keyword">if</span>(!vis[a])</span><br><span class="line">            &#123;</span><br><span class="line">                vis[a]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(t[a]==<span class="number">1</span>) add(line[a],<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t[a]==<span class="number">0</span>) add(<span class="number">1</span>,<span class="number">-1</span>),add(line[a]+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t[a]==<span class="number">-1</span>&amp;&amp;line[a]==<span class="number">1</span>) add(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum(a+F));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></0,></p>
]]></content>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Sum</title>
    <url>/2019/10/15/Sum/</url>
    <content><![CDATA[<p>题意：<br>考虑维护一个这样的问题：<br>（1） 给出一个数组A，标号为1~n<br>（2） 修改数组中的一个位置。<br>（3） 询问区间[l,r]中所有子集的位运算and之和mod($10^9$+7)。<br><a id="more"></a><br><a href="https://ac.nowcoder.com/acm/problem/" target="_blank" rel="noopener">传送门</a><br>题解：<br>按位建立线段树,每一颗线段树维护每一位从1到n的区间和。<br>第p位的值为a,则贡献为：$2^p$*($2^a$-1);</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> tree[MAX_N&lt;&lt;<span class="number">2</span>][<span class="number">32</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">32</span>];</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) res=res*x%MOD;</span><br><span class="line">        x=x*x%MOD;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     tree[p][t]=(tree[lc(p)][t]+tree[rc(p)][t])%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[p][i]=(a[l]&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lc(p),l,mid);</span><br><span class="line">    build(rc(p),mid+<span class="number">1</span>,r);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">       push_up(p,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> p,<span class="keyword">int</span> l ,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[i]=(cnt[i]+tree[p][i])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid) query(nl,nr,lc(p),l,mid);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;nr) query(nl,nr,rc(p),mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> p,<span class="keyword">int</span> l ,<span class="keyword">int</span> r,<span class="keyword">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        a[l]=k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[p][i]=(a[l]&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid) update(nl,nr,lc(p),l,mid,k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;nr) update(nl,nr,rc(p),mid+<span class="number">1</span>,r,k);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">       push_up(p,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> m; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> b; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            update(x,x,<span class="number">1</span>,<span class="number">1</span>,n,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">            query(l,r,<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">            ll ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=(ans+(((mod_pow(<span class="number">2</span>,cnt[i])<span class="number">-1</span>)%MOD)*(mod_pow(<span class="number">2</span>,i)%MOD))%MOD)%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie树</title>
    <url>/2019/09/20/Trie%E6%A0%91/</url>
    <content><![CDATA[<h1 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h1><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tri[MAX_N][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> color[MAX_N];</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> * a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> alen=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;alen;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tri[p][temp])</span><br><span class="line">        &#123;</span><br><span class="line">            tri[p][temp]=k;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        p=tri[p][temp];</span><br><span class="line">    &#125;</span><br><span class="line">    color[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">char</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> alen=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;alen;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!tri[p][temp])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p=tri[p][temp];</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> color[p]==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t,q;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t,&amp;q);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        Insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">if</span>(Query(s)) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前缀树</tag>
        <tag>字典树</tag>
      </tags>
  </entry>
  <entry>
    <title>VVQ与线段</title>
    <url>/2019/10/15/VVQ%E4%B8%8E%E7%BA%BF%E6%AE%B5/</url>
    <content><![CDATA[<p>题意：求任意两条线段的异或最大值。<br>定义线段的异或值为它们并的长度减他们交的长度<br><a id="more"></a></p>
<p><a href="https://ac.nowcoder.com/acm/problem/15504" target="_blank" rel="noopener">传送门</a><br>题解：有两种情况<br>1：线段a内部包含线段b 贡献：(a.r-a.l)-(b.r-b.l);<br>2.线段a与线段b相交   贡献：(a.r+b.l-b.l-b.r);<br>先根据l进行排序，然后计算贡献即可.</p>
<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn= <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> Max[maxn&lt;&lt;<span class="number">2</span>],Min[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.l&lt;b.l;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.l&lt;b.l;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Max[p]=a[l].l+a[l].r;</span><br><span class="line">        Min[p]=a[l].r-a[l].l;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);</span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    Max[p]=max(Max[p*<span class="number">2</span>],Max[p*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    Min[p]=min(Min[p*<span class="number">2</span>],Min[p*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quary_Max</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;y||r&lt;x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=x&amp;&amp;r&lt;=y)<span class="keyword">return</span> Max[p];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> max(Quary_Max(l,mid,p*<span class="number">2</span>,x,y),Quary_Max(mid+<span class="number">1</span>,r,p*<span class="number">2</span>+<span class="number">1</span>,x,y));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quary_Min</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;y||r&lt;x)<span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=x&amp;&amp;r&lt;=y)<span class="keyword">return</span> Min[root];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> min(Quary_Min(l,mid,root*<span class="number">2</span>,x,y),Quary_Min(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].l,&amp;a[i].r);</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    node tmp;</span><br><span class="line">    tmp.r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp.l=a[i].l;</span><br><span class="line">        l=lower_bound(a+<span class="number">1</span>,a+<span class="number">1</span>+n,tmp)-a; <span class="comment">//找到a[j].l&gt;=a[i].l的第一个j</span></span><br><span class="line">        tmp.l=a[i].r;</span><br><span class="line">        r=upper_bound(a+<span class="number">1</span>,a+<span class="number">1</span>+n,tmp)-a<span class="number">-1</span>; <span class="comment">//找到a[j].l&lt;=a[i].r的最后一个j</span></span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">//这样就找到左端点在线段i范围内的所有线段</span></span><br><span class="line">        ans=max(ans,Quary_Max(<span class="number">1</span>,n,<span class="number">1</span>,l,r)-a[i].r-a[i].l);</span><br><span class="line">        ans=max(ans,a[i].r-a[i].l-Quary_Min(<span class="number">1</span>,n,<span class="number">1</span>,l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 10</span></span><br><span class="line"><span class="comment">4 11</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3 </span></span><br><span class="line"><span class="comment">10 100 </span></span><br><span class="line"><span class="comment">1 50 </span></span><br><span class="line"><span class="comment">50 100</span></span><br><span class="line"><span class="comment">99</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>URLs</title>
    <url>/2019/04/25/URLs/</url>
    <content><![CDATA[<p>题目链接: <a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=243" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=243</a><br><a id="more"></a><br>题意: 给一个URL 找出URL的protocol、host、port、path，port和path可能不给出(即输出<default>)。一道水题，但是一开始想法没有AC，后来改了改AC了…浪费了挺多时间</default></p>
<p>AC的代码:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">string</span> s;</span><br><span class="line">   <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">   <span class="built_in">string</span> protocal,host,port=<span class="string">"&lt;default&gt;"</span>,path=<span class="string">"&lt;default&gt;"</span>;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   i=s.find(<span class="string">"://"</span>);</span><br><span class="line">   protocal=s.substr(<span class="number">0</span>,i);</span><br><span class="line">   s.erase(<span class="number">0</span>,i+<span class="number">3</span>);</span><br><span class="line">   i=s.find(<span class="string">"/"</span>);</span><br><span class="line">   <span class="keyword">if</span>(i!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        host=s.substr(<span class="number">0</span>,i);</span><br><span class="line">        path=s.substr(i+<span class="number">1</span>,s.size());</span><br><span class="line">        s.erase(i,s.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        host=s.substr(<span class="number">0</span>,s.size());</span><br><span class="line">    &#125;</span><br><span class="line">   i=s.find(<span class="string">":"</span>);</span><br><span class="line">   <span class="keyword">if</span>(i!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">    host=s.substr(<span class="number">0</span>,i);</span><br><span class="line">    s.erase(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">    port=s;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"URL #"</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Protocol = "</span>&lt;&lt;protocal&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Host     = "</span>&lt;&lt;host&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Port     = "</span>&lt;&lt;port&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Path     = "</span>&lt;&lt;path&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>WA的代码，具体原因我也不知道，感觉自己思路是对的…<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">string</span> s;</span><br><span class="line">   <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">   <span class="built_in">string</span> protocal,host,port=<span class="string">"&lt;default&gt;"</span>,path=<span class="string">"&lt;default&gt;"</span>;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   i=s.find(<span class="string">"://"</span>);</span><br><span class="line">   protocal=s.substr(<span class="number">0</span>,i);</span><br><span class="line">   s.erase(<span class="number">0</span>,i+<span class="number">3</span>);</span><br><span class="line">   i=s.find(<span class="string">":"</span>);</span><br><span class="line">   <span class="keyword">if</span>(i!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">    host=s.substr(<span class="number">0</span>,i);</span><br><span class="line">    s.erase(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">    i=s.find(<span class="string">"/"</span>);</span><br><span class="line">    <span class="keyword">if</span>(i!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        port=s.substr(<span class="number">0</span>,i);</span><br><span class="line">        s.erase(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">        path=s.substr(<span class="number">0</span>,s.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        port=s.substr(<span class="number">0</span>,s.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">    i=s.find(<span class="string">"/"</span>);</span><br><span class="line">    <span class="keyword">if</span>(i!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        host=s.substr(<span class="number">0</span>,i);</span><br><span class="line">        s.erase(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">        path=s.substr(<span class="number">0</span>,s.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        host=s.substr(<span class="number">0</span>,s.size());</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"URL #"</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Protocol = "</span>&lt;&lt;protocal&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Host     = "</span>&lt;&lt;host&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Port     = "</span>&lt;&lt;port&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Path     = "</span>&lt;&lt;path&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>Triangle</title>
    <url>/2019/04/20/Triangle/</url>
    <content><![CDATA[<p>2019中山大学程序设计竞赛（重现赛）<br>虽然是签到题，但是自己没有AC…<br><a id="more"></a></p>
<blockquote>
<h1 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a>Triangle</h1><p>Time Limit: 4000/2000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)</p>
<p>Problem Description<br>After Xiaoteng took a math class, he learned a lot of different shapes, but Xiaoteng’s favorite triangle is because he likes stable shapes, just like his style.<br>After the Xiaoxun knew it, he wanted to give a triangle as a gift to Xiaoteng. He originally planned to do one, but he was too tired. So he decided to bring some wooden sticks to Xiaoteng and let Xiaoteng make a triangle himself.<br>One day, Xiaoxun brought n sticks to Xiaoteng. Xiaoteng wanted to try to use three of them to form a triangle, but the number is too much, Xiaoteng stunned, so he can only ask for your help.</p>
<p>Input<br>There are mutiple test cases.<br>Each case starts with a line containing a integer  $(1≤n≤5×10^6)$  which represent the number of sticks and this is followed by n positive intergers(smaller than $2^{31}−1$)separated by spaces..</p>
<p>Output<br>YES or NO for each case mean Xiaoteng can or can’t use three of sticks to form a triangle.</p>
<p>Sample Input<br>4<br>1 2 3 4</p>
<p>Sample Output<br>YES</p>
</blockquote>
<p>题意： 给你n个数，问是否能从给的n个数从中组成一个三角形。<br>题解：如果给的数成斐波那契数列，则不能构成三角形，且因为给的数是在$2^{32}-1$范围内，第50项斐波那契数为12586269025已经超过这个范围，即如果给了超过50个数，则必然能构成三角形。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> vec[<span class="number">5000000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;c+b)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;vec[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        sort(vec,vec+n,compare);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;i++)&#123;</span><br><span class="line">            flag=fun(vec[i],vec[i+<span class="number">1</span>],vec[i+<span class="number">2</span>]);</span><br><span class="line">             <span class="keyword">if</span>(flag)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> flag=<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当时做并没有想到斐波那契数列….毕竟菜…<br>如果不通过斐波那契数列来进行大判断会超时，然后我想换堆排序进行操作，用优先队列储存(实现了堆排序),结果卡内存…</p>
]]></content>
      <tags>
        <tag>斐波那契数列</tag>
      </tags>
  </entry>
  <entry>
    <title>Some tips for input</title>
    <url>/2019/04/15/Some-tips-for-input/</url>
    <content><![CDATA[<h1 id="Some-tips-for-input"><a href="#Some-tips-for-input" class="headerlink" title="Some tips for input"></a>Some tips for input</h1><a id="more"></a>
<h1 id="使用scanf和printf函数"><a href="#使用scanf和printf函数" class="headerlink" title="使用scanf和printf函数"></a>使用scanf和printf函数</h1><h2 id="在C-程序中使用scanf-和printf需要“cstdio”头文件"><a href="#在C-程序中使用scanf-和printf需要“cstdio”头文件" class="headerlink" title="在C++程序中使用scanf 和printf需要“cstdio”头文件."></a>在C++程序中使用scanf 和printf需要“cstdio”头文件.</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//case 1 输入输出整数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;        </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 2  输入输出浮点数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf"</span>,T);  <span class="comment">//默认输出小数点后六位</span></span><br><span class="line">    <span class="comment">//printf（"%.n",T）;  输出小数点后n位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case 3 按格式输入输出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入需要转换的日期："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d/%d/%d"</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line">    <span class="comment">// %d中间的/是定义好的分隔符，用户输入的时候会以-为分隔符将值分别赋值给变量 year、month、day</span></span><br><span class="line">    <span class="comment">// 注：用户输入数据的时候必须按照这种格式来写，否则会出现意想不到的错误</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"转换后的日期格式为：%d/%d/%d \n"</span>, year, month, day);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于scanf函数来说，空格、TAB、回车都是无关紧要的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// case 4 输入输出string类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    a.resize(<span class="number">100</span>);<span class="comment">//说明string的长度</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;a[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,a.c_str());<span class="comment">//如果写成printf("%s",a);会乱码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//个人比较建议用cin来输入string类型；</span></span><br></pre></td></tr></table></figure>
<h1 id="使用cin-和-cout-函数"><a href="#使用cin-和-cout-函数" class="headerlink" title="使用cin 和 cout 函数"></a>使用cin 和 cout 函数</h1><hr>
<pre><code>C++中可以使用流简化输入输出操作。
标准输入输出流在头文件iostream中定义，存在于名称空间std中。如果使用了using namespace std语句，则可以直接使用。
</code></pre><hr>
<p> cin可以连续从键盘读取想要的数据，以空格、tab或换行作为分隔符<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// case 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">程序输入<span class="string">"Hello World"</span>，将会在下一行输出<span class="string">"Hello World"</span>；</span><br><span class="line">其中输入的<span class="string">"Hello"</span>赋值给a，<span class="string">"World"</span>赋值给b，中间的空格就是分隔符。</span><br></pre></td></tr></table></figure></p>
<p> 虽然使用cin很方便，但是它比scanf慢。在某些题上，可能会因为这个cin而吃亏。</p>
<p> 解决方法：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main函数里添加</span></span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<p> 此时的cin就会比scanf快，那么请问还有没有更快的呢？<br> 答案是肯定的！ 在看题解的时候，我看见有大佬是这样写的：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = getchar(); <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>; c = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="comment">//cin&gt;&gt;a&gt;&gt;b;</span></span><br><span class="line">    a=read();</span><br><span class="line">    b=read();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<pre><code>输入速度大致：read() &lt; 加了ios::sync_with_stdio(false)的cin &lt; scanf() &lt; cin ;
</code></pre><hr>
<h1 id="使用文件输入输出"><a href="#使用文件输入输出" class="headerlink" title="使用文件输入输出"></a>使用文件输入输出</h1><h2 id="先说个最简单的吧—重定向"><a href="#先说个最简单的吧—重定向" class="headerlink" title="先说个最简单的吧—重定向"></a>先说个最简单的吧—重定向</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只要在main()函数里加入这两句话就可以了。(用于测试，如果比赛采用标准输入输出，就必须在测试完后删除掉。)</span></span><br><span class="line">freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span>  a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件data.in预先留有数据</span></span><br><span class="line"><span class="comment">//运行完之后，data.out就会保存程序输出的数据</span></span><br></pre></td></tr></table></figure>
<h2 id="如果比赛要求用文件输入输出，但是禁止用重定向的方式————fopen"><a href="#如果比赛要求用文件输入输出，但是禁止用重定向的方式————fopen" class="headerlink" title="如果比赛要求用文件输入输出，但是禁止用重定向的方式————fopen"></a>如果比赛要求用文件输入输出，但是禁止用重定向的方式————fopen</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE*fin,*fout;</span><br><span class="line">    fin=fopen(<span class="string">"data.in"</span>,<span class="string">"rb"</span>);</span><br><span class="line">    fout=fopen(<span class="string">"data.out"</span>,<span class="string">"wb"</span>);</span><br><span class="line">    <span class="keyword">int</span>  a,b;</span><br><span class="line">    <span class="built_in">fscanf</span>(fin,<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">fprintf</span>(fout,<span class="string">"%d %d"</span>,a,b);</span><br><span class="line">    fclose(fin);</span><br><span class="line">    fclose(fout);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不能用重定向方式读写数据，应使用fopen和fscanf/fprintf进行输入输出.</span></span><br></pre></td></tr></table></figure>
<hr>
<pre><code>重定向的方法写起来简单，但是不能同时读写文件和标准输入输出;
fopen写法比较繁琐，但可以改成读写标准输入输出，只需&quot;fin=stdin;fout=stdout;&quot;，不调用fopen和fclose;
</code></pre><hr>
<h1 id="计时函数clock"><a href="#计时函数clock" class="headerlink" title="计时函数clock()"></a>计时函数clock()</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Time used=%.2f\n"</span>,(<span class="keyword">double</span>)clock()/CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>输入输出</tag>
      </tags>
  </entry>
  <entry>
    <title>Valentine&#39;s Day</title>
    <url>/2019/09/29/Valentine-s-Day/</url>
    <content><![CDATA[<p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6693" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6693</a></p>
<p>题意：给n个礼物让女朋友开心的概率，女朋友只能开心一次。求送多少件礼物让女朋友开心的概率最大？<br><a id="more"></a></p>
<p>思路：贪心去概率大的礼物，对于第i件物品，该物品开心的概率为P[i],能让女朋友开心的概率为win<em>（1-P[i]）+lose</em>P[i];然后就遍历所有礼物，当win变小的时候可以提前退出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">100003</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> P[<span class="number">10000</span>+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;<span class="keyword">return</span> a&gt;b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;P[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sort(P+<span class="number">1</span>,P+<span class="number">1</span>+n,cmp);</span><br><span class="line">        <span class="keyword">double</span> win=P[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">double</span> lose=<span class="number">1</span>-P[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> temp=P[i]*lose+(<span class="number">1</span>-P[i])*win;</span><br><span class="line">             <span class="keyword">if</span>(temp&lt;=win) <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">else</span> </span><br><span class="line">             &#123;</span><br><span class="line">                 win=temp;</span><br><span class="line">                lose*=<span class="number">1</span>-P[i];</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.12lf\n"</span>,win);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>Word-Search Wonder</title>
    <url>/2019/04/27/Word-Search-Wonder/</url>
    <content><![CDATA[<p>题目链接: <a href="http://poj.org/problem?id=1501" target="_blank" rel="noopener">http://poj.org/problem?id=1501</a><br><a id="more"></a></p>
<p>题意：给一个字符矩阵，再给“单词”，在矩阵中找到单词，输出单词首元素的坐标和末元素的坐标。</p>
<blockquote>
<p>思路：是一道深搜，需要注意的是深搜的方向由始至终只能往一个方向，水平，<br>垂直还有斜线，而其他只需要理解好题目套模板即可做出，还有就是本题不需要<br>标记数组，因为深搜方向只有一个，途中不会碰到已访问的点。</p>
</blockquote>
<p>下面是AC代码:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> mat[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">int</span> first_x,first_y,last_x,last_y;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> i,<span class="keyword">int</span> dx,<span class="keyword">int</span> dy)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i]==<span class="string">'\0'</span>)&#123;</span><br><span class="line">        flag=<span class="literal">true</span>;</span><br><span class="line">        last_x=dx;</span><br><span class="line">        last_y=dy;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> nx=<span class="number">2</span>*dx-x,ny=<span class="number">2</span>*dy-y;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>&lt;nx&amp;&amp;nx&lt;=n&amp;&amp;<span class="number">0</span>&lt;ny&amp;&amp;ny&lt;=n&amp;&amp;mat[nx][ny]==a[i])&#123;</span><br><span class="line">        dfs(dx,dy,i+<span class="number">1</span>,nx,ny);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;mat[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[<span class="number">0</span>]==mat[i][j]&amp;&amp;!flag)&#123;</span><br><span class="line">                    <span class="comment">//dfs(i,j,1);</span></span><br><span class="line">                    first_x=i;first_y=j;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> dx=<span class="number">-1</span>;dx&lt;=<span class="number">1</span>;dx++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> dy=<span class="number">-1</span>;dy&lt;=<span class="number">1</span>;dy++)&#123;</span><br><span class="line">                            <span class="keyword">int</span> nx=i+dx,ny=j+dy;</span><br><span class="line">                            <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="string">'\0'</span>)&#123;</span><br><span class="line">                                flag=<span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(mat[nx][ny]==a[<span class="number">1</span>]&amp;&amp;!flag)&#123;</span><br><span class="line">                                dfs(i,j,<span class="number">2</span>,nx,ny);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d,%d %d,%d\n"</span>,first_x,first_y,last_x,last_y);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Not found\n"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>小数化分数</title>
    <url>/2019/04/21/%E5%B0%8F%E6%95%B0%E5%8C%96%E5%88%86%E6%95%B0/</url>
    <content><![CDATA[<p>今天回顾了一下以前的题，小数化分数。<br><a id="more"></a><br>题目链接： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1717" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1717</a><br>思路：首先要知道无限循环小数分数形式的构造方法：分子为最小循环节，分<br>母为分子对应位数的每个数都化成 9， 如已知无限循环小数：0.4747……以 47<br>为循环节，那么这个小数的分数形式就是 47/99，题中，我们将小数的有限部分<br>和无限循环部分分开处理，得到两个分数，再相加化简，所得即为所求。<br>以下是AC代码:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">include&lt;bits/stdc++.h&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">ll s1,s2,n,m;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    s1=s2=n=m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i]!=<span class="string">'('</span>&amp;&amp;i&lt;s.length())&#123;</span><br><span class="line">        s1=s1*<span class="number">10</span>+s[i]<span class="number">-48</span>;</span><br><span class="line">        n++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">while</span>(s[i]!=<span class="string">')'</span>&amp;&amp;i&lt;s.length())&#123;</span><br><span class="line">        s2=s2*<span class="number">10</span>+s[i]<span class="number">-48</span>;</span><br><span class="line">        i++;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m)&#123;</span><br><span class="line">        s2=s2+(<span class="built_in">pow</span>(<span class="number">10.0</span>,m/<span class="number">1.0</span>)<span class="number">-1</span>)*s1;</span><br><span class="line">        s1=<span class="built_in">pow</span>(<span class="number">10.0</span>,n/<span class="number">1.0</span>)*(<span class="built_in">pow</span>(<span class="number">10</span>,m/<span class="number">1.0</span>)<span class="number">-1</span>);</span><br><span class="line">        ll k=gcd(s2,s1);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s2/k&lt;&lt;<span class="string">"/"</span>&lt;&lt;s1/k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s2=<span class="built_in">pow</span>(<span class="number">10.0</span>,n/<span class="number">1.0</span>);</span><br><span class="line">        ll k=gcd(s1,s2);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s1/k&lt;&lt;<span class="string">"/"</span>&lt;&lt;s2/k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">    <span class="keyword">while</span>(N--)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>找出直系亲属</title>
    <url>/2019/04/26/%E6%89%BE%E5%87%BA%E7%9B%B4%E7%B3%BB%E4%BA%B2%E5%B1%9E/</url>
    <content><![CDATA[<p>一道水题…数据量较小，很多方法都能做。<br><a id="more"></a><br>我用的是并查集。<br>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3786" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=3786</a><br>题意：给n个关系你，然后询问m个问题，问题就是问你两个人是否为直系亲属，是就输出关系，不是就输出-。题意明了<br>思路：用并查集来表示这个亲属图，以孩子作为根。两个人是否有关系就是一个点在找根的路径上是否会遇见另一个点，相遇就有，不相遇就是没有关系。<br>以下是AC代码:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> par[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">4</span>],b[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> one,two;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x!=y&amp;&amp;x!=par[x])&#123;</span><br><span class="line">        res++;</span><br><span class="line">        x=par[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[j]!=<span class="string">'-'</span>)&#123;</span><br><span class="line">            par[(<span class="keyword">int</span>)a[j]-<span class="string">'A'</span>]=(<span class="keyword">int</span>)a[<span class="number">0</span>]-<span class="string">'A'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,b);</span><br><span class="line">    <span class="keyword">int</span> res=find((<span class="keyword">int</span>)b[<span class="number">0</span>]-<span class="string">'A'</span>,(<span class="keyword">int</span>)b[<span class="number">1</span>]-<span class="string">'A'</span>);</span><br><span class="line">    <span class="keyword">if</span>(res)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(res)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">"parent\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">printf</span>(<span class="string">"grandparent\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res<span class="number">-2</span>;i++)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"great-"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"grandparent\n"</span>); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        res=find((<span class="keyword">int</span>)b[<span class="number">1</span>]-<span class="string">'A'</span>,(<span class="keyword">int</span>)b[<span class="number">0</span>]-<span class="string">'A'</span>);</span><br><span class="line">        <span class="keyword">switch</span>(res)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">printf</span>(<span class="string">"-\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">"child\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">printf</span>(<span class="string">"grandchild\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res<span class="number">-2</span>;i++)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"great-"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"grandchild\n"</span>); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M)!=EOF&amp;&amp;(M||N))&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>最大连续子序列</title>
    <url>/2019/04/26/%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>动态规划入门题…<br><a id="more"></a><br>题目链接： <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1231" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1231</a><br>题意： 给一个整数序列，求出这个序列的最大连续子序列，并输出它的开头元素和末尾元素，如果最大连续子序列小于0，则默认最大连续子序列为0，并输出序列首尾元素。<br>想法有很多，分享一下动态规划做法。<br>AC代码：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first=<span class="number">0</span>,last=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        dp[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    res=dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line">        <span class="comment">//dp[i]=max(dp[i-1]+a[i],a[i]);</span></span><br><span class="line">        <span class="comment">//res=max(dp[i],res);</span></span><br><span class="line">        <span class="keyword">if</span>(dp[i<span class="number">-1</span>]+a[i]&lt;a[i])&#123;</span><br><span class="line">            dp[i]=a[i];</span><br><span class="line">            temp=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dp[i]=dp[i<span class="number">-1</span>]+a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res&lt;dp[i])&#123;</span><br><span class="line">            res=dp[i];</span><br><span class="line">            first=temp;</span><br><span class="line">            last=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        first=<span class="number">0</span>;</span><br><span class="line">        last=k<span class="number">-1</span>;</span><br><span class="line">        res=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,res,a[first],a[last]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k)!=EOF&amp;&amp;k)&#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>六学家的困惑</title>
    <url>/2019/04/17/%E5%85%AD%E5%AD%A6%E5%AE%B6%E7%9A%84%E5%9B%B0%E6%83%91/</url>
    <content><![CDATA[<blockquote>
<p>链接：<a href="https://ac.nowcoder.com/acm/contest/625/C" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/625/C</a><br>来源：牛客网<br><a id="more"></a><br><strong>题意：给你两个数串，只能从两个数串的头和尾取数，然后请你输出这两个数串能组成的最大的数串….<br>一道水题，当时并没有做出来，很难受，而且当时思路很模糊，是记录数串下标来输出，结果测试用例对了，但是不能AC，不知道哪里错了，看了别人的代码后，恍然大悟，痛感自己实力不足！！！</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="keyword">int</span> T,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> s[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s[<span class="number">0</span>]&gt;&gt;s[<span class="number">2</span>];</span><br><span class="line">        s[<span class="number">1</span>] = s[<span class="number">0</span>];</span><br><span class="line">        s[<span class="number">3</span>] = s[<span class="number">2</span>];</span><br><span class="line">        reverse(s[<span class="number">1</span>].begin(),s[<span class="number">1</span>].end());</span><br><span class="line">        reverse(s[<span class="number">3</span>].begin(),s[<span class="number">3</span>].end());</span><br><span class="line">        <span class="keyword">int</span> n = s[<span class="number">0</span>].size()+s[<span class="number">2</span>].size();</span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            <span class="keyword">int</span> id =<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">                <span class="keyword">if</span>(s[i]&gt;s[id]) id = i;</span><br><span class="line">            ans+=s[id][<span class="number">0</span>];</span><br><span class="line">            s[id].erase(s[id].begin());</span><br><span class="line">            s[id^<span class="number">1</span>].erase(s[id^<span class="number">1</span>].end()<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,++cnt);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>在字符串上面吃了好多次亏了，不行，我要准备写一篇关于字符串的blog才行，不能再在这上面吃亏了！！！</strong></p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈STL</title>
    <url>/2019/04/18/%E6%B5%85%E8%B0%88STL/</url>
    <content><![CDATA[<p>今天浅谈一下下STL。<br>STL是指C++的标准模板库(Standard Template Library)。一个既好用又复杂的library。<br><a id="more"></a></p>
<h1 id="不定长数组：vector"><a href="#不定长数组：vector" class="headerlink" title="不定长数组：vector"></a>不定长数组：vector</h1><p> <strong>需要添加头文件 #include<vector><br>  vector是一个模板类，需要用vector<int>a或者vector<double>b这样的方式来声明一个vector。<br>  我个人觉得vector就像一个数组，但却比数组方便。</double></int></vector></strong></p>
<h2 id="vector的基本操作"><a href="#vector的基本操作" class="headerlink" title="vector的基本操作"></a>vector的基本操作</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">数组有的基本操作，<span class="built_in">vector</span>都有...</span><br><span class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"> a.back();<span class="comment">//返回a的最后一个元素</span></span><br><span class="line"> a.front();<span class="comment">//返回a的第一个元素</span></span><br><span class="line"> a.clear();<span class="comment">//清空a中的元素</span></span><br><span class="line"> a.empty();<span class="comment">//判断a是否为空，空则返回ture,不空则返回false</span></span><br><span class="line"> a.pop_back();<span class="comment">//删除a向量的最后一个元素</span></span><br><span class="line"> a.erase(index)<span class="comment">//删除下标index的元素</span></span><br><span class="line"> a.erase(a.begin()+<span class="number">1</span>,a.begin()+<span class="number">3</span>);</span><br><span class="line"> <span class="comment">//删除区间 [a.begin()+1,a.begin()+3) 的数，STL里面大多数都是采用左闭右开的形式.</span></span><br><span class="line"> a.push_back(n);<span class="comment">//在a的最后一个向量后插入一个元素，其值为n</span></span><br><span class="line"> <span class="built_in">vector</span>也有insert函数，跟<span class="built_in">string</span>差不多在此不再赘述了，详情请翻看[Some tips <span class="keyword">for</span> String](https:<span class="comment">//ihopezero.github.io/2019/04/17/Some-tips-for-String/).</span></span><br><span class="line"> a.size();<span class="comment">//返回a中元素的个数</span></span><br><span class="line"> a.capacity();<span class="comment">//返回a的空间大小</span></span><br><span class="line"> a.resize();<span class="comment">//重新设置a的大小</span></span><br><span class="line"> a.find(n);<span class="comment">//返回n出现的下标，类似string的find()</span></span><br></pre></td></tr></table></figure>
<h1 id="集合：set"><a href="#集合：set" class="headerlink" title="集合：set"></a>集合：set</h1><p><strong>需要添加头文件 “set “,set中的元素已从小到大排好序了，set是用二叉搜索树维护的集合容器，效率很高O（log(n)）</strong></p>
<h2 id="set的基本操作"><a href="#set的基本操作" class="headerlink" title="set的基本操作"></a>set的基本操作</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line">s.insert(<span class="number">1</span>);</span><br><span class="line">s.insert(<span class="number">3</span>);</span><br><span class="line">s.insert(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//查找元素</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator ite;<span class="comment">//iterator的意思是迭代器，是STL中的重要概念，类似指针.</span></span><br><span class="line">ite=s.find(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(ite==s.end())<span class="built_in">puts</span>(<span class="string">"not found"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"found"</span>); <span class="comment">//输出 found</span></span><br><span class="line"><span class="comment">//其他的查找元素方法</span></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">s.erase(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(s.count(<span class="number">3</span>)!=<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"found"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"not found"</span>); <span class="comment">//输出not found</span></span><br><span class="line"><span class="comment">//判断集合是否为空</span></span><br><span class="line">s.empty();</span><br><span class="line"><span class="comment">//清空集合的元素</span></span><br><span class="line">s.clear();</span><br><span class="line"><span class="comment">//遍历所有元素</span></span><br><span class="line"><span class="keyword">for</span>(ite=s.begin();ite!=s.end();ite++)&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;*ite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h1><p><strong>需要添加头文件 “map”，map也是用二叉搜索树维护的集合容器，效率很高O（log(n)）</strong><br><strong>map就是从key到value的映射，因为重载了[ ]运算符,map像是数组的”高级版”</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明（int为key，const char*为value）</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">const</span> <span class="keyword">char</span>*&gt;m;</span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line">m.insert(make_pair(<span class="number">1</span>,<span class="string">"ONE"</span>));</span><br><span class="line">m.insert(make_pair(<span class="number">10</span>,<span class="string">"TEN"</span>));</span><br><span class="line">m[<span class="number">100</span>]=<span class="string">"HUNDRED"</span>;</span><br><span class="line"><span class="comment">//查找元素</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">const</span> <span class="keyword">char</span>*&gt;::iterator ite;</span><br><span class="line">ite=m.find(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">puts</span>(ite-&gt;second); <span class="comment">//(输出)ONE</span></span><br><span class="line">ite=m.find(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(ite==m.end())<span class="built_in">puts</span>(<span class="string">"not found"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(ite-&gt;second);</span><br><span class="line"><span class="built_in">puts</span>(m[<span class="number">10</span>]);</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">m.erase(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//遍历一遍所有元素</span></span><br><span class="line"><span class="keyword">for</span>(ite=m.begin();ite!=m.end();ite++)&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%d: %s\n"</span>,ite-&gt;first,ite-&gt;second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://bmob-cdn-24907.b0.upaiyun.com/2019/04/19/d8d17cef4048416c8008bcc859ca5060.png" alt></p>
<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p><strong>需要添加头文件 “stack”, 一种“后进先出”的数据结构</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line">S.push(<span class="number">1</span>);</span><br><span class="line">S.push(<span class="number">3</span>);</span><br><span class="line">S.push(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S.size() &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出栈元素的数量</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S.top() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出栈顶元素（不删除）</span></span><br><span class="line">S.pop();<span class="comment">//删除栈顶元素</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S.top() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">S.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S.top() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">S.push(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">S.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; S.top() &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://bmob-cdn-24907.b0.upaiyun.com/2019/04/19/38493044408ee2de8020e273c8f93c63.png" alt></p>
<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p><strong>需要添加头文件 “queue”, 一种“先进先出”的数据结构</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line">   <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">   <span class="comment">//入队</span></span><br><span class="line">   Q.push(<span class="number">1</span>);</span><br><span class="line">   Q.push(<span class="number">3</span>);</span><br><span class="line">   Q.push(<span class="number">5</span>);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; Q.size() &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出队列元素的数量</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; Q.front() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出对首元素（不删除）</span></span><br><span class="line">   Q.pop();<span class="comment">//删除队首元素</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; Q.front() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   Q.pop();</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; Q.front() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   Q.push(<span class="number">5</span>);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; Q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   Q.pop();</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; Q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p>
<p>  <img src="http://bmob-cdn-24907.b0.upaiyun.com/2019/04/19/38493044408ee2de8020e273c8f93c63.png" alt></p>
<h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p><strong>STL的优先队列也在“queue”头文件里，是一个“越小的整数优先级越低的优先队列”</strong><br><strong>出队的方法由front()变为top()，且出队元素不是最先进队的元素</strong><br><strong>优先队列是可以理解为实现了堆的数据结构，O（logn）</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//声明</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; pq;</span><br></pre></td></tr></table></figure></p>
<p><strong>STL也提供了“越小的整数优先级越大的优先队列”</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//声明</span></span><br><span class="line"> priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; pq;</span><br><span class="line"> pq.push(<span class="number">3</span>);</span><br><span class="line"> pq.push(<span class="number">5</span>);</span><br><span class="line"> pq.push(<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pq.top());</span><br><span class="line">     pq.pop();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p><strong>在“algorithm”里头文件</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lower_bound返回值一般是&gt;= 给定value的iterator</span></span><br><span class="line"><span class="keyword">int</span> a[MAX];</span><br><span class="line"><span class="keyword">int</span> t=lower_bound(a.begin(),a.end(),x)-a<span class="comment">//返回的是x的下标，如果没有找到就返回比x小的最大的数的下标，这里查找的范围为[a.begin(),a.end()），又是左闭右开的区间....</span></span><br><span class="line"><span class="comment">//upper_bound返回值则是 &gt; 给定value的iterator，语法跟lower_bound类似</span></span><br></pre></td></tr></table></figure></p>
<h1 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h1><p><strong>sort可以对任意对象排序，即使是自己定义的struct，不过要加判断方法,在“algorithm”头文件里</strong><br><strong>时间复杂度是O（logn）</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[MAX];</span><br><span class="line">sort(a,a+n);<span class="comment">//对前n个元素进行升序排序</span></span><br><span class="line"></span><br><span class="line">sort（start，end，排序方法)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">complare</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     sort(a,a+<span class="number">10</span>,complare);<span class="comment">//在这里就不需要对complare函数传入参数了。这是规则</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">9</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span> <span class="number">5</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<h1 id="unique函数"><a href="#unique函数" class="headerlink" title="unique函数"></a>unique函数</h1><p><strong>一个可以删除有序数组中的重复元素,在“algorithm”头文件里</strong><br><strong>unique的作用是“去掉”容器中相邻元素的重复元素（不一定要求数组有序），它会把重复的元素添加到容器末尾（所以数组大小并没有改变），而返回值是去重之后的尾地址，</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">unique</span><span class="params">(iterator it_1,iterator it_2)</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">unique</span><span class="params">(iterator it_1,iterator it_2,<span class="keyword">bool</span> MyFunc)</span></span>;</span><br><span class="line"><span class="comment">//第三个参数是指自定义两个元素相等的规则，类似sort函数</span></span><br><span class="line">如果想真实删除重复元素可以在调用完unique函数之后，调用erase(it_2,a.end());进行删除</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    a.push_back(<span class="number">1</span>);</span><br><span class="line">    a.push_back(<span class="number">1</span>);</span><br><span class="line">    a.push_back(<span class="number">13</span>);</span><br><span class="line">    a.push_back(<span class="number">13</span>);</span><br><span class="line">    a.push_back(<span class="number">5</span>);</span><br><span class="line">    a.push_back(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it_1 = a.begin();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it_2 = a.end();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator new_end;</span><br><span class="line">    sort(it_1,it_2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.size(); i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    new_end = unique(it_1,it_2); <span class="comment">//注意unique的返回值</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"调用unique()的 a : "</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.size(); i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    a.erase(new_end,it_2);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"删除重复元素后的 a : "</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a.size(); i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://bmob-cdn-24907.b0.upaiyun.com/2019/04/19/72324737405c8cfd80572a6141e7b503.png" alt></p>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><p><strong>逆转元素</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">reverse(start,end)</span><br><span class="line">reverse_copy(start,end,b)<span class="comment">//将逆转后的元素存入b数组中</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/2019/08/18/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(right&lt;=left) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i=left; <span class="keyword">int</span> j=right;</span><br><span class="line">    <span class="keyword">int</span> key=arr[(i+j)/<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[i]&lt;key)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(i==right)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(arr[j]&gt;key)&#123;</span><br><span class="line">            j--;</span><br><span class="line">            <span class="keyword">if</span>(j==left)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=j)&#123;</span><br><span class="line">            swap(arr[i],arr[j]);</span><br><span class="line">            i++;j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    QuickSort(arr,left,j);</span><br><span class="line">    QuickSort(arr,i,right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=t) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(s+t)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    mergesort(arr,s,mid,temp);</span><br><span class="line">    mergesort(arr,mid+<span class="number">1</span>,t,temp);</span><br><span class="line">    <span class="keyword">int</span> i=s; <span class="keyword">int</span> j=mid+<span class="number">1</span>; <span class="keyword">int</span> k=s;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;=arr[j]) temp[k++]=arr[i++];</span><br><span class="line">        <span class="keyword">else</span> temp[k++]=arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) temp[k++]=arr[i]++;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=t) temp[k++]=arr[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=s;l&lt;=t;l++) arr[l]=temp[l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>匈牙利算法</title>
    <url>/2019/04/23/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>今天分享的是匈牙利算法…<br><a id="more"></a><br>匈牙利算法是由匈牙利数学家Edmonds于1965年提出，因而得名。匈牙利算法是基于Hall定理中充分性证明的思想，它是部图匹配最常见的算法，该算法的核心就是寻找增广路径，它是一种用增广路径求二分图最大匹配的算法。<br>我觉得这个博主讲的挺生动形象的….<br><a href="https://blog.csdn.net/dark_scope/article/details/8880547" target="_blank" rel="noopener">https://blog.csdn.net/dark_scope/article/details/8880547</a></p>
<blockquote>
<h1 id="过山车"><a href="#过山车" class="headerlink" title="过山车"></a>过山车</h1><p>题目链接: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2063" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=2063</a><br>匈牙利算法经典入门题</p>
</blockquote>
<p>题意： 尽可能地组成最多的CP。具体想法可以看上文分享的那位博主的博客。（图文并茂）<br>下面是AC代码:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> K,M,N;</span><br><span class="line"><span class="keyword">bool</span> CP[<span class="number">1000</span>+<span class="number">5</span>][<span class="number">1000</span>+<span class="number">5</span>];		<span class="comment">//记录女生u是否愿意跟男生v组成CP</span></span><br><span class="line"><span class="keyword">int</span> boy[<span class="number">1000</span>+<span class="number">5</span>];	<span class="comment">//记录男生的对象是哪位女生</span></span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">1000</span>+<span class="number">5</span>];   <span class="comment">//记录是否被访问过</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(CP[x][i]==<span class="literal">true</span>&amp;&amp;used[i]==<span class="literal">false</span>)&#123;				<span class="comment">//可以组成CP且 该男生没有被访问过</span></span><br><span class="line">            used[i]=<span class="number">1</span>;				</span><br><span class="line">            <span class="keyword">if</span>(boy[i]==<span class="number">0</span>||fun(boy[i]))&#123;  				<span class="comment">//该男生还没组成CP，或者让原先跟这位男生组CP的女生去找其他男生组CP</span></span><br><span class="line">                boy[i]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K)!=EOF)&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(K==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;M,&amp;N);</span><br><span class="line">    <span class="built_in">memset</span>(CP,<span class="number">0</span>,<span class="keyword">sizeof</span>(CP));</span><br><span class="line">    <span class="built_in">memset</span>(boy,<span class="number">0</span>,<span class="keyword">sizeof</span>(boy));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        CP[u][v]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));				<span class="comment">//每次都是尝试让当前的女生去和男生组CP，所以需要重置used数组</span></span><br><span class="line">        <span class="keyword">if</span>(fun(i)) </span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>匈牙利算法模板：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> CP[MAX][MAX];</span><br><span class="line"><span class="keyword">bool</span> used[MAX];</span><br><span class="line"><span class="keyword">int</span> linked[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=N;i++)&#123;    </span><br><span class="line">		<span class="keyword">if</span> (CP[x][i]==<span class="literal">true</span> &amp;&amp; used[i]==<span class="literal">false</span>)      </span><br><span class="line">		&#123;</span><br><span class="line">			used[i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (linked[i]==<span class="number">0</span> || fun(linked[i])) &#123; </span><br><span class="line">				linked[j]=x;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(linked,<span class="number">0</span>,<span class="keyword">sizeof</span>(linked));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">	       <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));				</span><br><span class="line">	       <span class="keyword">if</span>(fun(i)) </span><br><span class="line">	           ans++;</span><br><span class="line">	   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于匈牙利算法，不能一见到二分图匹配，上来就匈牙利，不然很容易TLE的，毕竟如果是最坏情况的话，该算法是的复杂度高达$O（M*N^2）$</p>
]]></content>
      <tags>
        <tag>二分图</tag>
        <tag>HDU</tag>
      </tags>
  </entry>
  <entry>
    <title>统计颜色</title>
    <url>/2019/10/15/%E7%BB%9F%E8%AE%A1%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<p>题意：<br>n个桶按顺序排列，我们用1~n给桶标号。有两种操作：<br>1 l r c 区间[l,r]中的每个桶中都放入一个颜色为c的球 (1≤l,r ≤n,l≤r,0≤c≤60)<br>2 l r   查询区间[l,r]的桶中有多少种不同颜色的球     (1≤l,r ≤n,l≤r)<br><a id="more"></a></p>
<p>用long long的不同位来表示不同颜色。区间合并用’|’(或)即可，update区间时就用 1&lt;&lt;c 的值来update.</p>
<p><a href="https://ac.nowcoder.com/acm/problem/15667" target="_blank" rel="noopener">传送门</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll tree[MAX_N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll tag[MAX_N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll N,M;</span><br><span class="line"><span class="function">ll <span class="title">lc</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">ll <span class="title">rc</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=x&amp;<span class="number">1</span>;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[p]=tree[lc(p)]|tree[rc(p)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(ll p,ll l,ll r,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tag[p]=tag[p]|k;</span><br><span class="line">    tree[p]=tree[p]|k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    fun(lc(p),l,mid,tag[p]);</span><br><span class="line">    fun(rc(p),mid+<span class="number">1</span>,r,tag[p]);</span><br><span class="line">    tag[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr) <span class="keyword">return</span> tree[p];</span><br><span class="line">    <span class="keyword">if</span>(tag[p]!=<span class="number">0</span>) push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)res=res|query(nl,nr,lc(p),l,mid);</span><br><span class="line">    <span class="keyword">if</span>(nr&gt;mid) res=res|query(nl,nr,rc(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        tag[p]=tag[p]|k;</span><br><span class="line">        tree[p]=tree[p]|k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tag[p]!=<span class="number">0</span>) push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)update(nl,nr,lc(p),l,mid,k);</span><br><span class="line">    <span class="keyword">if</span>(nr&gt;mid)update(nl,nr,rc(p),mid+<span class="number">1</span>,r,k);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;N,&amp;M)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="keyword">sizeof</span>(tree));</span><br><span class="line">        <span class="built_in">memset</span>(tag,<span class="number">0</span>,<span class="keyword">sizeof</span>(tag));</span><br><span class="line">        <span class="keyword">while</span>(M--)</span><br><span class="line">       &#123;</span><br><span class="line">           ll b;</span><br><span class="line">           <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b);</span><br><span class="line">           <span class="keyword">if</span>(b==<span class="number">1</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               ll x,y,z;</span><br><span class="line">               <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">               ll temp=<span class="built_in">pow</span>(<span class="number">2</span>,z);</span><br><span class="line">               update(x,y,<span class="number">1</span>,<span class="number">1</span>,N,temp);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               ll x,y;</span><br><span class="line">               <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,getans(query(x,y,<span class="number">1</span>,<span class="number">1</span>,N)));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>食物链</title>
    <url>/2019/10/05/%E9%A3%9F%E7%89%A9%E9%93%BE/</url>
    <content><![CDATA[<p>题目链接：<a href="https://ac.nowcoder.com/acm/problem/16884" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/16884</a>    </p>
<p>题意：有N只动物，这些动物属于A、B、C的其中一种；已知A吃B、B吃C、C吃A。接着有K条信息，第一种：x和y是同类；第二种：x吃y。 问有多少条信息是假的？<br><a id="more"></a></p>
<p>思路：对于每只动物i创建3个元素i-A,i-B,i-C，并用3*N个元素建立并查集。<br>维护并查集：<br>第一种：x和y同类： unite(x-A,y-A),unite(x-B,y-B),unite(x-c,y-c);<br>第二种：x吃y：   unite(x-A,y-B),unite(x-B,y-C),unite(x-C,y-A);<br>如果出现第i条信息发生冲突 则说明是假话，ans++;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> par[MAXN];</span><br><span class="line"><span class="keyword">int</span> height[MAXN];</span><br><span class="line"><span class="keyword">int</span> N,K;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        height[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(par[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> par[x]=Find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=Find(x);</span><br><span class="line">    y=Find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(height[x]&lt;height[y])</span><br><span class="line">    &#123;</span><br><span class="line">        par[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        par[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(height[x]==height[y]) height[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Find(x)==Find(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init(<span class="number">3</span>*N);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t,x,y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;t,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="number">0</span>||N&lt;x||y&lt;=<span class="number">0</span>||N&lt;y) &#123;ans++;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(same(x,y+N)||same(x,y+<span class="number">2</span>*N)) ans++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                unite(x,y);</span><br><span class="line">                unite(x+N,y+N);</span><br><span class="line">                unite(x+<span class="number">2</span>*N,y+<span class="number">2</span>*N);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(same(x,y)||same(x,y+<span class="number">2</span>*N)) ans++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                unite(x,y+N);</span><br><span class="line">                unite(x+N,y+<span class="number">2</span>*N);</span><br><span class="line">                unite(x+<span class="number">2</span>*N,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>逆元</title>
    <url>/2019/10/24/%E9%80%86%E5%85%83/</url>
    <content><![CDATA[<p>逆元素是指一个可以取消另一给定元素运算的元素，在数学里，逆元素广义化了加法中的加法逆元和乘法中的倒数<br><a id="more"></a><br><a href="https://www.luogu.org/problem/P3811" target="_blank" rel="noopener">传送门</a></p>
<p>若$a*x \equiv1 \pmod {b}$，且a与b互质，那么我们就能定义: x 为 a 的逆元，记为$a^{-1}$ </p>
<p>有三种方法可以求逆元：</p>
<h1 id="扩展GCD"><a href="#扩展GCD" class="headerlink" title="扩展GCD"></a>扩展GCD</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a,p;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> Exgcd(b, a % b, y, x), y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;p);</span><br><span class="line">    Exgcd (a, p, x, y);</span><br><span class="line">    x = (x % p + p) % p;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"%d\n"</span>, x); <span class="comment">//x是a在mod p下的逆元</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll p,n;</span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;p);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(i==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">       <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,mod_pow(i,p<span class="number">-2</span>,p));</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="线性递推"><a href="#线性递推" class="headerlink" title="线性递推"></a>线性递推</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">3e6</span>+<span class="number">5</span>;</span><br><span class="line">ll p;</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;p);</span><br><span class="line">   a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(i!=<span class="number">1</span>)a[i]=(p-p/i)*a[p%i]%p;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>践踏</title>
    <url>/2019/10/15/%E8%B7%B5%E8%B8%8F/</url>
    <content><![CDATA[<p>题意：<br>1操作 加一条线段<br>2操作 删一条线段<br>3查询 有多少条线段满足x+kt（t是整数）<br><a id="more"></a><br><a href="https://ac.nowcoder.com/acm/problem/21125" target="_blank" rel="noopener">传送门</a></p>
<p>考虑在模k意义下，每条线段都是1到2个区间，如果这条线段的长度大于k的话，那么区间[0，k-1]就满足题意。<br>树状数组维护区间和，单点查询即可。<br>当k=0的时候，则判断有多少个线段经过某个点，离散化，树状数组维护。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tree[MAXN],up;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">pair&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; a[MAXN];</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=up) tree[x]+=a,x+=x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x) res+=tree[x],x-=x&amp;(-x);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,op,l,r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"fafa\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        up=k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">                <span class="keyword">if</span>(r-l+<span class="number">1</span>&gt;=k)</span><br><span class="line">                &#123;</span><br><span class="line">                    add(<span class="number">1</span>,<span class="number">1</span>);           <span class="comment">//[1,k-1]</span></span><br><span class="line">                    add(k+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                l=(l%k)+<span class="number">1</span>;</span><br><span class="line">                r=(r%k)+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(l&lt;=r) &#123;add(l,<span class="number">1</span>); add(r+<span class="number">1</span>,<span class="number">-1</span>);&#125;       <span class="comment">//一条线段[l,r]</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    add(<span class="number">1</span>,<span class="number">1</span>);               <span class="comment">//两条线段[1,r]和[l,k+1]</span></span><br><span class="line">                    add(r+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                    add(l,<span class="number">1</span>);</span><br><span class="line">                    add(k+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)          <span class="comment">//删除线段则是添加的逆操作</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">                <span class="keyword">if</span>(r-l+<span class="number">1</span>&gt;=k)</span><br><span class="line">                &#123;</span><br><span class="line">                    add(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                    add(k+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                l=(l%k)+<span class="number">1</span>;</span><br><span class="line">                r=(r%k)+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(l&lt;=r)&#123;</span><br><span class="line">                    add(l,<span class="number">-1</span>); add(r+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    add(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                    add(r+<span class="number">1</span>,<span class="number">1</span>);         </span><br><span class="line">                    add(l,<span class="number">-1</span>);</span><br><span class="line">                    add(k+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum(l%k+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        up=<span class="number">2</span>*n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].second,&amp;a[i].first.first);</span><br><span class="line">            vec.push_back(a[i].first.first);</span><br><span class="line">            <span class="keyword">if</span>(a[i].second&lt;=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].first.second);</span><br><span class="line">                vec.push_back(a[i].first.second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(vec.begin(),vec.end());</span><br><span class="line">        vec.erase(unique(vec.begin(),vec.end()),vec.end()); <span class="comment">//离散化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].second==<span class="number">1</span>)          <span class="comment">//离散化后，二分查询所需l,r</span></span><br><span class="line">            &#123;</span><br><span class="line">                l=lower_bound(vec.begin(),vec.end(),a[i].first.first)-vec.begin()+<span class="number">1</span>;</span><br><span class="line">                r=lower_bound(vec.begin(),vec.end(),a[i].first.second)-vec.begin()+<span class="number">1</span>;</span><br><span class="line">                add(l,<span class="number">1</span>);</span><br><span class="line">                add(r+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i].second==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l=lower_bound(vec.begin(),vec.end(),a[i].first.first)-vec.begin()+<span class="number">1</span>;</span><br><span class="line">                r=lower_bound(vec.begin(),vec.end(),a[i].first.second)-vec.begin()+<span class="number">1</span>;</span><br><span class="line">                add(l,<span class="number">-1</span>);</span><br><span class="line">                add(r+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> x=lower_bound(vec.begin(),vec.end(),a[i].first.first)-vec.begin()+<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum(x));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>高精</title>
    <url>/2019/09/19/%E9%AB%98%E7%B2%BE/</url>
    <content><![CDATA[<h1 id="高精度模板"><a href="#高精度模板" class="headerlink" title="高精度模板"></a>高精度模板</h1><a id="more"></a>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> FOR(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> _FOR(i, a, b) for(int i = a; i &gt;= b; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigInt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20500</span>;</span><br><span class="line">    <span class="keyword">int</span> num[M + <span class="number">10</span>], len;</span><br><span class="line"></span><br><span class="line">    BigInt() &#123; clean(); &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line">    	len = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">char</span> str[M + <span class="number">10</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        FOR(i, <span class="number">1</span>, len)</span><br><span class="line">            num[i] = str[len - i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        _FOR(i, len, <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, num[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">itoBig</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    	clean();</span><br><span class="line">    	<span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">    		num[len++] = x % <span class="number">10</span>;</span><br><span class="line">    		x /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(len != <span class="number">1</span>) len--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> BigInt &amp;cmp) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(len != cmp.len) <span class="keyword">return</span> len &lt; cmp.len;</span><br><span class="line">        _FOR(i, len, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span>(num[i] != cmp.num[i]) <span class="keyword">return</span> num[i] &lt; cmp.num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> BigInt &amp;cmp) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cmp &lt; *<span class="keyword">this</span>; &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> BigInt &amp;cmp) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(cmp &lt; *<span class="keyword">this</span>); &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> BigInt &amp;cmp) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cmp &lt; *<span class="keyword">this</span> || *<span class="keyword">this</span> &lt; cmp; &#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> BigInt &amp;cmp) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(cmp &lt; *<span class="keyword">this</span> || *<span class="keyword">this</span> &lt; cmp); &#125;</span><br><span class="line"></span><br><span class="line">    BigInt <span class="keyword">operator</span> + (<span class="keyword">const</span> BigInt &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">        BigInt S;</span><br><span class="line">        S.len = max(len, A.len);</span><br><span class="line">        FOR(i, <span class="number">1</span>, S.len)&#123;</span><br><span class="line">            S.num[i] += num[i] + A.num[i];</span><br><span class="line">            <span class="keyword">if</span>(S.num[i] &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">                S.num[i] -= <span class="number">10</span>;</span><br><span class="line">                S.num[i + <span class="number">1</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(S.num[S.len + <span class="number">1</span>]) S.len++;</span><br><span class="line">        <span class="keyword">return</span> S;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BigInt <span class="keyword">operator</span> - (<span class="keyword">const</span> BigInt &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">        BigInt S;</span><br><span class="line">        S.len = max(len, A.len);</span><br><span class="line">        FOR(i, <span class="number">1</span>, S.len)&#123;</span><br><span class="line">            S.num[i] += num[i] - A.num[i];</span><br><span class="line">            <span class="keyword">if</span>(S.num[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                S.num[i] += <span class="number">10</span>;</span><br><span class="line">                S.num[i + <span class="number">1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!S.num[S.len] &amp;&amp; S.len &gt; <span class="number">1</span>) S.len--;</span><br><span class="line">        <span class="keyword">return</span> S;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BigInt <span class="keyword">operator</span> * (<span class="keyword">const</span> BigInt &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">        BigInt S;</span><br><span class="line">        <span class="keyword">if</span>((A.len == <span class="number">1</span> &amp;&amp; A.num[<span class="number">1</span>] == <span class="number">0</span>) || (len == <span class="number">1</span> &amp;&amp; num[<span class="number">1</span>] == <span class="number">0</span>)) <span class="keyword">return</span> S;</span><br><span class="line">        S.len = A.len + len - <span class="number">1</span>;</span><br><span class="line">        FOR(i, <span class="number">1</span>, len)</span><br><span class="line">            FOR(j, <span class="number">1</span>, A.len)&#123;</span><br><span class="line">                S.num[i + j - <span class="number">1</span>] += num[i] * A.num[j];</span><br><span class="line">                S.num[i + j] += S.num[i + j - <span class="number">1</span>] / <span class="number">10</span>;</span><br><span class="line">                S.num[i + j - <span class="number">1</span>] %= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span>(S.num[S.len + <span class="number">1</span>]) S.len++;</span><br><span class="line">        <span class="keyword">return</span> S;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BigInt <span class="keyword">operator</span> / (<span class="keyword">const</span> BigInt &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">        BigInt S;</span><br><span class="line">        <span class="keyword">if</span>((A.len == <span class="number">1</span> &amp;&amp; A.num[<span class="number">1</span>] == <span class="number">0</span>) || (len == <span class="number">1</span> &amp;&amp; num[<span class="number">1</span>] == <span class="number">0</span>)) <span class="keyword">return</span> S;</span><br><span class="line">        BigInt R, N;</span><br><span class="line">        S.len = <span class="number">0</span>;</span><br><span class="line">        _FOR(i, len, <span class="number">1</span>)&#123;</span><br><span class="line">        	N.itoBig(<span class="number">10</span>);</span><br><span class="line">			R = R * N;</span><br><span class="line">			N.itoBig(num[i]);</span><br><span class="line">			R = R + N;</span><br><span class="line">        	<span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">        	FOR(j, <span class="number">1</span>, <span class="number">10</span>)&#123;</span><br><span class="line">        		N.itoBig(j);</span><br><span class="line">        		<span class="keyword">if</span>(N * A &gt; R)&#123;</span><br><span class="line">        			flag = j - <span class="number">1</span>;</span><br><span class="line">        			<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			S.num[++S.len] = flag;</span><br><span class="line">			N.itoBig(flag);</span><br><span class="line">			R = R - N * A;</span><br><span class="line">		&#125;</span><br><span class="line">		FOR(i, <span class="number">1</span>, S.len / <span class="number">2</span>) swap(S.num[i], S.num[len - i + <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">while</span>(!S.num[S.len] &amp;&amp; S.len &gt; <span class="number">1</span>) S.len--;</span><br><span class="line">        <span class="keyword">return</span> S;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BigInt <span class="keyword">operator</span> % (<span class="keyword">const</span> BigInt &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">    	BigInt S;</span><br><span class="line">    	BigInt P = *<span class="keyword">this</span> / A;</span><br><span class="line">    	S = *<span class="keyword">this</span> - P * A;</span><br><span class="line">    	<span class="keyword">return</span> S;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>高精</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/04/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>逆序数</title>
    <url>/2019/10/08/%E9%80%86%E5%BA%8F%E6%95%B0/</url>
    <content><![CDATA[<p>题目链接：<a href="https://www.luogu.org/problem/P1908" target="_blank" rel="noopener">https://www.luogu.org/problem/P1908</a><br>题目链接：<a href="https://ac.nowcoder.com/acm/problem/15163" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/15163</a><br>题意：给n个数，求这n个数的逆序对。（$a_i$&lt;$a_j$&amp;&amp;i&gt;j）<br><a id="more"></a></p>
<h1 id="归并排序做法："><a href="#归并排序做法：" class="headerlink" title="归并排序做法："></a>归并排序做法：</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> b[MAX_N];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=t) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(s+t)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    mergesort(s,mid);</span><br><span class="line">    mergesort(mid+<span class="number">1</span>,t);</span><br><span class="line">    <span class="keyword">int</span> i=s;<span class="keyword">int</span> j=mid+<span class="number">1</span>;<span class="keyword">int</span> k=s;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=t)&#123;                <span class="comment">//合并两个区间</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j]) b[k++]=a[i++];   <span class="comment">//满足顺序，直接用b数组存储</span></span><br><span class="line">        <span class="keyword">else</span> &#123;b[k++]=a[j++]; ans+=mid+<span class="number">1</span>-i;&#125;  <span class="comment">//当第一个区间的数比第二区间的数大，则它的逆序数为mid+1-i,i为这个数在第一个区间的位置.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) b[k++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=t) b[k++]=a[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=s;l&lt;=t;l++) a[l]=b[l];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    mergesort(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="树状数组做法："><a href="#树状数组做法：" class="headerlink" title="树状数组做法："></a>树状数组做法：</h1><p>1.首先我们要知道树状数组是可以用来维护前缀和;</p>
<p>2.我们利用桶排的思想来求逆序对数,即遍历数组a,然后用b数组存储a[i]出现的次数(b[a[i]]++)。对于每个a[i]来说，它的逆序数为i-(1~$b_i$)的前缀和；如果直接遍历b的话太慢，所以我们用树状数组来维护前缀和。</p>
<p>3.当n很大的时候，我们不足以开这么大的b数组来存储，于是我们可以对a数组进行离散化，先将a数组排序，然后用1~n来表示a数组的相对大小。</p>
<p>4.要注意出现相同的数的时候，我们要将出现在后面的数排在后面。不然$a_i$=$a_j$ &amp;&amp; i &lt; j的时候，排序可能会让$a_j$排在$a_i$前面，导致处理$a_i$时会将$a_j$误判为逆序对.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> b[MAX_N];</span><br><span class="line"><span class="keyword">int</span> tree[MAX_N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> val;    </span><br><span class="line">&#125;node[MAX_N];   <span class="comment">//用结构体来存储原来的值和位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span>       </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x,Node y)</span>      <span class="comment">//排序法则</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.val==y.val)<span class="keyword">return</span> x.index&lt;y.index;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x.val&lt;y.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span>        <span class="comment">//给第i位数加x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i]+=x;</span><br><span class="line">        i+=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span>         <span class="comment">//求1~i的前缀和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s+=tree[i];</span><br><span class="line">        i-=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node[i].val);</span><br><span class="line">        node[i].index=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node+<span class="number">1</span>,node+<span class="number">1</span>+n,cmp);  <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[node[i].index]=i;   <span class="comment">//离散化  </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        add(b[i],<span class="number">1</span>);        </span><br><span class="line">        ans+=i-sum(b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>因为树状数组要排序，复杂度已经O(nlogn)了，还要进行维护树状数组操作，在数比较大的时候会比归并慢。<br>但如果n比较小的情况下，用树状数组做会比较快，不用离散化的情况下。</p>
]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>离散化</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Some tips for String</title>
    <url>/2019/04/17/Some-tips-for-String/</url>
    <content><![CDATA[<h1 id="Some-tips-for-String"><a href="#Some-tips-for-String" class="headerlink" title="Some tips for String"></a>Some tips for String</h1><p><strong>笔者因为在做题时老是遇到String的坑，为此特意补一篇blog来尽量解决string 的坑….</strong><br><a id="more"></a></p>
<h2 id="构造函数-Constructors"><a href="#构造函数-Constructors" class="headerlink" title="构造函数(Constructors)"></a>构造函数(Constructors)</h2><p>语法：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>( size_type length, <span class="keyword">char</span> ch );<span class="comment">//构造length个ch </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str1</span><span class="params">(<span class="number">10</span>,<span class="string">'a'</span>)</span></span>;<span class="comment">//构造十个a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>( <span class="keyword">const</span> <span class="keyword">char</span> *str );</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str2</span><span class="params">(<span class="string">"hello wrold"</span>)</span></span>;<span class="comment">//构造一个"hello wrold"的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type length );<span class="comment">//以index为索引开始的子串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str3</span><span class="params">(str2,<span class="number">6</span>)</span></span>;<span class="comment">//构造一个"wrold"的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>( <span class="built_in">string</span> &amp;str, size_type index, size_type length );<span class="comment">//以index为索引开始的子串，长度为length</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str4</span><span class="params">(str2,<span class="number">6</span>,<span class="number">9</span>)</span></span>;<span class="comment">//构造一个"wrol"的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>( input_iterator start, input_iterator end );</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str5</span><span class="params">(str2.begin(),str2.end())</span></span>;<span class="comment">//构造一个"hello wrold"的子串</span></span><br></pre></td></tr></table></figure></p>
<h2 id="操作符-Operators"><a href="#操作符-Operators" class="headerlink" title="操作符(Operators)"></a>操作符(Operators)</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&lt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br><span class="line">!=</span><br><span class="line"><span class="comment">// 上面五个都是比较字符串用的</span></span><br><span class="line">+= </span><br><span class="line">=</span><br><span class="line">== <span class="comment">//判断两个字符串是否相等</span></span><br><span class="line">[index] <span class="comment">//获取索引为index的字符,类似数组</span></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//作用类似[]操作符</span></span><br><span class="line">at()函数返回一个引用，指向在index位置的字符. 如果index不在字符串范围内, at() 将报告<span class="string">"out of range"</span>错误，并抛出out_of_range异常。</span><br></pre></td></tr></table></figure>
<h3 id="begin-和-end"><a href="#begin-和-end" class="headerlink" title="begin 和 end"></a>begin 和 end</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">begin()函数返回一个迭代器,指向字符串的第一个元素.</span><br><span class="line">end()函数返回一个迭代器,指向字符串的最后一个元素.</span><br></pre></td></tr></table></figure>
<h3 id="c-str"><a href="#c-str" class="headerlink" title="c_str"></a>c_str</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">c_str()函数返回一个指向正规C字符串的指针, 内容与本字符串相同.</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"hello wrold"</span>)</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,str.c_str());<span class="comment">//我理解为string 转换为char [];</span></span><br></pre></td></tr></table></figure>
<h3 id="比较-compare"><a href="#比较-compare" class="headerlink" title="比较(compare)"></a>比较(compare)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str )</span></span>;<span class="comment">//比较自己和str</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str )</span></span>;<span class="comment">//比较自己和str</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">( size_type index, size_type length, <span class="keyword">const</span> basic_string &amp;str )</span></span>;</span><br><span class="line"><span class="comment">//比较自己的子串和str,自己的子串以index索引开始，长度为length</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">( size_type index, size_type length, <span class="keyword">const</span> basic_string &amp;str, size_type index2,</span></span></span><br><span class="line"><span class="function"><span class="params">size_type length2 )</span></span>;</span><br><span class="line"><span class="comment">//比较自己的子串和str的子串，其中index2和length2引用str，index和length引用自己</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">( size_type index, size_type length, <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type length2 )</span></span>;</span><br><span class="line"><span class="comment">//比较自己的子串和str的子串，其中str的子串以索引0开始，长度为length2，自己的子串以index开始，长度为length</span></span><br></pre></td></tr></table></figure>
<h3 id="拷贝-copy"><a href="#拷贝-copy" class="headerlink" title="拷贝(copy)"></a>拷贝(copy)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">copy</span><span class="params">( <span class="keyword">char</span> *str, size_type num, size_type index )</span></span>;</span><br><span class="line">copy()函数拷贝自己的num个字符到str中（从索引index开始）。返回值是拷贝的字符数</span><br></pre></td></tr></table></figure>
<h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line">如果字符串为空则empty()返回真(<span class="literal">true</span>)，否则返回假(<span class="literal">false</span>).</span><br></pre></td></tr></table></figure>
<h3 id="删除-erase"><a href="#删除-erase" class="headerlink" title="删除(erase)"></a>删除(erase)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">( iterator pos )</span></span>;<span class="comment">//删除pos指向的字符, 返回指向下一个字符的迭代器,</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">( iterator start, iterator end )</span></span>;<span class="comment">//删除从start到end的所有字符, 返回一个迭代器,指向被删除的最后一个字符的下一个位置</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">erase</span><span class="params">( size_type index = <span class="number">0</span>, size_type num = npos )</span></span>;<span class="comment">//删除从index索引开始的num个字符, 返回*this.</span></span><br></pre></td></tr></table></figure>
<h3 id="查找-find"><a href="#查找-find" class="headerlink" title="查找(find)"></a>查找(find)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回str在字符串中第一次出现的位置（从index开始查找）。如果没找到则返回string::npos</span></span><br><span class="line"><span class="function">size_type <span class="title">find</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index )</span></span>;</span><br><span class="line"><span class="comment">//返回str在字符串中第一次出现的位置（从index开始查找）。如果没找到则返回string::npos</span></span><br><span class="line"><span class="function">size_type <span class="title">find</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index )</span></span>;</span><br><span class="line"><span class="comment">//返回str在字符串中第一次出现的位置（从index开始查找，长度为length）。如果没找到就返回string::npos</span></span><br><span class="line"><span class="function">size_type <span class="title">find</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type length )</span></span>;</span><br><span class="line"><span class="comment">//返回字符ch在字符串中第一次出现的位置（从index开始查找）。如果没找到就返回string::npos</span></span><br><span class="line"><span class="function">size_type <span class="title">find</span><span class="params">( <span class="keyword">char</span> ch, size_type index )</span></span>;</span><br><span class="line"><span class="built_in">string</span>::npos 直接输出：<span class="number">4294967295</span></span><br><span class="line">用来表示不存在的意思...</span><br><span class="line">例如：</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"hello wrold"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str.find(<span class="string">'a'</span>); <span class="comment">//就会打印出4294967295</span></span><br></pre></td></tr></table></figure>
<p>下面提一下其他查找函数：</p>
<h4 id="find-first-of"><a href="#find-first-of" class="headerlink" title="find_first_of"></a>find_first_of</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找在字符串中第一个与str中的某个字符匹配的字符，返回它的位置。搜索从index开始，如果没找到就返回string::npos</span></span><br><span class="line"><span class="function">size_type <span class="title">find_first_of</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index = <span class="number">0</span> )</span></span>;</span><br><span class="line"><span class="comment">//查找在字符串中第一个与str中的某个字符匹配的字符，返回它的位置。搜索从index开始，如果没找到就返回string::npos</span></span><br><span class="line"><span class="function">size_type <span class="title">find_first_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index = <span class="number">0</span> )</span></span>;</span><br><span class="line"><span class="comment">//查找在字符串中第一个与str中的某个字符匹配的字符，返回它的位置。搜索从index开始，最多搜索num个字符。如果没找到就返回string::npos</span></span><br><span class="line"><span class="function">size_type <span class="title">find_first_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type num )</span></span>;</span><br><span class="line"><span class="comment">//查找在字符串中第一个与ch匹配的字符，返回它的位置。搜索从index开始。</span></span><br><span class="line"><span class="function">size_type <span class="title">find_first_of</span><span class="params">( <span class="keyword">char</span> ch, size_type index = <span class="number">0</span> )</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="find-first-not-of"><a href="#find-first-not-of" class="headerlink" title="find_first_not_of"></a>find_first_not_of</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在字符串中查找第一个与str中的字符都不匹配的字符，返回它的位置。搜索从index开始。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_first_not_of</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index = <span class="number">0</span> )</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找第一个与str中的字符都不匹配的字符，返回它的位置。搜索从index开始。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_first_not_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index = <span class="number">0</span> )</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找第一个与str中的字符都不匹配的字符，返回它的位置。搜索从index开始，最多查找num个字符。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_first_not_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type num )</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找第一个与ch不匹配的字符，返回它的位置。搜索从index开始。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_first_not_of</span><span class="params">( <span class="keyword">char</span> ch, size_type index = <span class="number">0</span> )</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="find-last-of"><a href="#find-last-of" class="headerlink" title="find_last_of"></a>find_last_of</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">find_last_of</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index = npos )</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找最后一个与str中的某个字符匹配的字符，返回它的位置。搜索从index开始。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_last_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index = npos )</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找最后一个与str中的某个字符匹配的字符，返回它的位置。搜索从index开始，最多搜索num个字符。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_last_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type num )</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找最后一个与ch匹配的字符，返回它的位置。搜索从index开始。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_last_of</span><span class="params">( <span class="keyword">char</span> ch, size_type index = npos )</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="find-last-not-of"><a href="#find-last-not-of" class="headerlink" title="find_last_not_of"></a>find_last_not_of</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">find_last_not_of</span><span class="params">( <span class="keyword">const</span> basic_string &amp;str, size_type index = npos )</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找最后一个与str中的字符都不匹配的字符，返回它的位置。搜索从index开始。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_last_not_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index = npos)</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找最后一个与str中的字符都不匹配的字符，返回它的位置。搜索从index开始，最多查找num个字符如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_last_not_of</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type index, size_type num )</span></span>;</span><br><span class="line"><span class="comment">//在字符串中查找最后一个与ch不匹配的字符，返回它的位置。搜索从index开始。如果没找到就返回string::nops</span></span><br><span class="line"><span class="function">size_type <span class="title">find_last_not_of</span><span class="params">( <span class="keyword">char</span> ch, size_type index = npos )</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入(insert)"></a>插入(insert)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在迭代器i表示的位置前面插入一个字符ch</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">( iterator i, <span class="keyword">const</span> <span class="keyword">char</span> &amp;ch )</span></span>;</span><br><span class="line"><span class="comment">//在字符串的位置index插入字符串str</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">( size_type index, <span class="keyword">const</span> basic_string &amp;str )</span></span>;</span><br><span class="line"><span class="comment">//在字符串的位置index插入字符串str</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">( size_type index, <span class="keyword">const</span> <span class="keyword">char</span> *str )</span></span>;</span><br><span class="line"><span class="comment">//在字符串的位置index插入字符串str的子串(从index2开始，长num个字符)</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">( size_type index1, <span class="keyword">const</span> basic_string &amp;str, size_type index2, size_type num )</span></span>;</span><br><span class="line"><span class="comment">//在字符串的位置index插入字符串str的num个字符</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">( size_type index, <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type num )</span></span>;</span><br><span class="line"><span class="comment">//在字符串的位置index插入num个字符ch的拷贝</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">insert</span><span class="params">( size_type index, size_type num, <span class="keyword">char</span> ch )</span></span>;</span><br><span class="line"><span class="comment">//在迭代器i表示的位置前面插入num个字符ch的拷贝,</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( iterator i, size_type num, <span class="keyword">const</span> <span class="keyword">char</span> &amp;ch )</span></span>;</span><br><span class="line"><span class="comment">//在迭代器i表示的位置前面插入一段字符，从start开始，以end结束.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( iterator i, iterator start, iterator end )</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="长度-length"><a href="#长度-length" class="headerlink" title="长度(length)"></a>长度(length)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">length()函数返回字符串的长度,这个函数跟size()函数应该差不多</span><br></pre></td></tr></table></figure>
<h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">basic_string <span class="title">substr</span><span class="params">( size_type index, size_type num = npos )</span></span>;</span><br><span class="line">substr()返回本字符串的一个子串，从index开始，长num个字符。如果没有指定，将是默认值 <span class="built_in">string</span>::npos。这样，substr()函数将简单的返回从index开始的剩余的字符串</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"hello wrold"</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span> a=str.substr();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a;<span class="comment">//输出hello wrold</span></span><br></pre></td></tr></table></figure>
<h3 id="替换-replace"><a href="#替换-replace" class="headerlink" title="替换(replace)"></a>替换(replace)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用str中的num个字符替换本字符串中的字符,从index开始</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( size_type index, size_type num, <span class="keyword">const</span> basic_string &amp;str )</span></span>;</span><br><span class="line"><span class="comment">//用str中的num2个字符（从index2开始）替换本字符串中的字符，从index1开始，最多num1个字符</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( size_type index1, size_type num1, <span class="keyword">const</span> basic_string &amp;str, size_type index2,</span></span></span><br><span class="line"><span class="function"><span class="params">size_type num2 )</span></span>;</span><br><span class="line"><span class="comment">//用str中的num个字符（从index开始）替换本字符串中的字符</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( size_type index, size_type num, <span class="keyword">const</span> <span class="keyword">char</span> *str )</span></span>;</span><br><span class="line"><span class="comment">//用str中的num2个字符（从index2开始）替换本字符串中的字符，从index1开始，num1个字符</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( size_type index, size_type num1, <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type num2 )</span></span>;</span><br><span class="line"><span class="comment">//用num2个ch字符替换本字符串中的字符，从index开始</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( size_type index, size_type num1, size_type num2, <span class="keyword">char</span> ch )</span></span>;</span><br><span class="line"><span class="comment">//用str中的字符替换本字符串中的字符,迭代器start和end指示范围</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( iterator start, iterator end, <span class="keyword">const</span> basic_string &amp;str )</span></span>;</span><br><span class="line"><span class="comment">//用str中的字符替换本字符串中的字符,迭代器start和end指示范围</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( iterator start, iterator end, <span class="keyword">const</span> <span class="keyword">char</span> *str )</span></span>;</span><br><span class="line"><span class="comment">//用str中的num个字符替换本字符串中的内容,迭代器start和end指示范围</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( iterator start, iterator end, <span class="keyword">const</span> <span class="keyword">char</span> *str, size_type num )</span></span>;</span><br><span class="line"><span class="comment">//用num个ch字符替换本字符串中的内容，迭代器start和end指示范围.</span></span><br><span class="line"><span class="function">basic_string &amp;<span class="title">replace</span><span class="params">( iterator start, iterator end, size_type num, <span class="keyword">char</span> ch )</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"hello wrold"</span>)</span></span>;</span><br><span class="line"> str.replace(<span class="number">6</span>,<span class="number">3</span>,<span class="string">"C++"</span>);</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;str;<span class="comment">//输出hello C++ld</span></span><br></pre></td></tr></table></figure>
<h3 id="保留空间-reserve"><a href="#保留空间-reserve" class="headerlink" title="保留空间(reserve)"></a>保留空间(reserve)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reserve</span><span class="params">( size_type num ）</span></span></span><br><span class="line"><span class="function"><span class="params">reserve()函数设置本字符串的capacity 以保留num个字符空间。</span></span></span><br></pre></td></tr></table></figure>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">逆转元素</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">reverse</span> <span class="params">(BidirectionalIterator first, BidirectionalIterator last)</span></span></span><br><span class="line"><span class="function"> <span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"123456789"</span>)</span></span>;</span><br><span class="line"> reverse(str.begin(),str.end());</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;str;<span class="comment">//输出987654321</span></span><br></pre></td></tr></table></figure>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">清空str的元素</span><br><span class="line">str.clear();</span><br></pre></td></tr></table></figure>
<p>关于string大概就讲这么多…以后再被坑到再接着补充。如果读者想了解更多的话，可以去查看官方文档。<br>今天的总结就到这里吧…..</p>
]]></content>
      <tags>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树</title>
    <url>/2019/10/11/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>线段树模板<br>线段树是处理符合结合律的高效数据结构；<br>线段树专门处理区间问题的；<br>线段树的每个节点都表示一个区间，当l==r的时候，意味着区间长度为1，也就是表元素；<br>线段是是一颗完全二叉树，即每个节点要么是叶子节点要么就有两个孩子节点。<br><a id="more"></a><br><a href="https://www.luogu.org/problem/P3372" target="_blank" rel="noopener">线段树模板题</a></p>
<h2 id="递归建树："><a href="#递归建树：" class="headerlink" title="递归建树："></a>递归建树：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lc</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;      <span class="comment">//左孩子</span></span><br><span class="line"><span class="function">ll <span class="title">rc</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;    <span class="comment">//右孩子</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[p]=tree[lc(p)]+tree[rc(p)];            <span class="comment">//这是维护区间和的线段树，维护区间最大最小值的类似；</span></span><br><span class="line">    <span class="comment">//tree[p]=min(tree[lc(p)],tree[rc(p)]); //维护区间最小值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span>              </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tag[p]=<span class="number">0</span>;                               <span class="comment">//tag标记，先不管，下面讲</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lc(p),l,mid);                     <span class="comment">//递归左子树</span></span><br><span class="line">    build(rc(p),mid+<span class="number">1</span>,r);                   <span class="comment">//递归右子树</span></span><br><span class="line">    push_up(p);                             <span class="comment">//回溯时，维护父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h2><p>单点修改是区间修改的子问题，也就是修改区间长度为1的区间。放在一起谈。<br>对于区间修改，我们需要引用一个tag标记；<br>原因：当修改区间的一个元素时，它就需要push_up来更新它的父节点，时间复杂度O(nlogn)，这很低效，当我们引入tag标记时，则可以使区间更新接近O(logn);</p>
<h3 id="tag标记"><a href="#tag标记" class="headerlink" title="tag标记"></a>tag标记</h3><p>当某个区间被修改时，就给这个区间打上标记,当用到这个区间的子区间的时候，我们才从父节点往子节点下传更新值.来看一下代码:<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(ll p,ll l,ll r,ll k)</span>    <span class="comment">// p表示该节点，[l,r]表示该节点表示的区间，k表示增量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tag[p]=tag[p]+k;            <span class="comment">//记录增量</span></span><br><span class="line">    tree[p]=tree[p]+(r-l+<span class="number">1</span>)*k;  <span class="comment">//更新当前节点的值，因为符合结合律，所以直接可以计算得</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll p,ll l,ll r)</span>      <span class="comment">//下传tag标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;                </span><br><span class="line">    fun(lc(p),l,mid,tag[p]);           <span class="comment">//下传给左孩子</span></span><br><span class="line">    fun(rc(p),mid+<span class="number">1</span>,r,tag[p]);          <span class="comment">//下传给右孩子</span></span><br><span class="line">    tag[p]=<span class="number">0</span>;                       <span class="comment">//下传完，恢复标记</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r,ll k)</span>        <span class="comment">//区间修改，[nl,nr]表示修改的区间，p表示该区间的节点，[l,r]表示该节点表示的区间，k表示增量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)            <span class="comment">//当需要修改的区间完全覆盖当前区间，我们就给该区间打上tag标记，并且更新一下该节点的值</span></span><br><span class="line">    &#123;</span><br><span class="line">        tag[p]+=k;</span><br><span class="line">        tree[p]+=(r-l+<span class="number">1</span>)*k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tag[p]!=<span class="number">0</span>) push_down(p,l,r);             <span class="comment">//没有完全覆盖则需要继续找，如果当前节点有tag标记，说明它的孩子节点没有被更新，我们要先下放tag标记</span></span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)update(nl,nr,lc(p),l,mid,k);     <span class="comment">//更新左子树</span></span><br><span class="line">    <span class="keyword">if</span>(nr&gt;mid)update(nl,nr,rc(p),mid+<span class="number">1</span>,r,k);    <span class="comment">//更新右子树</span></span><br><span class="line">    push_up(p);                                 <span class="comment">//回溯时，维护父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr) <span class="keyword">return</span> tree[p];                    <span class="comment">//当查询的区间已经完全包括该区间时，直接return</span></span><br><span class="line">    <span class="keyword">if</span>(tag[p]!=<span class="number">0</span>) push_down(p,l,r);                     <span class="comment">//如果标记不为0,则说明该区间有修改，需要push_down传递给子节点，且需要在递归子节点前！！！</span></span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)res+=query(nl,nr,lc(p),l,mid);           <span class="comment">//递归左孩子</span></span><br><span class="line">    <span class="keyword">if</span>(nr&gt;mid) res+=query(nl,nr,rc(p),mid+<span class="number">1</span>,r);         <span class="comment">//递归右孩子</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">ll tree[MAX_N&lt;&lt;<span class="number">2</span>];          <span class="comment">//线段树的节点，因为从树顶往下建树，所以需要4N的大小；</span></span><br><span class="line">ll a[MAX_N];                <span class="comment">//存原数组</span></span><br><span class="line">ll tag[MAX_N&lt;&lt;<span class="number">2</span>];           <span class="comment">//标记</span></span><br><span class="line">ll N,M;</span><br><span class="line"><span class="function">ll <span class="title">lc</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;      </span><br><span class="line"><span class="function">ll <span class="title">rc</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[p]=tree[lc(p)]+tree[rc(p)];          </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(ll p,ll l,ll r,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tag[p]=tag[p]+k;</span><br><span class="line">    tree[p]=tree[p]+(r-l+<span class="number">1</span>)*k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    fun(lc(p),l,mid,tag[p]);</span><br><span class="line">    fun(rc(p),mid+<span class="number">1</span>,r,tag[p]);</span><br><span class="line">    tag[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span>              <span class="comment">//递归建树</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tag[p]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[p]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lc(p),l,mid);</span><br><span class="line">    build(rc(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr) <span class="keyword">return</span> tree[p];</span><br><span class="line">    <span class="keyword">if</span>(tag[p]!=<span class="number">0</span>) push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)res+=query(nl,nr,lc(p),l,mid);</span><br><span class="line">    <span class="keyword">if</span>(nr&gt;mid) res+=query(nl,nr,rc(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        tag[p]+=k;</span><br><span class="line">        tree[p]+=(r-l+<span class="number">1</span>)*k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tag[p]!=<span class="number">0</span>) push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)update(nl,nr,lc(p),l,mid,k);</span><br><span class="line">    <span class="keyword">if</span>(nr&gt;mid)update(nl,nr,rc(p),mid+<span class="number">1</span>,r,k);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;N,&amp;M);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">   build(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">   <span class="keyword">while</span>(M--)</span><br><span class="line">   &#123;</span><br><span class="line">       ll b;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b);</span><br><span class="line">       <span class="keyword">if</span>(b==<span class="number">1</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           ll x,y,z;</span><br><span class="line">           <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">           update(x,y,<span class="number">1</span>,<span class="number">1</span>,N,z);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           ll x,y;</span><br><span class="line">           <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;y);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(x,y,<span class="number">1</span>,<span class="number">1</span>,N));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>线段树模板2:<br>如题，已知一个数列，你需要进行下面三种操作：</p>
<p>1.将某区间每一个数乘上x</p>
<p>2.将某区间每一个数加上x</p>
<p>3.求出某区间每一个数的和<br><a href="https://www.luogu.org/problem/P3373" target="_blank" rel="noopener">传送门</a><br>设置两个lazytag，一个存加法，一个存乘法</p>
<p>push_down操作的时候，人为的给这两个lazytag规定先后顺序</p>
<p>乘法优先：<br>tree[lc(p)]=(tree[lc(p)]<em>mul[p]+add[p]</em>(mid-l+1));<br>tree[rc(p)]=(tree[rc(p)]<em>mul[p]+add[p]</em>(r-mid));</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    tree[lc(p)]=(tree[lc(p)]*mul[p]+add[p]*(mid-l+<span class="number">1</span>))%PP;   </span><br><span class="line">    tree[rc(p)]=(tree[rc(p)]*mul[p]+add[p]*(r-mid))%PP;</span><br><span class="line"></span><br><span class="line">    mul[lc(p)]=(mul[lc(p)]*mul[p])%PP;</span><br><span class="line">    mul[rc(p)]=(mul[rc(p)]*mul[p])%PP;</span><br><span class="line"></span><br><span class="line">    add[lc(p)]=(add[lc(p)]*mul[p]+add[p])%PP;</span><br><span class="line">    add[rc(p)]=(add[rc(p)]*mul[p]+add[p])%PP;</span><br><span class="line"></span><br><span class="line">    add[p]=<span class="number">0</span>;</span><br><span class="line">    mul[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line">ll N,M,PP;</span><br><span class="line">ll tree[MAX_N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll add[MAX_N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll mul[MAX_N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll a[MAX_N];</span><br><span class="line"><span class="function">ll <span class="title">lc</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function">ll <span class="title">rc</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[p]=(tree[lc(p)]+tree[rc(p)])%PP;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[p]=<span class="number">0</span>;</span><br><span class="line">    mul[p]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[p]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lc(p),l,mid);</span><br><span class="line">    build(rc(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    tree[lc(p)]=(tree[lc(p)]*mul[p]+add[p]*(mid-l+<span class="number">1</span>))%PP;</span><br><span class="line">    tree[rc(p)]=(tree[rc(p)]*mul[p]+add[p]*(r-mid))%PP;</span><br><span class="line"></span><br><span class="line">    mul[lc(p)]=(mul[lc(p)]*mul[p])%PP;</span><br><span class="line">    mul[rc(p)]=(mul[rc(p)]*mul[p])%PP;</span><br><span class="line"></span><br><span class="line">    add[lc(p)]=(add[lc(p)]*mul[p]+add[p])%PP;</span><br><span class="line">    add[rc(p)]=(add[rc(p)]*mul[p]+add[p])%PP;</span><br><span class="line"></span><br><span class="line">    add[p]=<span class="number">0</span>;</span><br><span class="line">    mul[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update1</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[p]=(tree[p]*k)%PP;</span><br><span class="line">        add[p]=(add[p]*k)%PP;</span><br><span class="line">        mul[p]=(mul[p]*k)%PP;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid) update1(nl,nr,lc(p),l,mid,k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;nr) update1(nl,nr,rc(p),mid+<span class="number">1</span>,r,k);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update2</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r,ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[p]=(tree[p]+k*(r-l+<span class="number">1</span>))%PP;</span><br><span class="line">        add[p]=(add[p]+k)%PP;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid) update2(nl,nr,lc(p),l,mid,k);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;nr) update2(nl,nr,rc(p),mid+<span class="number">1</span>,r,k);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll nl,ll nr,ll p,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[p];</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid) res=(res+query(nl,nr,lc(p),l,mid))%PP;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;nr) res=(res+query(nl,nr,rc(p),mid+<span class="number">1</span>,r))%PP;</span><br><span class="line">    <span class="keyword">return</span> res%PP;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//scanf("%d%d%d",&amp;N,&amp;M,&amp;P);</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;PP;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=N;i++) <span class="built_in">cin</span>&gt;&gt;a[i];<span class="comment">//scanf("%d",&amp;a[i]);</span></span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">while</span>(M--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll op,l,r,k;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        <span class="comment">//scanf("%d%d%d",&amp;op,&amp;l,&amp;r);</span></span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">            <span class="comment">//scanf("%d",&amp;k);</span></span><br><span class="line">            update1(l,r,<span class="number">1</span>,<span class="number">1</span>,N,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">            <span class="comment">//scanf("%d",&amp;k);</span></span><br><span class="line">            update2(l,r,<span class="number">1</span>,<span class="number">1</span>,N,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll ans=query(l,r,<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">            ans%=PP;</span><br><span class="line">           <span class="comment">// printf("%d\n",ans);</span></span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM模板</title>
    <url>/2019/04/28/ACM%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>一些比赛用的模板<br><a id="more"></a></p>
<h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="快速幂-O-logn"><a href="#快速幂-O-logn" class="headerlink" title="快速幂  O(logn)"></a>快速幂  O(logn)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法1：</span></span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n, ll mod)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)res=res*x%mod;</span><br><span class="line">        x=x*x%mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法2:</span></span><br><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n, ll mod)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll res=mod_pow(x*x%mod,n/<span class="number">2</span>,mod);</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;vec&gt; mat;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1e8</span>+<span class="number">7</span>;   <span class="comment">//模的大小</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; a(10,1); //定义了10个整型元素的向量,且给出每个元素的初值为1</span></span><br><span class="line"><span class="function">mat <span class="title">mul</span><span class="params">(mat &amp;A,mat &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="function">mat <span class="title">C</span><span class="params">(A.size(),vec(B[<span class="number">0</span>].size()))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;B.size();k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;B[<span class="number">0</span>].size();j++)&#123;</span><br><span class="line">                C[i][j]=(C[i][j]+A[i][k]*B[k][j])%M;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mat <span class="title">pow</span><span class="params">(mat A,ll n)</span></span>&#123;</span><br><span class="line">    <span class="function">mat <span class="title">B</span><span class="params">(A.size(),vec(A.size()))</span></span>;      <span class="comment">// 输出矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++)&#123;</span><br><span class="line">        B[i][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) B=mul(B,A);</span><br><span class="line">        A=mul(A,A);</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="GCD-欧几里得算法-O（log-max-a-b-）"><a href="#GCD-欧几里得算法-O（log-max-a-b-）" class="headerlink" title="GCD 欧几里得算法 O（log max(a,b)）"></a>GCD 欧几里得算法 O（log max(a,b)）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">F(x)是斐波那契数列</span><br><span class="line">GCD(F[n],F[m])=F[gcd(n,m)</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展欧几里得算法  ax+by=gcd(a,b);</span></span><br><span class="line">    <span class="keyword">int</span> extgcd(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span>&amp; x,<span class="keyword">int</span>&amp; y)&#123;</span><br><span class="line">        <span class="keyword">int</span> d=a;</span><br><span class="line">        <span class="keyword">if</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">            d=extgcd(b,a%b,y,x);</span><br><span class="line">            y-=(a/b)*x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x=<span class="number">1</span>;</span><br><span class="line">            y=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="素数筛表"><a href="#素数筛表" class="headerlink" title="素数筛表"></a>素数筛表</h2><p>时间复杂度接近O(n)<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> prime[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prime[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*prime[j]&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i*prime[j]]=i;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="二次探测定理："><a href="#二次探测定理：" class="headerlink" title="二次探测定理："></a>二次探测定理：</h2><p>奇素数p（即除2外的素数）<br>$xmodp^2=1$的解只有x=1和x=p-1</p>
<h2 id="素数定理："><a href="#素数定理：" class="headerlink" title="素数定理："></a>素数定理：</h2><p>随着x的增长,$π(x)/(x/ln(x))=1$，(π(x)为小于x的素数的个数)</p>
<h2 id="递推式转矩阵"><a href="#递推式转矩阵" class="headerlink" title="递推式转矩阵"></a>递推式转矩阵</h2><div align="center">
<img src="D:\MyBlog\source\_posts\ACM模板\递推式.jpg">
</div>

<h2 id="费马小定理和欧拉公式"><a href="#费马小定理和欧拉公式" class="headerlink" title="费马小定理和欧拉公式"></a>费马小定理和欧拉公式</h2><blockquote>
<p>费马小定理(Fermat’s little theorem)是数论中的一个重要定理，在1636年提出。如果p是一个质数，而整数a不是p的倍数，则有$a^{p-1}≡1(mod p)$。<br><img src="https://img-blog.csdn.net/20180528204641199?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNjc5Mjk5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><br>费马小定理：$2^n<del>mod</del>m=2^{n<del>mod</del>(m-1）}mod~~m$ （这个怎么推我还不知道）</p>
<p>在数论中，欧拉定理,（也称费马-欧拉定理）是一个关于同余的性质。欧拉定理表明，若n,a为正整数，且n,a互质，则: $a^{φ(n)}≡1(mod n)$<br>φ(n)为欧拉函数，定义为不超过n的整数中与n互素的个数。<br>欧拉降幂公式： $a^b≡a^{bmodφ(n)+φ(n)}mod n$<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求欧拉函数值.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">euler_phi</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">            res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(;n%i==<span class="number">0</span>;n/=i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>) res=res/n*(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="卢卡斯定理"><a href="#卢卡斯定理" class="headerlink" title="卢卡斯定理"></a>卢卡斯定理</h2><p>Lucas定理是用来求 c(n,m) mod p，p为素数的值。<br>表达式：C(n,m)%p=C(n/p,m/p)*C(n%p,m%p)%p<br>Lucas定理：我们令n=sp+q , m=tp+r .（q ，r ≤p）<br>那么:<br><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/pic/item/e824b899a9014c08cc666bea0c7b02087bf4f424.jpg"><br>&lt;/div&gt;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="BBP公式"><a href="#BBP公式" class="headerlink" title="BBP公式"></a>BBP公式</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_C 56000</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10000</span>, b, c = MAX_C, d, e, f[MAX_C + <span class="number">1</span>], g, n, ans, cnt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* BBP公式   参照CCDN的姬小野博客   本人还不会....</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</span><br><span class="line">    <span class="keyword">for</span> (; b - c; )</span><br><span class="line">        f[b++] = a / <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (; d = <span class="number">0</span>, g = c * <span class="number">2</span>;</span><br><span class="line">         c -= <span class="number">14</span>, ans = e + d / a, e = d % a, cnt++)</span><br><span class="line">    &#123; <span class="keyword">if</span> (cnt * <span class="number">4</span> &gt; n) <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">for</span> (b = c; d += f[b]*a, f[b] = d % --g, d /= g--, --b; d *= b); &#125;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; (ans / <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; ((ans / <span class="number">100</span>) % <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; ((ans / <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">3</span>) <span class="built_in">cout</span> &lt;&lt; (ans % <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="最短路问题"><a href="#最短路问题" class="headerlink" title="最短路问题"></a>最短路问题</h2><h3 id="任意两点间的最短路问题-Floyd算法"><a href="#任意两点间的最短路问题-Floyd算法" class="headerlink" title="任意两点间的最短路问题(Floyd算法)"></a>任意两点间的最短路问题(Floyd算法)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> d[MAX_v][MAX_V]  <span class="comment">//无法到达时，权值为INF，主对角线为0</span></span><br><span class="line"><span class="keyword">int</span> V   <span class="comment">// 顶点数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;V;k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;V;j++)&#123;</span><br><span class="line">                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="单源最短路问题-Dijkstra算法"><a href="#单源最短路问题-Dijkstra算法" class="headerlink" title="单源最短路问题(Dijkstra算法)"></a>单源最短路问题(Dijkstra算法)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cost[MAX_V][MAX_V];     <span class="comment">//图的临接矩阵</span></span><br><span class="line"><span class="keyword">int</span> d[MAX_V];               <span class="comment">//顶点s（起点）到各点的最短距离</span></span><br><span class="line"><span class="keyword">bool</span> used[MAX_V];           <span class="comment">//是否已经访问过</span></span><br><span class="line"><span class="keyword">int</span> V;                      <span class="comment">//顶点数</span></span><br><span class="line"><span class="keyword">int</span> prev[MAX_V];            <span class="comment">//前趋顶点 （路径还原）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    fill(d,d+v,INF);</span><br><span class="line">    fill(used,used+V,<span class="literal">false</span>);</span><br><span class="line">    fill(prev,prev+V,<span class="number">-1</span>);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;V;u++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[u]&amp;&amp;(v==<span class="number">-1</span>||d[u]&lt;d[v])) v=u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        used[v]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;V;u++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[u]&gt;d[v]+cost[v][u])&#123;</span><br><span class="line">                d[u]=d[v]+cost[v][u];</span><br><span class="line">                prev[u]=v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//到顶点t的最短路</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; get_path(<span class="keyword">int</span> t)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">    <span class="keyword">for</span>(;t!=<span class="number">-1</span>;t=prev[t]) path.push_back(t);</span><br><span class="line">    reverse(path.begin(),path.end());</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cost[MAX_V][MAX_V];         <span class="comment">//临接矩阵表示边</span></span><br><span class="line"><span class="keyword">int</span> mincost[MAX_V];             <span class="comment">//从集合X出发的边到每个顶点的最小权值</span></span><br><span class="line"><span class="keyword">bool</span> used[MAX_V];               <span class="comment">//顶点i是否包含在集合X中</span></span><br><span class="line"><span class="keyword">int</span> V;                          <span class="comment">//顶点数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)&#123;</span><br><span class="line">        mincost[i]=INF;</span><br><span class="line">        used[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mincost[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;V;u++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!used[u]&amp;&amp;(v==<span class="number">-1</span>||mincost[u]&lt;mincost[v])) v=u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">        used[v]=<span class="literal">true</span>;                <span class="comment">//把顶点v加入X</span></span><br><span class="line">        res+=mincost[v];             <span class="comment">//把边的长度加到结果里</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;V;u++)&#123;</span><br><span class="line">            mincost[u]=min(mincost[u],cost[v][u]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> edge&amp; e1,<span class="keyword">const</span> edge&amp; e2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e1.cost &lt; e2.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> par[MAX_N]   <span class="comment">//父亲</span></span><br><span class="line"><span class="keyword">int</span> rank[MAX_N]     <span class="comment">//数的高度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_union_find</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        rank[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(par[x]==x)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> par[x]=find(par[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x=find(x);</span><br><span class="line">    y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(rank[x]&lt;rank[y])&#123;</span><br><span class="line">        par[x]=y;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        par[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(rank[x]==rank[y])rank[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edge es[MAX_E];</span><br><span class="line"><span class="keyword">int</span> V,E;            <span class="comment">//顶点数和边数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sort(es,es+E,comp);     <span class="comment">//将边排序</span></span><br><span class="line">    init_union_find(V);     <span class="comment">//并查集初始化</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E;i++)&#123;</span><br><span class="line">        edge e=es[i];</span><br><span class="line">        <span class="keyword">if</span>(!same(e.u,e.v))&#123;</span><br><span class="line">            unite(e.u,e.v);</span><br><span class="line">            res+=e.cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最大流最小割问题"><a href="#最大流最小割问题" class="headerlink" title="最大流最小割问题"></a>最大流最小割问题</h2><p>摘自：<a href="https://blog.csdn.net/yo_bc/article/details/72825629" target="_blank" rel="noopener">https://blog.csdn.net/yo_bc/article/details/72825629</a></p>
<h3 id="FORD-FULKERSON-FF"><a href="#FORD-FULKERSON-FF" class="headerlink" title="FORD-FULKERSON(FF)"></a>FORD-FULKERSON(FF)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125;edge[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> no, n, m;</span><br><span class="line"><span class="keyword">int</span> head[maxn], pre[maxn], rec[maxn], flow[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	no = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态邻接表存边 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[no].v = v; edge[no].w = w;</span><br><span class="line">	edge[no].next = head[u]; head[u] = no++;</span><br><span class="line">	edge[no].v = u; edge[no].w = <span class="number">0</span>;</span><br><span class="line">	edge[no].next = head[v]; head[v] = no++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line">	<span class="keyword">while</span>(!stk.empty()) stk.pop();</span><br><span class="line">	pre[S] = S; flow[S] = inf;</span><br><span class="line">	stk.push(S);</span><br><span class="line">	<span class="keyword">while</span>(!stk.empty())	<span class="comment">//用栈迭代替代dfs深搜 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> top = stk.top(); stk.pop();</span><br><span class="line">		<span class="keyword">int</span> k = head[top];</span><br><span class="line">		<span class="keyword">while</span>(k != <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(pre[edge[k].v] == <span class="number">-1</span> &amp;&amp; edge[k].w &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flow[edge[k].v] = min(flow[top], edge[k].w);</span><br><span class="line">				pre[edge[k].v] = top;</span><br><span class="line">				rec[edge[k].v] = k;</span><br><span class="line">				stk.push(edge[k].v);</span><br><span class="line">			&#125;</span><br><span class="line">			k = edge[k].next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pre[T] != <span class="number">-1</span>) <span class="keyword">return</span> flow[T];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FF</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>, add;</span><br><span class="line">	<span class="keyword">while</span>((add = dfs(s, t)) != <span class="number">-1</span>)	<span class="comment">//直到找不到增广路 </span></span><br><span class="line">	&#123;</span><br><span class="line">		ans += add;</span><br><span class="line">		<span class="keyword">int</span> k = t;</span><br><span class="line">		<span class="keyword">while</span>(k != s)</span><br><span class="line">		&#123;</span><br><span class="line">			edge[rec[k]].w -= add;</span><br><span class="line">			edge[rec[k]^<span class="number">1</span>].w += add;</span><br><span class="line">			k = pre[k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n) </span><br><span class="line">	&#123;</span><br><span class="line">		init();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">			add(u, v, w); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; FF(<span class="number">1</span>, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Edmonds-Karp-EK"><a href="#Edmonds-Karp-EK" class="headerlink" title="Edmonds-Karp(EK)"></a>Edmonds-Karp(EK)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125;edge[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> no, n, m;</span><br><span class="line"><span class="keyword">int</span> head[maxn], pre[maxn], rec[maxn], flow[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	no = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态邻接表存边 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[no].v = v; edge[no].w = w;</span><br><span class="line">	edge[no].next = head[u]; head[u] = no++;</span><br><span class="line">	edge[no].v = u; edge[no].w = <span class="number">0</span>;</span><br><span class="line">	edge[no].next = head[v]; head[v] = no++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line">	<span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">	pre[S] = S; flow[S] = inf;</span><br><span class="line">	q.push(S);</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())	</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> top = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">int</span> k = head[top];</span><br><span class="line">		<span class="keyword">while</span>(k != <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(pre[edge[k].v] == <span class="number">-1</span> &amp;&amp; edge[k].w &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flow[edge[k].v] = min(flow[top], edge[k].w);</span><br><span class="line">				pre[edge[k].v] = top;</span><br><span class="line">				rec[edge[k].v] = k;</span><br><span class="line">				q.push(edge[k].v);</span><br><span class="line">			&#125;</span><br><span class="line">			k = edge[k].next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pre[T] != <span class="number">-1</span>) <span class="keyword">return</span> flow[T];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>, add;</span><br><span class="line">	<span class="keyword">while</span>((add = dfs(s, t)) != <span class="number">-1</span>)	<span class="comment">//直到找不到增广路 </span></span><br><span class="line">	&#123;</span><br><span class="line">		ans += add;</span><br><span class="line">		<span class="keyword">int</span> k = t;</span><br><span class="line">		<span class="keyword">while</span>(k != s)</span><br><span class="line">		&#123;</span><br><span class="line">			edge[rec[k]].w -= add;</span><br><span class="line">			edge[rec[k]^<span class="number">1</span>].w += add;</span><br><span class="line">			k = pre[k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n) </span><br><span class="line">	&#123;</span><br><span class="line">		init();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">			add(u, v, w); </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; EK(<span class="number">1</span>, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125;edge[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn], pre[maxn], rec[maxn], head[maxn], block[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, no;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="comment">//静态邻接表存边 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[no].v = v; edge[no].w = w;</span><br><span class="line">	edge[no].next = head[u]; head[u] = no++;</span><br><span class="line">	edge[no].v = u; edge[no].w = <span class="number">0</span>;</span><br><span class="line">	edge[no].next = head[v]; head[v] = no++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	no = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="comment">//初始化一定要注意把所涉及的都覆盖到 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">	&#123; </span><br><span class="line">		dis[i] = inf;</span><br><span class="line">		block[i] = <span class="number">0</span>;	<span class="comment">//标记阻塞点 </span></span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">	dis[S] = <span class="number">0</span>; q.push(S);</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())	<span class="comment">//生成层次图 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> tp = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">int</span> k = head[tp];</span><br><span class="line">		<span class="keyword">while</span>(k != <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(dis[edge[k].v] == inf &amp;&amp; edge[k].w)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[edge[k].v] = dis[tp] + <span class="number">1</span>;</span><br><span class="line">				q.push(edge[k].v);</span><br><span class="line">			&#125;</span><br><span class="line">			k = edge[k].next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> top = S, ans = <span class="number">0</span>, flow = inf;</span><br><span class="line">	pre[S] = S; init(S, T);</span><br><span class="line">	<span class="keyword">while</span>(dis[T] != inf)	<span class="comment">//当S无法到达T，不能再增广了 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> k = head[top];</span><br><span class="line">		<span class="keyword">while</span>(k != <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(edge[k].w &amp;&amp; dis[edge[k].v] == dis[top]+<span class="number">1</span> </span><br><span class="line">			&amp;&amp; !block[edge[k].v]) <span class="keyword">break</span>;</span><br><span class="line">			k = edge[k].next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k != <span class="number">-1</span>)	<span class="comment">//找到下一节点 </span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[k].v;</span><br><span class="line">			flow = min(flow, edge[k].w);</span><br><span class="line">			pre[v] = top; rec[v] = k;</span><br><span class="line">			top = v;</span><br><span class="line">			<span class="keyword">if</span>(top == T)</span><br><span class="line">			&#123;</span><br><span class="line">				ans += flow;</span><br><span class="line">				v = <span class="number">-1</span>; k = T;</span><br><span class="line">				<span class="keyword">while</span>(k != S)</span><br><span class="line">				&#123;</span><br><span class="line">					edge[rec[k]].w -= flow;</span><br><span class="line">					edge[rec[k]^<span class="number">1</span>].w += flow;</span><br><span class="line">					<span class="keyword">if</span>(!edge[rec[k]].w) v = k;	<span class="comment">//寻找距S最近的一个"瓶颈"边 </span></span><br><span class="line">					k = pre[k];</span><br><span class="line">				&#125;</span><br><span class="line">				flow = inf;	<span class="comment">//此处flow必须在外面，大佬的板子可能没注意到，我认为是必须的 </span></span><br><span class="line">				<span class="keyword">if</span>(v != <span class="number">-1</span>)	<span class="comment">//找到"瓶颈"边 </span></span><br><span class="line">				&#123;</span><br><span class="line">					top = pre[v];</span><br><span class="line">					k = top;</span><br><span class="line">					<span class="keyword">while</span>(k != S)</span><br><span class="line">					&#123;</span><br><span class="line">						flow = min(edge[rec[k]].w, flow);</span><br><span class="line">						k = pre[k];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			block[top] = <span class="number">1</span>;	<span class="comment">//找不到下一节点成为阻塞点 </span></span><br><span class="line">			top = pre[top];	<span class="comment">//回溯 </span></span><br><span class="line">			<span class="keyword">if</span>(block[S]) init(S, T);<span class="comment">//如果S被阻塞，重新计算层次图</span></span><br><span class="line">			<span class="comment">//阻塞点的产生也造成了flow的最小值可能是后面的值，虽然进行一次</span></span><br><span class="line">			<span class="comment">//增广并没什么问题，但上述寻找瓶颈边的判断则是必须的了。 </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		pre_init();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">			add(u, v, w);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; dinic(<span class="number">1</span>, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**********************比赛版本***********************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = maxn*maxn;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> w; <span class="keyword">int</span> v, next;&#125; edge[maxm];</span><br><span class="line"><span class="keyword">int</span> pre[maxn], rec[maxn], head[maxn], block[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, no;</span><br><span class="line"><span class="keyword">int</span> S, T;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	no = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	edge[no].v = v; edge[no].w = w;</span><br><span class="line">	edge[no].next = head[u]; head[u] = no++;</span><br><span class="line">	edge[no].v = u; edge[no].w = <span class="number">0</span>;</span><br><span class="line">	edge[no].next = head[v]; head[v] = no++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">	<span class="built_in">memset</span>(block, <span class="number">0</span>, <span class="keyword">sizeof</span> block);</span><br><span class="line">	q.push(S); dis[S] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> top = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k = head[top]; k != <span class="number">-1</span>; k = edge[k].next)</span><br><span class="line">		<span class="keyword">if</span>(dis[edge[k].v] == inf &amp;&amp; edge[k].w)</span><br><span class="line">			dis[edge[k].v] = dis[top]+<span class="number">1</span>, q.push(edge[k].v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>, flow = inf;</span><br><span class="line">	<span class="keyword">int</span> top = S;</span><br><span class="line">	reset(S, T); pre[S] = S;</span><br><span class="line">	<span class="keyword">while</span>(dis[T] != inf)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> k, tmp;</span><br><span class="line">		<span class="keyword">for</span>(k = head[top]; k != <span class="number">-1</span>; k = edge[k].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(edge[k].w &amp;&amp; dis[edge[k].v]==dis[top]+<span class="number">1</span> &amp;&amp; </span><br><span class="line">			!block[edge[k].v]) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k != <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			tmp = edge[k].v;</span><br><span class="line">			flow = min(flow, edge[k].w);</span><br><span class="line">			pre[tmp] = top, rec[tmp] = k;</span><br><span class="line">			top = tmp;</span><br><span class="line">			<span class="keyword">if</span>(top == T)</span><br><span class="line">			&#123;</span><br><span class="line">				ans += flow; tmp = <span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">for</span>(; top != S; top = pre[top])</span><br><span class="line">				&#123;</span><br><span class="line">					edge[rec[top]].w -= flow;</span><br><span class="line">					edge[rec[top]^<span class="number">1</span>].w += flow;</span><br><span class="line">					<span class="keyword">if</span>(!edge[rec[top]].w) tmp = top;</span><br><span class="line">				&#125;</span><br><span class="line">				flow = inf;</span><br><span class="line">				<span class="keyword">if</span>(tmp != <span class="number">-1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					top = pre[tmp];</span><br><span class="line">					<span class="keyword">for</span>(; top != S; top = pre[top])</span><br><span class="line">					flow = min(flow, edge[rec[top]].w);</span><br><span class="line">					top = pre[tmp];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			block[top] = <span class="number">1</span>;</span><br><span class="line">			top = pre[top];</span><br><span class="line">			<span class="keyword">if</span>(block[S]) reset(S, T);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mapping</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">		add(u, v, w);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n))</span><br><span class="line">	&#123;</span><br><span class="line">		S = <span class="number">1</span>, T = n;</span><br><span class="line">		init();</span><br><span class="line">		mapping();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dinic(S, T));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Shortest-Augmenting-Paths-SAP"><a href="#Shortest-Augmenting-Paths-SAP" class="headerlink" title="Shortest Augmenting Paths(SAP"></a>Shortest Augmenting Paths(SAP</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = maxn*maxn; <span class="comment">//一定要好好计算边的数量   </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> v, w, next;  </span><br><span class="line">&#125;edge[maxm];  </span><br><span class="line"><span class="keyword">int</span> dis[maxn], pre[maxn], rec[maxn], head[maxn], gap[maxn], now[maxn];  </span><br><span class="line"><span class="keyword">int</span> n, m, no, up;  <span class="comment">//up指逆层次图可能还有增广路时dis的上界 </span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;  </span><br><span class="line"><span class="comment">//静态邻接表存边   </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    edge[no].v = v; edge[no].w = w;  </span><br><span class="line">    edge[no].next = head[u]; head[u] = no++;  </span><br><span class="line">    edge[no].v = u; edge[no].w = <span class="number">0</span>;  </span><br><span class="line">    edge[no].next = head[v]; head[v] = no++;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_init</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    no = <span class="number">0</span>;  up = n;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= up; ++i)   </span><br><span class="line">    &#123;</span><br><span class="line">    	now[i] = head[i];   <span class="comment">//now用作当前弧的优化   </span></span><br><span class="line">    	<span class="comment">//注意这里now数组要把所有用到的标号都存过来  </span></span><br><span class="line">    	gap[i] = <span class="number">0</span>, dis[i] = inf;</span><br><span class="line">    	<span class="comment">//初始化一定要注意把所涉及的都覆盖到   </span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();  </span><br><span class="line">    dis[T] = <span class="number">0</span>; q.push(T);  </span><br><span class="line">    <span class="keyword">while</span>(!q.empty())   <span class="comment">//生成逆层次图   </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> tp = q.front(); q.pop();  </span><br><span class="line">        ++gap[dis[tp]];  </span><br><span class="line">        <span class="keyword">int</span> k = head[tp];  </span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">-1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(dis[edge[k].v] == inf &amp;&amp; edge[k^<span class="number">1</span>].w)  </span><br><span class="line">            &#123;  </span><br><span class="line">                dis[edge[k].v] = dis[tp]+<span class="number">1</span>;  </span><br><span class="line">                q.push(edge[k].v);  </span><br><span class="line">            &#125;  </span><br><span class="line">            k = edge[k].next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SAP</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, flow = inf, top = S;  </span><br><span class="line">    pre[S] = S; init(S, T);  </span><br><span class="line">    <span class="keyword">while</span>(dis[S] &lt; up)    <span class="comment">//当S到T的距离大于等于点的个数时肯定就不能再增广了   </span></span><br><span class="line">    &#123;                   <span class="comment">//切记此处与节点数比较，因为通过方向变会造成距离可能达到节点数  </span></span><br><span class="line">        <span class="keyword">if</span>(top == T)  </span><br><span class="line">        &#123;  </span><br><span class="line">            ans += flow;  </span><br><span class="line">            <span class="keyword">while</span>(top != S) <span class="comment">//修改残留网络，并置top为S   </span></span><br><span class="line">            &#123;  </span><br><span class="line">                edge[rec[top]].w -= flow;  </span><br><span class="line">                edge[rec[top]^<span class="number">1</span>].w += flow;  </span><br><span class="line">                top = pre[top];  </span><br><span class="line">            &#125;  </span><br><span class="line">            flow = inf;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> k = now[top];  </span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">-1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> v = edge[k].v;  </span><br><span class="line">            <span class="keyword">if</span>(edge[k].w &amp;&amp; dis[top] == dis[v]+<span class="number">1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                flow = min(flow, edge[k].w);  </span><br><span class="line">                pre[v] = top; rec[v] = k;  </span><br><span class="line">                now[top] = k;<span class="comment">//当前弧的优化   </span></span><br><span class="line">                top = v;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            k = edge[k].next;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> mind = n;  </span><br><span class="line">            <span class="keyword">if</span>(--gap[dis[top]] == <span class="number">0</span>) <span class="keyword">break</span>;<span class="comment">//出现断层，间隙优化   </span></span><br><span class="line">            <span class="keyword">int</span> k = now[top] = head[top];<span class="comment">//改变当前点的距离标号，也要清除之前的当前弧优化的影响   </span></span><br><span class="line">            <span class="keyword">while</span>(k != <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span>(edge[k].w &amp;&amp; mind&gt;dis[edge[k].v]) mind = dis[edge[k].v];  </span><br><span class="line">                k = edge[k].next;  </span><br><span class="line">            &#125;  </span><br><span class="line">            ++gap[dis[top] = mind+<span class="number">1</span>];  </span><br><span class="line">            top = pre[top];<span class="comment">//回溯到上一个点   </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> ans;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		pre_init();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">			add(u, v, w);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; SAP(<span class="number">1</span>, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**********************比赛版本***********************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = maxn*maxn;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> w; <span class="keyword">int</span> v, next;&#125; edge[maxm];  </span><br><span class="line"><span class="keyword">int</span> pre[maxn], rec[maxn], head[maxn], gap[maxn], now[maxn];  </span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, no, up;  </span><br><span class="line"><span class="keyword">int</span> S, T; </span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    edge[no].v = v; edge[no].w = w;  </span><br><span class="line">    edge[no].next = head[u]; head[u] = no++;  </span><br><span class="line">    edge[no].v = u; edge[no].w = <span class="number">0</span>;  </span><br><span class="line">    edge[no].next = head[v]; head[v] = no++;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre_init</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    no = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">memset</span>(gap, <span class="number">0</span>, <span class="keyword">sizeof</span> gap);  </span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= up; ++i)   </span><br><span class="line">    now[i] = head[i];</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();  </span><br><span class="line">    dis[T] = <span class="number">0</span>; q.push(T);  </span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> tp = q.front(); q.pop();  </span><br><span class="line">        ++gap[dis[tp]];  </span><br><span class="line">        <span class="keyword">int</span> k = head[tp];  </span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">-1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(dis[edge[k].v] == inf &amp;&amp; edge[k^<span class="number">1</span>].w)  </span><br><span class="line">            &#123;  </span><br><span class="line">                dis[edge[k].v] = dis[tp]+<span class="number">1</span>;  </span><br><span class="line">                q.push(edge[k].v);  </span><br><span class="line">            &#125;  </span><br><span class="line">            k = edge[k].next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SAP</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, flow = inf;</span><br><span class="line">	<span class="keyword">int</span> top = S;  </span><br><span class="line">    pre[S] = S; init(S, T);  </span><br><span class="line">    <span class="keyword">while</span>(dis[S] &lt; up)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(top == T)  </span><br><span class="line">        &#123;  </span><br><span class="line">            ans += flow;  </span><br><span class="line">            <span class="keyword">while</span>(top != S)</span><br><span class="line">            &#123;  </span><br><span class="line">                edge[rec[top]].w -= flow;  </span><br><span class="line">                edge[rec[top]^<span class="number">1</span>].w += flow;  </span><br><span class="line">                top = pre[top];  </span><br><span class="line">            &#125;  </span><br><span class="line">            flow = inf;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> k = now[top];  </span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">-1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> v = edge[k].v;  </span><br><span class="line">            <span class="keyword">if</span>(edge[k].w &amp;&amp; dis[top] == dis[v]+<span class="number">1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                flow = min(flow, edge[k].w);  </span><br><span class="line">                pre[v] = top; rec[v] = k;  </span><br><span class="line">                now[top] = k; top = v;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            k = edge[k].next;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> mind = up;  </span><br><span class="line">            <span class="keyword">if</span>(--gap[dis[top]] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> k = now[top] = head[top];</span><br><span class="line">            <span class="keyword">while</span>(k != <span class="number">-1</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span>(edge[k].w &amp;&amp; mind&gt;dis[edge[k].v]) mind = dis[edge[k].v];  </span><br><span class="line">                k = edge[k].next;  </span><br><span class="line">            &#125;  </span><br><span class="line">            ++gap[dis[top] = mind+<span class="number">1</span>];  </span><br><span class="line">            top = pre[top];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> ans;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mapping</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> u, v, w;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;w); </span><br><span class="line">        add(u, v, w);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n))  </span><br><span class="line">    &#123;  </span><br><span class="line">		up = n, S = <span class="number">1</span>, T = n;</span><br><span class="line">        pre_init();  </span><br><span class="line">        mapping();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, SAP(S, T)); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> CP[MAX][MAX];           <span class="comment">//cp[i][j]=1 表示i能和j组cp</span></span><br><span class="line"><span class="keyword">bool</span> used[MAX];             <span class="comment">//记录是否已经被访问</span></span><br><span class="line"><span class="keyword">int</span> linked[MAX];            <span class="comment">//linked[i]=j 表示i和j组cp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=N;i++)&#123;    </span><br><span class="line">		<span class="keyword">if</span> (CP[x][i]==<span class="literal">true</span> &amp;&amp; used[i]==<span class="literal">false</span>)      </span><br><span class="line">		&#123;</span><br><span class="line">			used[i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (linked[i]==<span class="number">0</span> || fun(linked[i])) &#123; </span><br><span class="line">				linked[j]=x;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(linked,<span class="number">0</span>,<span class="keyword">sizeof</span>(linked));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">	       <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));				</span><br><span class="line">	       <span class="keyword">if</span>(fun(i)) </span><br><span class="line">	           ans++;</span><br><span class="line">	   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转载： https://blog.csdn.net/qq_32265245/article/details/53046750</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    |求解最大匹配问题|</span></span><br><span class="line"><span class="comment">    |dfs实现|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v1, v2;  </span><br><span class="line"><span class="keyword">bool</span> Map[<span class="number">501</span>][<span class="number">501</span>];  </span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">501</span>];  </span><br><span class="line"><span class="keyword">int</span> link[<span class="number">501</span>];  </span><br><span class="line"><span class="keyword">int</span> result;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= v2; ++y)  &#123;  </span><br><span class="line">        <span class="keyword">if</span> (Map[x][y] &amp;&amp; !visit[y])  &#123;  </span><br><span class="line">            visit[y] = <span class="literal">true</span>;  </span><br><span class="line">            <span class="keyword">if</span> (link[y] == <span class="number">0</span> || dfs(link[y]))  &#123;  </span><br><span class="line">                link[y] = x;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125; &#125; &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Search</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= v1; x++)  &#123;  </span><br><span class="line">        <span class="built_in">memset</span>(visit,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visit));  </span><br><span class="line">        <span class="keyword">if</span> (dfs(x))  </span><br><span class="line">            result++;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="博弈"><a href="#博弈" class="headerlink" title="博弈"></a>博弈</h1><h2 id="巴仕博弈（Bash-Game）"><a href="#巴仕博弈（Bash-Game）" class="headerlink" title="巴仕博弈（Bash Game）"></a>巴仕博弈（Bash Game）</h2><p>描述：<br>只有一堆n个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取m个。最后取光者得胜。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">if</span>(n%(m+<span class="number">1</span>))</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"first"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"second"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="威佐夫博弈（Wythoff-Game）"><a href="#威佐夫博弈（Wythoff-Game）" class="headerlink" title="威佐夫博弈（Wythoff Game）"></a>威佐夫博弈（Wythoff Game）</h2><p>描述：有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜<br>1，我们用（a[k]，b[k]）（a[k] ≤ b[k] ,k=0，1，2，…,n)表示两堆物品的数量并称其为局势。</p>
<p>2，如果甲面对（0，0），那么甲已经输了，这种局势我们称为奇异局势。</p>
<p>3，奇异局（举例）</p>
<p>首先列举人们已经发现的前几个奇异局势：（0，0）、（1，2）、（3，5）、（4，7）、（6，10）</p>
<p>（8，13）、（9，15）、（11，18）、（12，20）。</p>
<p>通过观察发现：a[0]=b[0]=0,a[k]是未在前面出现过的最小自然数,而 b[k]= a[k] + k。</p>
<p>4，奇异局势有如下三条性质：</p>
<p>1）任何自然数都包含且仅包含在一个奇异局势中。</p>
<p>2）任意操作都可以使奇异局势变为非奇异局势。</p>
<p>3）必有一种操作可以使非奇异局势变为奇异局势。</p>
<p>5，奇异局势公式：</p>
<p>a[k]=[k*(1+√5)/2]，b[k]=a[k]+k。</p>
<p>(k=0,1,2……，[ ]表示取整）<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//威佐夫博弈模板</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Gsr=(<span class="number">1</span>+<span class="built_in">sqrt</span>(<span class="number">5.0</span>))/<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">            swap(a,b);</span><br><span class="line">        <span class="keyword">if</span>(a == (<span class="keyword">int</span>)(Gsr*(b-a))) <span class="comment">//奇异局势，先拿者输</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"First Lose"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"First Win"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Nim博弈"><a href="#Nim博弈" class="headerlink" title="Nim博弈"></a>Nim博弈</h2><p>描述：有n堆石子，每堆各有$a_i$课石子。Alice和Bob轮流从非空的石子堆中取走至少一颗石子。<br>Alice先取，取光所有石子的一方获胜。当双方都采取最优策略时，谁会获胜？</p>
<p>结论：计算所有$a_i$的异或值，如果非零则先手胜，为零则后手胜。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Nim模板</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Gsr=(<span class="number">1</span>+<span class="built_in">sqrt</span>(<span class="number">5.0</span>))/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> N，A[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) <span class="built_in">cin</span>&gt;&gt;A[i];</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) x^=A[i];</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">0</span>) </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h2><p>描述：Alice和Bob在玩这样一个游戏。给定k个数字$a_1,a_2,···,a_k$。一开始，有n堆硬币，每堆各有$x_i$枚硬币。Alice和Bob轮流选出一堆硬币，从中取出一些硬币。每次所取硬币的枚数一定要在$a_1,a_2,···,a_k$当中。Alice先取，取光硬币的一方获胜。当双方都采取最优策略时，谁会获胜？<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SG函数模板</span></span><br><span class="line"><span class="keyword">int</span> N,K,X[MAX_N]，A[MAX_K];</span><br><span class="line"><span class="comment">//利用动态规划计算grundy值的数组</span></span><br><span class="line"><span class="keyword">int</span> grundy[MAX_X+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//轮到自己时为0则必败</span></span><br><span class="line">    grundy[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//计算grundy值</span></span><br><span class="line">    <span class="keyword">int</span> max_x=*max_element(X,X+N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=max_x;j++)&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i]&lt;=j) s.insert(grundy[j-A[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> g=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(s.count(g)!=<span class="number">0</span>)g++;</span><br><span class="line">        grundy[j]=g;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//判断胜负</span></span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) x^=grundy[X[i]];</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"Alice"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Bob"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
</search>
